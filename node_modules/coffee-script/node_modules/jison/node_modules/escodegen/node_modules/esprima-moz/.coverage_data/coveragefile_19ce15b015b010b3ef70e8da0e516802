{"version":"0.2.8","files":{"/Users/glind/gits/esprima/test/runner.js":{"stats":{"percentage":0.6005665722379604,"lines":[{"lineno":40},{"lineno":41},{"lineno":42},{"lineno":44},{"lineno":48},{"lineno":49},{"lineno":50},{"lineno":51},{"lineno":56},{"lineno":57},{"lineno":60},{"lineno":61},{"lineno":62},{"lineno":66},{"lineno":75},{"lineno":76},{"lineno":79},{"lineno":81},{"lineno":82},{"lineno":85},{"lineno":87},{"lineno":90},{"lineno":91},{"lineno":92},{"lineno":93},{"lineno":97},{"lineno":98},{"lineno":99},{"lineno":100},{"lineno":104},{"lineno":106},{"lineno":107},{"lineno":110},{"lineno":111},{"lineno":115},{"lineno":118},{"lineno":121},{"lineno":123},{"lineno":124},{"lineno":129},{"lineno":130},{"lineno":133},{"lineno":143},{"lineno":145},{"lineno":147},{"lineno":150},{"lineno":152},{"lineno":155},{"lineno":157},{"lineno":160},{"lineno":163},{"lineno":164},{"lineno":165},{"lineno":169},{"lineno":176},{"lineno":177},{"lineno":179},{"lineno":181},{"lineno":182},{"lineno":184},{"lineno":186},{"lineno":188},{"lineno":190},{"lineno":191},{"lineno":196},{"lineno":197},{"lineno":198},{"lineno":199},{"lineno":200},{"lineno":202},{"lineno":208},{"lineno":209},{"lineno":210},{"lineno":221},{"lineno":222},{"lineno":224},{"lineno":229},{"lineno":230},{"lineno":231},{"lineno":232},{"lineno":233},{"lineno":237},{"lineno":238},{"lineno":239},{"lineno":240},{"lineno":241},{"lineno":242},{"lineno":246},{"lineno":248},{"lineno":250},{"lineno":251},{"lineno":252},{"lineno":254},{"lineno":255},{"lineno":256},{"lineno":257},{"lineno":259},{"lineno":260},{"lineno":261},{"lineno":263},{"lineno":264},{"lineno":265},{"lineno":266},{"lineno":268},{"lineno":269},{"lineno":270},{"lineno":272},{"lineno":273},{"lineno":274},{"lineno":275},{"lineno":278},{"lineno":280},{"lineno":282},{"lineno":283},{"lineno":284},{"lineno":286},{"lineno":287},{"lineno":288},{"lineno":290},{"lineno":291},{"lineno":293},{"lineno":294},{"lineno":300},{"lineno":302},{"lineno":303},{"lineno":306},{"lineno":325},{"lineno":326},{"lineno":327},{"lineno":328},{"lineno":330},{"lineno":332},{"lineno":333},{"lineno":337},{"lineno":339},{"lineno":342},{"lineno":343},{"lineno":344},{"lineno":345},{"lineno":349},{"lineno":351}],"missing":141,"seen":212,"total":353,"coverage":{"40":{"partial":false,"source":"    'use strict';","missing":[{"startCol":4,"endCol":17}]},"41":{"partial":false,"source":"    if (key === 'value' && value instanceof RegExp) {","missing":[{"startCol":8,"endCol":23},{"startCol":27,"endCol":50}]},"42":{"partial":false,"source":"        value = value.toString();","missing":[{"startCol":8,"endCol":33},{"startCol":16,"endCol":32}]},"44":{"partial":false,"source":"    return value;","missing":[{"startCol":4,"endCol":17}]},"48":{"partial":false,"source":"    'use strict';","missing":[{"startCol":4,"endCol":17}]},"49":{"partial":false,"source":"    Error.call(this, 'Expected ');","missing":[{"startCol":4,"endCol":33}]},"50":{"partial":false,"source":"    this.expected = expected;","missing":[{"startCol":4,"endCol":29}]},"51":{"partial":false,"source":"    this.actual = actual;","missing":[{"startCol":4,"endCol":25}]},"56":{"partial":false,"source":"    'use strict';","missing":[{"startCol":4,"endCol":17}]},"57":{"partial":false,"source":"    var msg = e.toString();","missing":[{"startCol":4,"endCol":27},{"startCol":14,"endCol":26}]},"60":{"partial":false,"source":"    if (msg.substr(0, 6) !== 'Error:') {","missing":[{"startCol":8,"endCol":24}]},"61":{"partial":false,"source":"        if (typeof e.message === 'string') {","missing":[{"startCol":12,"endCol":41}]},"62":{"partial":false,"source":"            msg = 'Error: ' + e.message;","missing":[{"startCol":12,"endCol":40},{"startCol":18,"endCol":39}]},"66":{"partial":false,"source":"    return {","missing":[{}]},"67":{"partial":false,"source":"        index: e.index,","missing":[{}]},"68":{"partial":false,"source":"        lineNumber: e.lineNumber,","missing":[{}]},"69":{"partial":false,"source":"        column: e.column,","missing":[{}]},"70":{"partial":false,"source":"        message: msg","missing":[{}]},"71":{"partial":false,"source":"    };","missing":[{}]},"75":{"partial":false,"source":"    'use strict';","missing":[{"startCol":4,"endCol":17}]},"76":{"partial":false,"source":"    var expected, tree, actual, options, StringObject, i, len, err;","missing":[{"startCol":4,"endCol":67}]},"79":{"partial":false,"source":"    StringObject = String;","missing":[{"startCol":4,"endCol":26}]},"81":{"partial":false,"source":"    options = {","missing":[{}]},"82":{"partial":false,"source":"        comment: (typeof syntax.comments !== 'undefined'),","missing":[{"startCol":17,"endCol":57},{}]},"83":{"partial":false,"source":"        range: true,","missing":[{}]},"84":{"partial":false,"source":"        loc: true,","missing":[{}]},"85":{"partial":false,"source":"        tokens: (typeof syntax.tokens !== 'undefined'),","missing":[{"startCol":16,"endCol":54},{}]},"86":{"partial":false,"source":"        raw: true,","missing":[{}]},"87":{"partial":false,"source":"        tolerant: (typeof syntax.errors !== 'undefined')","missing":[{"startCol":18,"endCol":56},{}]},"88":{"partial":false,"source":"    };","missing":[{}]},"90":{"partial":false,"source":"    if (typeof syntax.tokens !== 'undefined') {","missing":[{"startCol":8,"endCol":44}]},"91":{"partial":false,"source":"        if (syntax.tokens.length > 0) {","missing":[{"startCol":12,"endCol":36}]},"92":{"partial":false,"source":"            options.range = (typeof syntax.tokens[0].range !== 'undefined');","missing":[{"startCol":12,"endCol":76},{"startCol":28,"endCol":75}]},"93":{"partial":false,"source":"            options.loc = (typeof syntax.tokens[0].loc !== 'undefined');","missing":[{"startCol":12,"endCol":72},{"startCol":26,"endCol":71}]},"97":{"partial":false,"source":"    if (typeof syntax.comments !== 'undefined') {","missing":[{"startCol":8,"endCol":46}]},"98":{"partial":false,"source":"        if (syntax.comments.length > 0) {","missing":[{"startCol":12,"endCol":38}]},"99":{"partial":false,"source":"            options.range = (typeof syntax.comments[0].range !== 'undefined');","missing":[{"startCol":12,"endCol":78},{"startCol":28,"endCol":77}]},"100":{"partial":false,"source":"            options.loc = (typeof syntax.comments[0].loc !== 'undefined');","missing":[{"startCol":12,"endCol":74},{"startCol":26,"endCol":73}]},"104":{"partial":false,"source":"    expected = JSON.stringify(syntax, null, 4);","missing":[{"startCol":4,"endCol":47},{"startCol":15,"endCol":46}]},"106":{"partial":false,"source":"        tree = esprima.parse(code, options);","missing":[{"startCol":8,"endCol":44},{"startCol":15,"endCol":43}]},"107":{"partial":false,"source":"        tree = (options.comment || options.tokens || options.tolerant) ? tree : tree.body[0];","missing":[{"startCol":8,"endCol":93},{"startCol":15,"endCol":70},{"startCol":16,"endCol":49},{"startCol":73,"endCol":77},{"startCol":80,"endCol":92}]},"110":{"partial":false,"source":"            for (i = 0, len = tree.errors.length; i < len; i += 1) {","missing":[{"startCol":50,"endCol":57}]},"111":{"partial":false,"source":"                tree.errors[i] = errorToObject(tree.errors[i]);","missing":[{"startCol":16,"endCol":63},{"startCol":33,"endCol":62}]},"115":{"partial":false,"source":"        actual = JSON.stringify(tree, adjustRegexLiteral, 4);","missing":[{"startCol":8,"endCol":61},{"startCol":17,"endCol":60}]},"118":{"partial":false,"source":"        esprima.parse(new StringObject(code), options);","missing":[{"startCol":8,"endCol":54}]},"121":{"partial":false,"source":"        throw new NotMatchingError(expected, e.toString());","missing":[{"startCol":8,"endCol":59},{"startCol":45,"endCol":57}]},"123":{"partial":false,"source":"    if (expected !== actual) {","missing":[{"startCol":8,"endCol":27}]},"124":{"partial":false,"source":"        throw new NotMatchingError(expected, actual);","missing":[{"startCol":8,"endCol":53}]},"129":{"partial":false,"source":"    'use strict';","missing":[{"startCol":4,"endCol":17}]},"130":{"partial":false,"source":"    var i, options, expected, actual, handleInvalidRegexFlag;","missing":[{"startCol":4,"endCol":61}]},"133":{"partial":false,"source":"    options = [","missing":[{}]},"134":{"partial":false,"source":"        {},","missing":[{}]},"135":{"partial":false,"source":"        { comment: true },","missing":[{}]},"136":{"partial":false,"source":"        { raw: true },","missing":[{}]},"137":{"partial":false,"source":"        { raw: true, comment: true }","missing":[{}]},"138":{"partial":false,"source":"    ];","missing":[{}]},"143":{"partial":false,"source":"    handleInvalidRegexFlag = false;","missing":[{"startCol":4,"endCol":35}]},"145":{"partial":false,"source":"        'test'.match(new RegExp('[a-z]', 'x'));","missing":[{"startCol":8,"endCol":46}]},"147":{"partial":false,"source":"        handleInvalidRegexFlag = true;","missing":[{"startCol":8,"endCol":38}]},"150":{"partial":false,"source":"    expected = JSON.stringify(exception);","missing":[{"startCol":4,"endCol":41},{"startCol":15,"endCol":40}]},"152":{"partial":false,"source":"    for (i = 0; i < options.length; i += 1) {","missing":[{"startCol":16,"endCol":34}]},"155":{"partial":false,"source":"            esprima.parse(code, options[i]);","missing":[{"startCol":12,"endCol":43}]},"157":{"partial":false,"source":"            actual = JSON.stringify(errorToObject(e));","missing":[{"startCol":12,"endCol":54},{"startCol":21,"endCol":53},{"startCol":36,"endCol":52}]},"160":{"partial":false,"source":"        if (expected !== actual) {","missing":[{"startCol":12,"endCol":31}]},"163":{"partial":false,"source":"            if (exception.message.indexOf('Invalid regular expression') > 0) {","missing":[{"startCol":16,"endCol":71}]},"164":{"partial":false,"source":"                if (typeof actual === 'undefined' && !handleInvalidRegexFlag) {","missing":[{"startCol":20,"endCol":49}]},"165":{"partial":false,"source":"                    return;","missing":[{"startCol":20,"endCol":27}]},"169":{"partial":false,"source":"            throw new NotMatchingError(expected, actual);","missing":[{"startCol":12,"endCol":57}]},"176":{"partial":false,"source":"    'use strict';","missing":[{"startCol":4,"endCol":17}]},"177":{"partial":false,"source":"    var expected, res, actual;","missing":[{"startCol":4,"endCol":30}]},"179":{"partial":false,"source":"    expected = JSON.stringify(result.result, null, 4);","missing":[{"startCol":4,"endCol":54},{"startCol":15,"endCol":53}]},"181":{"partial":false,"source":"        if (typeof result.property !== 'undefined') {","missing":[{"startCol":12,"endCol":50}]},"182":{"partial":false,"source":"            res = esprima[result.property];","missing":[{"startCol":12,"endCol":43}]},"184":{"partial":false,"source":"            res = esprima[result.call].apply(esprima, result.args);","missing":[{"startCol":12,"endCol":67},{"startCol":18,"endCol":66}]},"186":{"partial":false,"source":"        actual = JSON.stringify(res, adjustRegexLiteral, 4);","missing":[{"startCol":8,"endCol":60},{"startCol":17,"endCol":59}]},"188":{"partial":false,"source":"        throw new NotMatchingError(expected, e.toString());","missing":[{"startCol":8,"endCol":59},{"startCol":45,"endCol":57}]},"190":{"partial":false,"source":"    if (expected !== actual) {","missing":[{"startCol":8,"endCol":27}]},"191":{"partial":false,"source":"        throw new NotMatchingError(expected, actual);","missing":[{"startCol":8,"endCol":53}]},"196":{"partial":false,"source":"    'use strict';","missing":[{"startCol":4,"endCol":17}]},"197":{"partial":false,"source":"    if (result.hasOwnProperty('lineNumber')) {","missing":[{"startCol":8,"endCol":43}]},"198":{"partial":false,"source":"        testError(esprima, code, result);","missing":[{"startCol":8,"endCol":40}]},"199":{"partial":false,"source":"    } else if (result.hasOwnProperty('result')) {","missing":[{"startCol":15,"endCol":46}]},"200":{"partial":false,"source":"        testAPI(esprima, code, result);","missing":[{"startCol":8,"endCol":38}]},"202":{"partial":false,"source":"        testParse(esprima, code, result);","missing":[{"startCol":8,"endCol":40}]},"208":{"partial":false,"source":"    runTests = function () {","missing":[{}]},"209":{"partial":false,"source":"        'use strict';","missing":[{},{"startCol":8,"endCol":21}]},"210":{"partial":false,"source":"        var total = 0,","missing":[{}]},"211":{"partial":false,"source":"            failures = 0,","missing":[{}]},"212":{"partial":false,"source":"            category,","missing":[{}]},"213":{"partial":false,"source":"            fixture,","missing":[{}]},"214":{"partial":false,"source":"            source,","missing":[{}]},"215":{"partial":false,"source":"            tick,","missing":[{}]},"216":{"partial":false,"source":"            expected,","missing":[{}]},"217":{"partial":false,"source":"            index,","missing":[{}]},"218":{"partial":false,"source":"            len;","missing":[{}]},"219":{"partial":false,"source":"","missing":[{}]},"220":{"partial":false,"source":"        function setText(el, str) {","missing":[{}]},"221":{"partial":false,"source":"            if (typeof el.innerText === 'string') {","missing":[{},{"startCol":16,"endCol":48}]},"222":{"partial":false,"source":"                el.innerText = str;","missing":[{},{"startCol":16,"endCol":35}]},"223":{"partial":false,"source":"            } else {","missing":[{}]},"224":{"partial":false,"source":"                el.textContent = str;","missing":[{},{"startCol":16,"endCol":37}]},"225":{"partial":false,"source":"            }","missing":[{}]},"226":{"partial":false,"source":"        }","missing":[{}]},"227":{"partial":false,"source":"","missing":[{}]},"228":{"partial":false,"source":"        function startCategory(category) {","missing":[{}]},"229":{"partial":false,"source":"            var report, e;","missing":[{"startCol":12,"endCol":26},{}]},"230":{"partial":false,"source":"            report = document.getElementById('report');","missing":[{"startCol":12,"endCol":55},{"startCol":21,"endCol":54},{}]},"231":{"partial":false,"source":"            e = document.createElement('h4');","missing":[{"startCol":16,"endCol":44},{},{"startCol":12,"endCol":45}]},"232":{"partial":false,"source":"            setText(e, category);","missing":[{"startCol":12,"endCol":33},{}]},"233":{"partial":false,"source":"            report.appendChild(e);","missing":[{},{"startCol":12,"endCol":33}]},"234":{"partial":false,"source":"        }","missing":[{}]},"235":{"partial":false,"source":"","missing":[{}]},"236":{"partial":false,"source":"        function reportSuccess(code) {","missing":[{}]},"237":{"partial":false,"source":"            var report, e;","missing":[{},{"startCol":12,"endCol":26}]},"238":{"partial":false,"source":"            report = document.getElementById('report');","missing":[{"startCol":12,"endCol":55},{"startCol":21,"endCol":54},{}]},"239":{"partial":false,"source":"            e = document.createElement('pre');","missing":[{"startCol":12,"endCol":46},{"startCol":16,"endCol":45},{}]},"240":{"partial":false,"source":"            e.setAttribute('class', 'code');","missing":[{"startCol":12,"endCol":43},{}]},"241":{"partial":false,"source":"            setText(e, code);","missing":[{"startCol":12,"endCol":28},{}]},"242":{"partial":false,"source":"            report.appendChild(e);","missing":[{"startCol":12,"endCol":34},{}]},"243":{"partial":false,"source":"        }","missing":[{}]},"244":{"partial":false,"source":"","missing":[{}]},"245":{"partial":false,"source":"        function reportFailure(code, expected, actual) {","missing":[{}]},"246":{"partial":false,"source":"            var report, e;","missing":[{},{"startCol":12,"endCol":26}]},"247":{"partial":false,"source":"","missing":[{}]},"248":{"partial":false,"source":"            report = document.getElementById('report');","missing":[{},{"startCol":12,"endCol":55},{"startCol":21,"endCol":54}]},"249":{"partial":false,"source":"","missing":[{}]},"250":{"partial":false,"source":"            e = document.createElement('p');","missing":[{"startCol":12,"endCol":44},{},{"startCol":16,"endCol":43}]},"251":{"partial":false,"source":"            setText(e, 'Code:');","missing":[{},{"startCol":12,"endCol":31}]},"252":{"partial":false,"source":"            report.appendChild(e);","missing":[{},{"startCol":12,"endCol":33}]},"253":{"partial":false,"source":"","missing":[{}]},"254":{"partial":false,"source":"            e = document.createElement('pre');","missing":[{"startCol":12,"endCol":46},{},{"startCol":16,"endCol":45}]},"255":{"partial":false,"source":"            e.setAttribute('class', 'code');","missing":[{"startCol":12,"endCol":43},{}]},"256":{"partial":false,"source":"            setText(e, code);","missing":[{"startCol":12,"endCol":28},{}]},"257":{"partial":false,"source":"            report.appendChild(e);","missing":[{},{"startCol":12,"endCol":33}]},"258":{"partial":false,"source":"","missing":[{}]},"259":{"partial":false,"source":"            e = document.createElement('p');","missing":[{"startCol":12,"endCol":44},{},{"startCol":16,"endCol":43}]},"260":{"partial":false,"source":"            setText(e, 'Expected');","missing":[{"startCol":12,"endCol":34},{}]},"261":{"partial":false,"source":"            report.appendChild(e);","missing":[{"startCol":12,"endCol":33},{}]},"262":{"partial":false,"source":"","missing":[{}]},"263":{"partial":false,"source":"            e = document.createElement('pre');","missing":[{},{"startCol":12,"endCol":46},{"startCol":16,"endCol":45}]},"264":{"partial":false,"source":"            e.setAttribute('class', 'expected');","missing":[{"startCol":12,"endCol":47},{}]},"265":{"partial":false,"source":"            setText(e, expected);","missing":[{},{"startCol":12,"endCol":32}]},"266":{"partial":false,"source":"            report.appendChild(e);","missing":[{"startCol":12,"endCol":33},{}]},"267":{"partial":false,"source":"","missing":[{}]},"268":{"partial":false,"source":"            e = document.createElement('p');","missing":[{"startCol":12,"endCol":44},{},{"startCol":16,"endCol":43}]},"269":{"partial":false,"source":"            setText(e, 'Actual');","missing":[{"startCol":12,"endCol":32},{}]},"270":{"partial":false,"source":"            report.appendChild(e);","missing":[{"startCol":12,"endCol":33},{}]},"271":{"partial":false,"source":"","missing":[{}]},"272":{"partial":false,"source":"            e = document.createElement('pre');","missing":[{"startCol":12,"endCol":46},{},{"startCol":16,"endCol":45}]},"273":{"partial":false,"source":"            e.setAttribute('class', 'actual');","missing":[{},{"startCol":12,"endCol":45}]},"274":{"partial":false,"source":"            setText(e, actual);","missing":[{"startCol":12,"endCol":30},{}]},"275":{"partial":false,"source":"            report.appendChild(e);","missing":[{"startCol":12,"endCol":33},{}]},"276":{"partial":false,"source":"        }","missing":[{}]},"277":{"partial":false,"source":"","missing":[{}]},"278":{"partial":false,"source":"        setText(document.getElementById('version'), esprima.version);","missing":[{},{"startCol":8,"endCol":68},{"startCol":16,"endCol":50}]},"279":{"partial":false,"source":"","missing":[{}]},"280":{"partial":false,"source":"        tick = new Date();","missing":[{},{"startCol":8,"endCol":26}]},"281":{"partial":false,"source":"        for (category in testFixture) {","missing":[{}]},"282":{"partial":false,"source":"            if (testFixture.hasOwnProperty(category)) {","missing":[{"startCol":16,"endCol":52},{}]},"283":{"partial":false,"source":"                startCategory(category);","missing":[{"startCol":16,"endCol":39},{}]},"284":{"partial":false,"source":"                fixture = testFixture[category];","missing":[{"startCol":16,"endCol":48},{}]},"285":{"partial":false,"source":"                for (source in fixture) {","missing":[{}]},"286":{"partial":false,"source":"                    if (fixture.hasOwnProperty(source)) {","missing":[{},{"startCol":24,"endCol":54}]},"287":{"partial":false,"source":"                        expected = fixture[source];","missing":[{"startCol":24,"endCol":51},{}]},"288":{"partial":false,"source":"                        total += 1;","missing":[{"startCol":24,"endCol":35},{}]},"289":{"partial":false,"source":"                        try {","missing":[{}]},"290":{"partial":false,"source":"                            runTest(esprima, source, expected);","missing":[{},{"startCol":28,"endCol":62}]},"291":{"partial":false,"source":"                            reportSuccess(source, JSON.stringify(expected, null, 4));","missing":[{"startCol":28,"endCol":84},{},{"startCol":50,"endCol":83}]},"292":{"partial":false,"source":"                        } catch (e) {","missing":[{}]},"293":{"partial":false,"source":"                            failures += 1;","missing":[{"startCol":28,"endCol":42},{}]},"294":{"partial":false,"source":"                            reportFailure(source, e.expected, e.actual);","missing":[{"startCol":28,"endCol":71},{}]},"295":{"partial":false,"source":"                        }","missing":[{}]},"296":{"partial":false,"source":"                    }","missing":[{}]},"297":{"partial":false,"source":"                }","missing":[{}]},"298":{"partial":false,"source":"            }","missing":[{}]},"299":{"partial":false,"source":"        }","missing":[{}]},"300":{"partial":false,"source":"        tick = (new Date()) - tick;","missing":[{"startCol":15,"endCol":34},{},{"startCol":8,"endCol":35}]},"301":{"partial":false,"source":"","missing":[{}]},"302":{"partial":false,"source":"        if (failures > 0) {","missing":[{},{"startCol":12,"endCol":24}]},"303":{"partial":false,"source":"            setText(document.getElementById('status'), total + ' tests. ' +","missing":[{"startCol":20,"endCol":53},{"startCol":55,"endCol":73},{}]},"304":{"partial":false,"source":"                'Failures: ' + failures + '. ' + tick + ' ms');","missing":[{}]},"305":{"partial":false,"source":"        } else {","missing":[{}]},"306":{"partial":false,"source":"            setText(document.getElementById('status'), total + ' tests. ' +","missing":[{},{"startCol":20,"endCol":53},{"startCol":55,"endCol":73}]},"307":{"partial":false,"source":"                'No failure. ' + tick + ' ms');","missing":[{}]},"308":{"partial":false,"source":"        }","missing":[{}]},"309":{"partial":false,"source":"    };","missing":[{}]},"325":{"partial":false,"source":"        Object.keys(testFixture).forEach(function (category) {","missing":[{},{"startCol":19,"endCol":32}]},"326":{"partial":false,"source":"            Object.keys(testFixture[category]).forEach(function (source) {","missing":[{},{"startCol":23,"endCol":46}]},"327":{"partial":false,"source":"                total += 1;","missing":[{},{"startCol":16,"endCol":27}]},"328":{"partial":false,"source":"                expected = testFixture[category][source];","missing":[{},{"startCol":16,"endCol":57}]},"329":{"partial":false,"source":"                try {","missing":[{}]},"330":{"partial":false,"source":"                    runTest(esprima, source, expected);","missing":[{},{"startCol":20,"endCol":54}]},"331":{"partial":false,"source":"                } catch (e) {","missing":[{}]},"332":{"partial":false,"source":"                    e.source = source;","missing":[{},{"startCol":20,"endCol":38}]},"333":{"partial":false,"source":"                    failures.push(e);","missing":[{"startCol":20,"endCol":36},{}]},"334":{"partial":false,"source":"                }","missing":[{}]},"335":{"partial":false,"source":"            });","missing":[{}]},"336":{"partial":false,"source":"        });","missing":[{}]},"337":{"partial":false,"source":"        tick = (new Date()) - tick;","missing":[{"startCol":8,"endCol":35},{"startCol":15,"endCol":34}]},"339":{"partial":false,"source":"        header = total + ' tests. ' + failures.length + ' failures. ' +","missing":[{},{"startCol":17,"endCol":35}]},"340":{"partial":false,"source":"            tick + ' ms';","missing":[{}]},"342":{"partial":false,"source":"            console.error(header);","missing":[{"startCol":12,"endCol":33}]},"343":{"partial":false,"source":"            failures.forEach(function (failure) {","missing":[{}]},"344":{"partial":false,"source":"                console.error(failure.source + ': Expected\\n    ' +","missing":[{},{"startCol":30,"endCol":65}]},"345":{"partial":false,"source":"                    failure.expected.split('\\n').join('\\n    ') +","missing":[{},{"startCol":20,"endCol":63},{"startCol":42,"endCol":48}]},"346":{"partial":false,"source":"                    '\\nto match\\n    ' + failure.actual);","missing":[{}]},"347":{"partial":false,"source":"            });","missing":[{}]},"349":{"partial":false,"source":"            console.log(header);","missing":[{"startCol":12,"endCol":31}]},"351":{"partial":false,"source":"        process.exit(failures.length === 0 ? 0 : 1);","missing":[{"startCol":8,"endCol":51},{"startCol":21,"endCol":42},{"startCol":45,"endCol":46},{"startCol":49,"endCol":50}]}},"source":"/*\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2011 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2011 Arpad Borsos <arpad.borsos@googlemail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*jslint browser:true node:true */\n/*global esprima:true, testFixture:true */\n\nvar runTests;\n\n// Special handling for regular expression literal since we need to\n// convert it to a string literal, otherwise it will be decoded\n// as object \"{}\" and the regular expression would be lost.\nfunction adjustRegexLiteral(key, value) {\n    'use strict';\n    if (key === 'value' && value instanceof RegExp) {\n        value = value.toString();\n    }\n    return value;\n}\n\nfunction NotMatchingError(expected, actual) {\n    'use strict';\n    Error.call(this, 'Expected ');\n    this.expected = expected;\n    this.actual = actual;\n}\nNotMatchingError.prototype = new Error();\n\nfunction errorToObject(e) {\n    'use strict';\n    var msg = e.toString();\n\n    // Opera 9.64 produces an non-standard string in toString().\n    if (msg.substr(0, 6) !== 'Error:') {\n        if (typeof e.message === 'string') {\n            msg = 'Error: ' + e.message;\n        }\n    }\n\n    return {\n        index: e.index,\n        lineNumber: e.lineNumber,\n        column: e.column,\n        message: msg\n    };\n}\n\nfunction testParse(esprima, code, syntax) {\n    'use strict';\n    var expected, tree, actual, options, StringObject, i, len, err;\n\n    // alias, so that JSLint does not complain.\n    StringObject = String;\n\n    options = {\n        comment: (typeof syntax.comments !== 'undefined'),\n        range: true,\n        loc: true,\n        tokens: (typeof syntax.tokens !== 'undefined'),\n        raw: true,\n        tolerant: (typeof syntax.errors !== 'undefined')\n    };\n\n    if (typeof syntax.tokens !== 'undefined') {\n        if (syntax.tokens.length > 0) {\n            options.range = (typeof syntax.tokens[0].range !== 'undefined');\n            options.loc = (typeof syntax.tokens[0].loc !== 'undefined');\n        }\n    }\n\n    if (typeof syntax.comments !== 'undefined') {\n        if (syntax.comments.length > 0) {\n            options.range = (typeof syntax.comments[0].range !== 'undefined');\n            options.loc = (typeof syntax.comments[0].loc !== 'undefined');\n        }\n    }\n\n    expected = JSON.stringify(syntax, null, 4);\n    try {\n        tree = esprima.parse(code, options);\n        tree = (options.comment || options.tokens || options.tolerant) ? tree : tree.body[0];\n\n        if (options.tolerant) {\n            for (i = 0, len = tree.errors.length; i < len; i += 1) {\n                tree.errors[i] = errorToObject(tree.errors[i]);\n            }\n        }\n\n        actual = JSON.stringify(tree, adjustRegexLiteral, 4);\n\n        // Only to ensure that there is no error when using string object.\n        esprima.parse(new StringObject(code), options);\n\n    } catch (e) {\n        throw new NotMatchingError(expected, e.toString());\n    }\n    if (expected !== actual) {\n        throw new NotMatchingError(expected, actual);\n    }\n}\n\nfunction testError(esprima, code, exception) {\n    'use strict';\n    var i, options, expected, actual, handleInvalidRegexFlag;\n\n    // Different parsing options should give the same error.\n    options = [\n        {},\n        { comment: true },\n        { raw: true },\n        { raw: true, comment: true }\n    ];\n\n    // If handleInvalidRegexFlag is true, an invalid flag in a regular expression\n    // will throw an exception. In some old version V8, this is not the case\n    // and hence handleInvalidRegexFlag is false.\n    handleInvalidRegexFlag = false;\n    try {\n        'test'.match(new RegExp('[a-z]', 'x'));\n    } catch (e) {\n        handleInvalidRegexFlag = true;\n    }\n\n    expected = JSON.stringify(exception);\n\n    for (i = 0; i < options.length; i += 1) {\n\n        try {\n            esprima.parse(code, options[i]);\n        } catch (e) {\n            actual = JSON.stringify(errorToObject(e));\n        }\n\n        if (expected !== actual) {\n\n            // Compensate for old V8 which does not handle invalid flag.\n            if (exception.message.indexOf('Invalid regular expression') > 0) {\n                if (typeof actual === 'undefined' && !handleInvalidRegexFlag) {\n                    return;\n                }\n            }\n\n            throw new NotMatchingError(expected, actual);\n        }\n\n    }\n}\n\nfunction testAPI(esprima, code, result) {\n    'use strict';\n    var expected, res, actual;\n\n    expected = JSON.stringify(result.result, null, 4);\n    try {\n        if (typeof result.property !== 'undefined') {\n            res = esprima[result.property];\n        } else {\n            res = esprima[result.call].apply(esprima, result.args);\n        }\n        actual = JSON.stringify(res, adjustRegexLiteral, 4);\n    } catch (e) {\n        throw new NotMatchingError(expected, e.toString());\n    }\n    if (expected !== actual) {\n        throw new NotMatchingError(expected, actual);\n    }\n}\n\nfunction runTest(esprima, code, result) {\n    'use strict';\n    if (result.hasOwnProperty('lineNumber')) {\n        testError(esprima, code, result);\n    } else if (result.hasOwnProperty('result')) {\n        testAPI(esprima, code, result);\n    } else {\n        testParse(esprima, code, result);\n    }\n}\n\nif (typeof window !== 'undefined') {\n    // Run all tests in a browser environment.\n    runTests = function () {\n        'use strict';\n        var total = 0,\n            failures = 0,\n            category,\n            fixture,\n            source,\n            tick,\n            expected,\n            index,\n            len;\n\n        function setText(el, str) {\n            if (typeof el.innerText === 'string') {\n                el.innerText = str;\n            } else {\n                el.textContent = str;\n            }\n        }\n\n        function startCategory(category) {\n            var report, e;\n            report = document.getElementById('report');\n            e = document.createElement('h4');\n            setText(e, category);\n            report.appendChild(e);\n        }\n\n        function reportSuccess(code) {\n            var report, e;\n            report = document.getElementById('report');\n            e = document.createElement('pre');\n            e.setAttribute('class', 'code');\n            setText(e, code);\n            report.appendChild(e);\n        }\n\n        function reportFailure(code, expected, actual) {\n            var report, e;\n\n            report = document.getElementById('report');\n\n            e = document.createElement('p');\n            setText(e, 'Code:');\n            report.appendChild(e);\n\n            e = document.createElement('pre');\n            e.setAttribute('class', 'code');\n            setText(e, code);\n            report.appendChild(e);\n\n            e = document.createElement('p');\n            setText(e, 'Expected');\n            report.appendChild(e);\n\n            e = document.createElement('pre');\n            e.setAttribute('class', 'expected');\n            setText(e, expected);\n            report.appendChild(e);\n\n            e = document.createElement('p');\n            setText(e, 'Actual');\n            report.appendChild(e);\n\n            e = document.createElement('pre');\n            e.setAttribute('class', 'actual');\n            setText(e, actual);\n            report.appendChild(e);\n        }\n\n        setText(document.getElementById('version'), esprima.version);\n\n        tick = new Date();\n        for (category in testFixture) {\n            if (testFixture.hasOwnProperty(category)) {\n                startCategory(category);\n                fixture = testFixture[category];\n                for (source in fixture) {\n                    if (fixture.hasOwnProperty(source)) {\n                        expected = fixture[source];\n                        total += 1;\n                        try {\n                            runTest(esprima, source, expected);\n                            reportSuccess(source, JSON.stringify(expected, null, 4));\n                        } catch (e) {\n                            failures += 1;\n                            reportFailure(source, e.expected, e.actual);\n                        }\n                    }\n                }\n            }\n        }\n        tick = (new Date()) - tick;\n\n        if (failures > 0) {\n            setText(document.getElementById('status'), total + ' tests. ' +\n                'Failures: ' + failures + '. ' + tick + ' ms');\n        } else {\n            setText(document.getElementById('status'), total + ' tests. ' +\n                'No failure. ' + tick + ' ms');\n        }\n    };\n} else {\n    (function () {\n        'use strict';\n\n        var esprima = require('../esprima'),\n            vm = require('vm'),\n            fs = require('fs'),\n            total = 0,\n            failures = [],\n            tick = new Date(),\n            expected,\n            header;\n\n        vm.runInThisContext(fs.readFileSync(__dirname + '/test.js', 'utf-8'));\n\n        Object.keys(testFixture).forEach(function (category) {\n            Object.keys(testFixture[category]).forEach(function (source) {\n                total += 1;\n                expected = testFixture[category][source];\n                try {\n                    runTest(esprima, source, expected);\n                } catch (e) {\n                    e.source = source;\n                    failures.push(e);\n                }\n            });\n        });\n        tick = (new Date()) - tick;\n\n        header = total + ' tests. ' + failures.length + ' failures. ' +\n            tick + ' ms';\n        if (failures.length) {\n            console.error(header);\n            failures.forEach(function (failure) {\n                console.error(failure.source + ': Expected\\n    ' +\n                    failure.expected.split('\\n').join('\\n    ') +\n                    '\\nto match\\n    ' + failure.actual);\n            });\n        } else {\n            console.log(header);\n        }\n        process.exit(failures.length === 0 ? 0 : 1);\n    }());\n}","blocks":{"total":60,"seen":2,"missing":58,"percentage":0.03333333333333333}},"hash":"858fc372235fc8e3a70d65c0bb00cc37"},"/Users/glind/gits/esprima/esprima.js":{"stats":{"percentage":0.5719579987646696,"lines":[{"lineno":50},{"lineno":54},{"lineno":223},{"lineno":228},{"lineno":232},{"lineno":233},{"lineno":238},{"lineno":242},{"lineno":246},{"lineno":253},{"lineno":254},{"lineno":255},{"lineno":256},{"lineno":262},{"lineno":268},{"lineno":269},{"lineno":270},{"lineno":274},{"lineno":275},{"lineno":276},{"lineno":277},{"lineno":292},{"lineno":295},{"lineno":311},{"lineno":314},{"lineno":318},{"lineno":324},{"lineno":327},{"lineno":330},{"lineno":333},{"lineno":336},{"lineno":339},{"lineno":342},{"lineno":345},{"lineno":348},{"lineno":353},{"lineno":360},{"lineno":365},{"lineno":368},{"lineno":369},{"lineno":372},{"lineno":378},{"lineno":384},{"lineno":386},{"lineno":387},{"lineno":389},{"lineno":390},{"lineno":393},{"lineno":394},{"lineno":395},{"lineno":396},{"lineno":397},{"lineno":399},{"lineno":400},{"lineno":403},{"lineno":404},{"lineno":405},{"lineno":407},{"lineno":408},{"lineno":409},{"lineno":410},{"lineno":411},{"lineno":414},{"lineno":415},{"lineno":416},{"lineno":418},{"lineno":419},{"lineno":420},{"lineno":421},{"lineno":422},{"lineno":426},{"lineno":427},{"lineno":428},{"lineno":429},{"lineno":430},{"lineno":431},{"lineno":432},{"lineno":433},{"lineno":434},{"lineno":435},{"lineno":440},{"lineno":441},{"lineno":442},{"lineno":443},{"lineno":444},{"lineno":445},{"lineno":447},{"lineno":448},{"lineno":456},{"lineno":458},{"lineno":459},{"lineno":460},{"lineno":461},{"lineno":462},{"lineno":464},{"lineno":467},{"lineno":471},{"lineno":473},{"lineno":474},{"lineno":477},{"lineno":478},{"lineno":481},{"lineno":482},{"lineno":483},{"lineno":486},{"lineno":489},{"lineno":490},{"lineno":494},{"lineno":495},{"lineno":497},{"lineno":498},{"lineno":499},{"lineno":503},{"lineno":505},{"lineno":506},{"lineno":507},{"lineno":510},{"lineno":511},{"lineno":512},{"lineno":513},{"lineno":514},{"lineno":516},{"lineno":517},{"lineno":518},{"lineno":520},{"lineno":521},{"lineno":523},{"lineno":525},{"lineno":526},{"lineno":529},{"lineno":532},{"lineno":533},{"lineno":534},{"lineno":537},{"lineno":538},{"lineno":539},{"lineno":540},{"lineno":542},{"lineno":543},{"lineno":544},{"lineno":546},{"lineno":547},{"lineno":549},{"lineno":551},{"lineno":552},{"lineno":555},{"lineno":561},{"lineno":562},{"lineno":571},{"lineno":572},{"lineno":583},{"lineno":584},{"lineno":595},{"lineno":596},{"lineno":605},{"lineno":617},{"lineno":625},{"lineno":626},{"lineno":627},{"lineno":636},{"lineno":637},{"lineno":638},{"lineno":650},{"lineno":651},{"lineno":652},{"lineno":654},{"lineno":663},{"lineno":664},{"lineno":668},{"lineno":669},{"lineno":670},{"lineno":671},{"lineno":683},{"lineno":684},{"lineno":685},{"lineno":694},{"lineno":695},{"lineno":696},{"lineno":705},{"lineno":706},{"lineno":707},{"lineno":716},{"lineno":717},{"lineno":718},{"lineno":727},{"lineno":728},{"lineno":729},{"lineno":741},{"lineno":742},{"lineno":743},{"lineno":744},{"lineno":746},{"lineno":754},{"lineno":755},{"lineno":756},{"lineno":757},{"lineno":759},{"lineno":767},{"lineno":768},{"lineno":769},{"lineno":780},{"lineno":781},{"lineno":783},{"lineno":794},{"lineno":796},{"lineno":797},{"lineno":800},{"lineno":801},{"lineno":802},{"lineno":803},{"lineno":804},{"lineno":810},{"lineno":811},{"lineno":812},{"lineno":813},{"lineno":814},{"lineno":815},{"lineno":818},{"lineno":821},{"lineno":823},{"lineno":826},{"lineno":827},{"lineno":828},{"lineno":829},{"lineno":832},{"lineno":834},{"lineno":839},{"lineno":840},{"lineno":841},{"lineno":843},{"lineno":844},{"lineno":845},{"lineno":848},{"lineno":851},{"lineno":853},{"lineno":856},{"lineno":857},{"lineno":858},{"lineno":859},{"lineno":862},{"lineno":864},{"lineno":869},{"lineno":870},{"lineno":871},{"lineno":872},{"lineno":874},{"lineno":875},{"lineno":876},{"lineno":879},{"lineno":880},{"lineno":881},{"lineno":884},{"lineno":887},{"lineno":889},{"lineno":892},{"lineno":893},{"lineno":894},{"lineno":895},{"lineno":899},{"lineno":901},{"lineno":910},{"lineno":911},{"lineno":915},{"lineno":916},{"lineno":917},{"lineno":920},{"lineno":924},{"lineno":925},{"lineno":926},{"lineno":927},{"lineno":928},{"lineno":931},{"lineno":935},{"lineno":936},{"lineno":938},{"lineno":939},{"lineno":940},{"lineno":943},{"lineno":944},{"lineno":945},{"lineno":946},{"lineno":947},{"lineno":948},{"lineno":951},{"lineno":954},{"lineno":955},{"lineno":956},{"lineno":958},{"lineno":962},{"lineno":963},{"lineno":964},{"lineno":965},{"lineno":969},{"lineno":971},{"lineno":981},{"lineno":983},{"lineno":984},{"lineno":987},{"lineno":988},{"lineno":990},{"lineno":991},{"lineno":993},{"lineno":994},{"lineno":996},{"lineno":997},{"lineno":998},{"lineno":1001},{"lineno":1004},{"lineno":1007},{"lineno":1011},{"lineno":1012},{"lineno":1013},{"lineno":1015},{"lineno":1016},{"lineno":1018},{"lineno":1020},{"lineno":1021},{"lineno":1026},{"lineno":1029},{"lineno":1032},{"lineno":1036},{"lineno":1037},{"lineno":1040},{"lineno":1041},{"lineno":1044},{"lineno":1045},{"lineno":1046},{"lineno":1050},{"lineno":1051},{"lineno":1052},{"lineno":1053},{"lineno":1056},{"lineno":1058},{"lineno":1063},{"lineno":1064},{"lineno":1065},{"lineno":1068},{"lineno":1071},{"lineno":1075},{"lineno":1076},{"lineno":1079},{"lineno":1090},{"lineno":1092},{"lineno":1093},{"lineno":1094},{"lineno":1096},{"lineno":1098},{"lineno":1099},{"lineno":1100},{"lineno":1101},{"lineno":1102},{"lineno":1104},{"lineno":1105},{"lineno":1106},{"lineno":1107},{"lineno":1110},{"lineno":1111},{"lineno":1112},{"lineno":1113},{"lineno":1116},{"lineno":1119},{"lineno":1122},{"lineno":1126},{"lineno":1127},{"lineno":1128},{"lineno":1130},{"lineno":1131},{"lineno":1133},{"lineno":1135},{"lineno":1136},{"lineno":1141},{"lineno":1144},{"lineno":1147},{"lineno":1151},{"lineno":1152},{"lineno":1155},{"lineno":1156},{"lineno":1159},{"lineno":1160},{"lineno":1161},{"lineno":1165},{"lineno":1166},{"lineno":1167},{"lineno":1168},{"lineno":1171},{"lineno":1173},{"lineno":1178},{"lineno":1179},{"lineno":1180},{"lineno":1183},{"lineno":1184},{"lineno":1185},{"lineno":1186},{"lineno":1189},{"lineno":1194},{"lineno":1197},{"lineno":1201},{"lineno":1212},{"lineno":1214},{"lineno":1215},{"lineno":1217},{"lineno":1219},{"lineno":1220},{"lineno":1223},{"lineno":1227},{"lineno":1229},{"lineno":1230},{"lineno":1232},{"lineno":1233},{"lineno":1234},{"lineno":1235},{"lineno":1237},{"lineno":1238},{"lineno":1239},{"lineno":1241},{"lineno":1242},{"lineno":1245},{"lineno":1246},{"lineno":1248},{"lineno":1249},{"lineno":1251},{"lineno":1252},{"lineno":1253},{"lineno":1255},{"lineno":1256},{"lineno":1257},{"lineno":1258},{"lineno":1264},{"lineno":1268},{"lineno":1270},{"lineno":1271},{"lineno":1272},{"lineno":1273},{"lineno":1277},{"lineno":1278},{"lineno":1279},{"lineno":1280},{"lineno":1281},{"lineno":1282},{"lineno":1283},{"lineno":1285},{"lineno":1286},{"lineno":1287},{"lineno":1288},{"lineno":1291},{"lineno":1292},{"lineno":1293},{"lineno":1296},{"lineno":1299},{"lineno":1300},{"lineno":1305},{"lineno":1307},{"lineno":1310},{"lineno":1318},{"lineno":1319},{"lineno":1320},{"lineno":1321},{"lineno":1325},{"lineno":1327},{"lineno":1329},{"lineno":1330},{"lineno":1338},{"lineno":1339},{"lineno":1340},{"lineno":1343},{"lineno":1345},{"lineno":1346},{"lineno":1349},{"lineno":1350},{"lineno":1353},{"lineno":1354},{"lineno":1357},{"lineno":1358},{"lineno":1359},{"lineno":1362},{"lineno":1366},{"lineno":1369},{"lineno":1370},{"lineno":1371},{"lineno":1372},{"lineno":1373},{"lineno":1374},{"lineno":1377},{"lineno":1378},{"lineno":1382},{"lineno":1384},{"lineno":1385},{"lineno":1388},{"lineno":1389},{"lineno":1390},{"lineno":1391},{"lineno":1392},{"lineno":1393},{"lineno":1394},{"lineno":1396},{"lineno":1400},{"lineno":1403},{"lineno":1405},{"lineno":1406},{"lineno":1407},{"lineno":1410},{"lineno":1411},{"lineno":1413},{"lineno":1414},{"lineno":1415},{"lineno":1418},{"lineno":1419},{"lineno":1420},{"lineno":1421},{"lineno":1423},{"lineno":1429},{"lineno":1431},{"lineno":1432},{"lineno":1433},{"lineno":1434},{"lineno":1435},{"lineno":1436},{"lineno":1437},{"lineno":1438},{"lineno":1440},{"lineno":1446},{"lineno":1447},{"lineno":1448},{"lineno":1451},{"lineno":1455},{"lineno":1456},{"lineno":1457},{"lineno":1458},{"lineno":1459},{"lineno":1461},{"lineno":1462},{"lineno":1463},{"lineno":1464},{"lineno":1467},{"lineno":1472},{"lineno":1475},{"lineno":1477},{"lineno":1486},{"lineno":1487},{"lineno":1490},{"lineno":1491},{"lineno":1494},{"lineno":1495},{"lineno":1498},{"lineno":1499},{"lineno":1502},{"lineno":1503},{"lineno":1504},{"lineno":1505},{"lineno":1506},{"lineno":1508},{"lineno":1511},{"lineno":1512},{"lineno":1516},{"lineno":1523},{"lineno":1524},{"lineno":1525},{"lineno":1533},{"lineno":1534},{"lineno":1535},{"lineno":1542},{"lineno":1543},{"lineno":1549},{"lineno":1550},{"lineno":1557},{"lineno":1558},{"lineno":1564},{"lineno":1567},{"lineno":1568},{"lineno":1570},{"lineno":1571},{"lineno":1572},{"lineno":1573},{"lineno":1574},{"lineno":1575},{"lineno":1576},{"lineno":1577},{"lineno":1578},{"lineno":1579},{"lineno":1580},{"lineno":1581},{"lineno":1585},{"lineno":1588},{"lineno":1589},{"lineno":1590},{"lineno":1593},{"lineno":1594},{"lineno":1595},{"lineno":1596},{"lineno":1599},{"lineno":1600},{"lineno":1601},{"lineno":1604},{"lineno":1605},{"lineno":1606},{"lineno":1608},{"lineno":1614},{"lineno":1618},{"lineno":1624},{"lineno":1626},{"lineno":1628},{"lineno":1629},{"lineno":1630},{"lineno":1631},{"lineno":1633},{"lineno":1635},{"lineno":1636},{"lineno":1641},{"lineno":1643},{"lineno":1652},{"lineno":1654},{"lineno":1655},{"lineno":1656},{"lineno":1657},{"lineno":1658},{"lineno":1659},{"lineno":1661},{"lineno":1662},{"lineno":1664},{"lineno":1665},{"lineno":1667},{"lineno":1675},{"lineno":1680},{"lineno":1682},{"lineno":1683},{"lineno":1684},{"lineno":1686},{"lineno":1688},{"lineno":1689},{"lineno":1690},{"lineno":1691},{"lineno":1692},{"lineno":1693},{"lineno":1694},{"lineno":1696},{"lineno":1697},{"lineno":1699},{"lineno":1700},{"lineno":1701},{"lineno":1704},{"lineno":1708},{"lineno":1710},{"lineno":1712},{"lineno":1714},{"lineno":1718},{"lineno":1723},{"lineno":1724},{"lineno":1725},{"lineno":1727},{"lineno":1730},{"lineno":1737},{"lineno":1739},{"lineno":1741},{"lineno":1743},{"lineno":1747},{"lineno":1748},{"lineno":1749},{"lineno":1750},{"lineno":1751},{"lineno":1754},{"lineno":1757},{"lineno":1758},{"lineno":1759},{"lineno":1760},{"lineno":1761},{"lineno":1762},{"lineno":1763},{"lineno":1766},{"lineno":1770},{"lineno":1771},{"lineno":1772},{"lineno":1775},{"lineno":1778},{"lineno":1779},{"lineno":1782},{"lineno":1787},{"lineno":1796},{"lineno":1797},{"lineno":1798},{"lineno":1800},{"lineno":1802},{"lineno":1804},{"lineno":1805},{"lineno":1808},{"lineno":1811},{"lineno":1816},{"lineno":1817},{"lineno":1818},{"lineno":1819},{"lineno":1822},{"lineno":1825},{"lineno":1826},{"lineno":1829},{"lineno":1834},{"lineno":1846},{"lineno":1848},{"lineno":1850},{"lineno":1851},{"lineno":1853},{"lineno":1854},{"lineno":1856},{"lineno":1858},{"lineno":1859},{"lineno":1860},{"lineno":1861},{"lineno":1862},{"lineno":1863},{"lineno":1864},{"lineno":1867},{"lineno":1868},{"lineno":1869},{"lineno":1870},{"lineno":1873},{"lineno":1875},{"lineno":1878},{"lineno":1880},{"lineno":1881},{"lineno":1885},{"lineno":1887},{"lineno":1894},{"lineno":1895},{"lineno":1896},{"lineno":1898},{"lineno":1909},{"lineno":1911},{"lineno":1912},{"lineno":1913},{"lineno":1916},{"lineno":1917},{"lineno":1918},{"lineno":1921},{"lineno":1931},{"lineno":1932},{"lineno":1935},{"lineno":1936},{"lineno":1938},{"lineno":1942},{"lineno":1943},{"lineno":1944},{"lineno":1946},{"lineno":1949},{"lineno":1950},{"lineno":1951},{"lineno":1952},{"lineno":1957},{"lineno":1958},{"lineno":1961},{"lineno":1962},{"lineno":1965},{"lineno":1966},{"lineno":1967},{"lineno":1974},{"lineno":1975},{"lineno":1976},{"lineno":1977},{"lineno":1980},{"lineno":1981},{"lineno":1982},{"lineno":1983},{"lineno":1986},{"lineno":1987},{"lineno":1990},{"lineno":1991},{"lineno":1994},{"lineno":1995},{"lineno":1996},{"lineno":1997},{"lineno":1998},{"lineno":1999},{"lineno":2002},{"lineno":2003},{"lineno":2006},{"lineno":2007},{"lineno":2010},{"lineno":2016},{"lineno":2018},{"lineno":2020},{"lineno":2021},{"lineno":2022},{"lineno":2023},{"lineno":2026},{"lineno":2030},{"lineno":2032},{"lineno":2036},{"lineno":2038},{"lineno":2039},{"lineno":2042},{"lineno":2049},{"lineno":2053},{"lineno":2058},{"lineno":2060},{"lineno":2061},{"lineno":2062},{"lineno":2068},{"lineno":2069},{"lineno":2073},{"lineno":2076},{"lineno":2081},{"lineno":2084},{"lineno":2089},{"lineno":2091},{"lineno":2093},{"lineno":2095},{"lineno":2099},{"lineno":2100},{"lineno":2103},{"lineno":2107},{"lineno":2109},{"lineno":2110},{"lineno":2112},{"lineno":2113},{"lineno":2114},{"lineno":2115},{"lineno":2116},{"lineno":2117},{"lineno":2118},{"lineno":2119},{"lineno":2120},{"lineno":2121},{"lineno":2127},{"lineno":2131},{"lineno":2133},{"lineno":2134},{"lineno":2136},{"lineno":2137},{"lineno":2138},{"lineno":2139},{"lineno":2140},{"lineno":2141},{"lineno":2142},{"lineno":2143},{"lineno":2149},{"lineno":2155},{"lineno":2157},{"lineno":2159},{"lineno":2160},{"lineno":2163},{"lineno":2164},{"lineno":2167},{"lineno":2169},{"lineno":2175},{"lineno":2181},{"lineno":2183},{"lineno":2184},{"lineno":2185},{"lineno":2187},{"lineno":2188},{"lineno":2191},{"lineno":2192},{"lineno":2195},{"lineno":2201},{"lineno":2204},{"lineno":2205},{"lineno":2207},{"lineno":2208},{"lineno":2210},{"lineno":2213},{"lineno":2214},{"lineno":2216},{"lineno":2217},{"lineno":2219},{"lineno":2220},{"lineno":2222},{"lineno":2225},{"lineno":2231},{"lineno":2233},{"lineno":2234},{"lineno":2236},{"lineno":2238},{"lineno":2242},{"lineno":2248},{"lineno":2250},{"lineno":2251},{"lineno":2253},{"lineno":2255},{"lineno":2259},{"lineno":2265},{"lineno":2267},{"lineno":2268},{"lineno":2270},{"lineno":2272},{"lineno":2276},{"lineno":2281},{"lineno":2283},{"lineno":2284},{"lineno":2286},{"lineno":2288},{"lineno":2289},{"lineno":2291},{"lineno":2293},{"lineno":2297},{"lineno":2298},{"lineno":2304},{"lineno":2306},{"lineno":2307},{"lineno":2309},{"lineno":2311},{"lineno":2315},{"lineno":2321},{"lineno":2323},{"lineno":2324},{"lineno":2325},{"lineno":2329},{"lineno":2333},{"lineno":2337},{"lineno":2339},{"lineno":2340},{"lineno":2341},{"lineno":2345},{"lineno":2349},{"lineno":2353},{"lineno":2355},{"lineno":2356},{"lineno":2357},{"lineno":2361},{"lineno":2365},{"lineno":2371},{"lineno":2373},{"lineno":2374},{"lineno":2375},{"lineno":2379},{"lineno":2383},{"lineno":2387},{"lineno":2389},{"lineno":2390},{"lineno":2391},{"lineno":2395},{"lineno":2399},{"lineno":2405},{"lineno":2407},{"lineno":2409},{"lineno":2410},{"lineno":2411},{"lineno":2412},{"lineno":2413},{"lineno":2414},{"lineno":2415},{"lineno":2417},{"lineno":2421},{"lineno":2425},{"lineno":2431},{"lineno":2433},{"lineno":2434},{"lineno":2435},{"lineno":2436},{"lineno":2437},{"lineno":2438},{"lineno":2440},{"lineno":2442},{"lineno":2443},{"lineno":2444},{"lineno":2445},{"lineno":2447},{"lineno":2450},{"lineno":2451},{"lineno":2452},{"lineno":2455},{"lineno":2456},{"lineno":2462},{"lineno":2463},{"lineno":2465},{"lineno":2467},{"lineno":2468},{"lineno":2469},{"lineno":2470},{"lineno":2472},{"lineno":2473},{"lineno":2475},{"lineno":2476},{"lineno":2478},{"lineno":2480},{"lineno":2484},{"lineno":2486},{"lineno":2488},{"lineno":2489},{"lineno":2490},{"lineno":2491},{"lineno":2492},{"lineno":2493},{"lineno":2494},{"lineno":2496},{"lineno":2504},{"lineno":2509},{"lineno":2511},{"lineno":2512},{"lineno":2515},{"lineno":2517},{"lineno":2518},{"lineno":2519},{"lineno":2520},{"lineno":2521},{"lineno":2522},{"lineno":2523},{"lineno":2525},{"lineno":2529},{"lineno":2531},{"lineno":2532},{"lineno":2533},{"lineno":2534},{"lineno":2535},{"lineno":2537},{"lineno":2539},{"lineno":2540},{"lineno":2541},{"lineno":2543},{"lineno":2549},{"lineno":2551},{"lineno":2552},{"lineno":2556},{"lineno":2557},{"lineno":2558},{"lineno":2559},{"lineno":2562},{"lineno":2564},{"lineno":2566},{"lineno":2570},{"lineno":2576},{"lineno":2578},{"lineno":2579},{"lineno":2584},{"lineno":2585},{"lineno":2588},{"lineno":2589},{"lineno":2593},{"lineno":2599},{"lineno":2602},{"lineno":2603},{"lineno":2606},{"lineno":2607},{"lineno":2610},{"lineno":2613},{"lineno":2617},{"lineno":2619},{"lineno":2621},{"lineno":2623},{"lineno":2625},{"lineno":2634},{"lineno":2636},{"lineno":2637},{"lineno":2640},{"lineno":2647},{"lineno":2649},{"lineno":2650},{"lineno":2651},{"lineno":2653},{"lineno":2655},{"lineno":2656},{"lineno":2660},{"lineno":2661},{"lineno":2662},{"lineno":2663},{"lineno":2664},{"lineno":2665},{"lineno":2668},{"lineno":2676},{"lineno":2678},{"lineno":2679},{"lineno":2680},{"lineno":2683},{"lineno":2686},{"lineno":2690},{"lineno":2692},{"lineno":2694},{"lineno":2696},{"lineno":2698},{"lineno":2710},{"lineno":2712},{"lineno":2714},{"lineno":2716},{"lineno":2718},{"lineno":2728},{"lineno":2730},{"lineno":2736},{"lineno":2737},{"lineno":2738},{"lineno":2741},{"lineno":2744},{"lineno":2748},{"lineno":2749},{"lineno":2755},{"lineno":2757},{"lineno":2759},{"lineno":2761},{"lineno":2762},{"lineno":2765},{"lineno":2769},{"lineno":2771},{"lineno":2772},{"lineno":2773},{"lineno":2776},{"lineno":2779},{"lineno":2782},{"lineno":2786},{"lineno":2788},{"lineno":2792},{"lineno":2794},{"lineno":2796},{"lineno":2800},{"lineno":2801},{"lineno":2802},{"lineno":2805},{"lineno":2809},{"lineno":2811},{"lineno":2812},{"lineno":2813},{"lineno":2816},{"lineno":2817},{"lineno":2819},{"lineno":2821},{"lineno":2827},{"lineno":2828},{"lineno":2830},{"lineno":2834},{"lineno":2835},{"lineno":2836},{"lineno":2839},{"lineno":2841},{"lineno":2845},{"lineno":2849},{"lineno":2851},{"lineno":2853},{"lineno":2855},{"lineno":2858},{"lineno":2860},{"lineno":2863},{"lineno":2865},{"lineno":2869},{"lineno":2871},{"lineno":2874},{"lineno":2876},{"lineno":2879},{"lineno":2882},{"lineno":2883},{"lineno":2884},{"lineno":2885},{"lineno":2888},{"lineno":2889},{"lineno":2893},{"lineno":2895},{"lineno":2902},{"lineno":2904},{"lineno":2906},{"lineno":2907},{"lineno":2908},{"lineno":2909},{"lineno":2910},{"lineno":2913},{"lineno":2914},{"lineno":2916},{"lineno":2918},{"lineno":2921},{"lineno":2922},{"lineno":2925},{"lineno":2927},{"lineno":2928},{"lineno":2930},{"lineno":2933},{"lineno":2935},{"lineno":2943},{"lineno":2945},{"lineno":2947},{"lineno":2951},{"lineno":2952},{"lineno":2953},{"lineno":2956},{"lineno":2962},{"lineno":2964},{"lineno":2972},{"lineno":2974},{"lineno":2976},{"lineno":2985},{"lineno":2987},{"lineno":2989},{"lineno":2991},{"lineno":2993},{"lineno":2995},{"lineno":2997},{"lineno":2998},{"lineno":2999},{"lineno":3001},{"lineno":3004},{"lineno":3015},{"lineno":3017},{"lineno":3019},{"lineno":3020},{"lineno":3022},{"lineno":3024},{"lineno":3026},{"lineno":3028},{"lineno":3030},{"lineno":3032},{"lineno":3034},{"lineno":3035},{"lineno":3038},{"lineno":3046},{"lineno":3048},{"lineno":3050},{"lineno":3052},{"lineno":3054},{"lineno":3056},{"lineno":3057},{"lineno":3059},{"lineno":3061},{"lineno":3063},{"lineno":3071},{"lineno":3073},{"lineno":3075},{"lineno":3081},{"lineno":3083},{"lineno":3085},{"lineno":3087},{"lineno":3089},{"lineno":3090},{"lineno":3092},{"lineno":3093},{"lineno":3094},{"lineno":3095},{"lineno":3097},{"lineno":3098},{"lineno":3099},{"lineno":3100},{"lineno":3101},{"lineno":3102},{"lineno":3103},{"lineno":3104},{"lineno":3109},{"lineno":3110},{"lineno":3111},{"lineno":3113},{"lineno":3114},{"lineno":3115},{"lineno":3116},{"lineno":3117},{"lineno":3118},{"lineno":3120},{"lineno":3121},{"lineno":3123},{"lineno":3124},{"lineno":3125},{"lineno":3126},{"lineno":3130},{"lineno":3131},{"lineno":3135},{"lineno":3137},{"lineno":3138},{"lineno":3140},{"lineno":3142},{"lineno":3143},{"lineno":3147},{"lineno":3149},{"lineno":3150},{"lineno":3152},{"lineno":3154},{"lineno":3156},{"lineno":3157},{"lineno":3166},{"lineno":3167},{"lineno":3175},{"lineno":3187},{"lineno":3189},{"lineno":3192},{"lineno":3193},{"lineno":3196},{"lineno":3199},{"lineno":3205},{"lineno":3207},{"lineno":3210},{"lineno":3216},{"lineno":3217},{"lineno":3218},{"lineno":3220},{"lineno":3221},{"lineno":3225},{"lineno":3227},{"lineno":3228},{"lineno":3231},{"lineno":3240},{"lineno":3242},{"lineno":3245},{"lineno":3246},{"lineno":3248},{"lineno":3249},{"lineno":3252},{"lineno":3258},{"lineno":3259},{"lineno":3260},{"lineno":3263},{"lineno":3269},{"lineno":3270},{"lineno":3271},{"lineno":3273},{"lineno":3274},{"lineno":3278},{"lineno":3280},{"lineno":3281},{"lineno":3284},{"lineno":3293},{"lineno":3295},{"lineno":3298},{"lineno":3302},{"lineno":3303},{"lineno":3304},{"lineno":3305},{"lineno":3306},{"lineno":3313},{"lineno":3314},{"lineno":3320},{"lineno":3321},{"lineno":3322},{"lineno":3323},{"lineno":3327},{"lineno":3329},{"lineno":3338},{"lineno":3341},{"lineno":3344},{"lineno":3346},{"lineno":3348},{"lineno":3350},{"lineno":3352},{"lineno":3354},{"lineno":3364},{"lineno":3368},{"lineno":3369},{"lineno":3370},{"lineno":3372},{"lineno":3373},{"lineno":3375},{"lineno":3377},{"lineno":3378},{"lineno":3381},{"lineno":3382},{"lineno":3385},{"lineno":3388},{"lineno":3396},{"lineno":3398},{"lineno":3400},{"lineno":3402},{"lineno":3404},{"lineno":3406},{"lineno":3408},{"lineno":3409},{"lineno":3410},{"lineno":3416},{"lineno":3418},{"lineno":3419},{"lineno":3420},{"lineno":3422},{"lineno":3423},{"lineno":3426},{"lineno":3427},{"lineno":3429},{"lineno":3431},{"lineno":3433},{"lineno":3436},{"lineno":3438},{"lineno":3440},{"lineno":3450},{"lineno":3452},{"lineno":3454},{"lineno":3455},{"lineno":3458},{"lineno":3460},{"lineno":3462},{"lineno":3471},{"lineno":3473},{"lineno":3475},{"lineno":3476},{"lineno":3477},{"lineno":3479},{"lineno":3480},{"lineno":3483},{"lineno":3485},{"lineno":3489},{"lineno":3494},{"lineno":3496},{"lineno":3498},{"lineno":3500},{"lineno":3501},{"lineno":3504},{"lineno":3505},{"lineno":3506},{"lineno":3509},{"lineno":3510},{"lineno":3513},{"lineno":3524},{"lineno":3526},{"lineno":3528},{"lineno":3536},{"lineno":3540},{"lineno":3541},{"lineno":3544},{"lineno":3547},{"lineno":3549},{"lineno":3551},{"lineno":3557},{"lineno":3560},{"lineno":3562},{"lineno":3564},{"lineno":3566},{"lineno":3568},{"lineno":3570},{"lineno":3572},{"lineno":3574},{"lineno":3576},{"lineno":3578},{"lineno":3580},{"lineno":3582},{"lineno":3584},{"lineno":3586},{"lineno":3588},{"lineno":3594},{"lineno":3597},{"lineno":3598},{"lineno":3600},{"lineno":3601},{"lineno":3604},{"lineno":3605},{"lineno":3606},{"lineno":3608},{"lineno":3615},{"lineno":3617},{"lineno":3626},{"lineno":3627},{"lineno":3629},{"lineno":3634},{"lineno":3637},{"lineno":3639},{"lineno":3640},{"lineno":3641},{"lineno":3645},{"lineno":3646},{"lineno":3647},{"lineno":3651},{"lineno":3652},{"lineno":3653},{"lineno":3655},{"lineno":3658},{"lineno":3659},{"lineno":3664},{"lineno":3665},{"lineno":3666},{"lineno":3667},{"lineno":3668},{"lineno":3670},{"lineno":3671},{"lineno":3672},{"lineno":3673},{"lineno":3674},{"lineno":3676},{"lineno":3677},{"lineno":3680},{"lineno":3681},{"lineno":3684},{"lineno":3687},{"lineno":3689},{"lineno":3690},{"lineno":3691},{"lineno":3692},{"lineno":3693},{"lineno":3695},{"lineno":3702},{"lineno":3704},{"lineno":3706},{"lineno":3707},{"lineno":3708},{"lineno":3709},{"lineno":3712},{"lineno":3714},{"lineno":3716},{"lineno":3717},{"lineno":3720},{"lineno":3721},{"lineno":3722},{"lineno":3723},{"lineno":3724},{"lineno":3725},{"lineno":3729},{"lineno":3731},{"lineno":3732},{"lineno":3733},{"lineno":3734},{"lineno":3735},{"lineno":3737},{"lineno":3738},{"lineno":3740},{"lineno":3741},{"lineno":3744},{"lineno":3745},{"lineno":3746},{"lineno":3747},{"lineno":3748},{"lineno":3749},{"lineno":3750},{"lineno":3751},{"lineno":3752},{"lineno":3755},{"lineno":3756},{"lineno":3757},{"lineno":3760},{"lineno":3764},{"lineno":3766},{"lineno":3767},{"lineno":3768},{"lineno":3769},{"lineno":3770},{"lineno":3771},{"lineno":3773},{"lineno":3774},{"lineno":3776},{"lineno":3777},{"lineno":3779},{"lineno":3792},{"lineno":3794},{"lineno":3796},{"lineno":3798},{"lineno":3799},{"lineno":3800},{"lineno":3803},{"lineno":3804},{"lineno":3805},{"lineno":3807},{"lineno":3808},{"lineno":3811},{"lineno":3812},{"lineno":3813},{"lineno":3814},{"lineno":3815},{"lineno":3816},{"lineno":3821},{"lineno":3823},{"lineno":3824},{"lineno":3825},{"lineno":3826},{"lineno":3827},{"lineno":3829},{"lineno":3830},{"lineno":3832},{"lineno":3833},{"lineno":3836},{"lineno":3837},{"lineno":3838},{"lineno":3839},{"lineno":3840},{"lineno":3841},{"lineno":3842},{"lineno":3843},{"lineno":3844},{"lineno":3847},{"lineno":3848},{"lineno":3849},{"lineno":3852},{"lineno":3856},{"lineno":3858},{"lineno":3859},{"lineno":3860},{"lineno":3861},{"lineno":3862},{"lineno":3863},{"lineno":3865},{"lineno":3866},{"lineno":3868},{"lineno":3869},{"lineno":3872},{"lineno":3885},{"lineno":3887},{"lineno":3890},{"lineno":3893},{"lineno":3894},{"lineno":3895},{"lineno":3896},{"lineno":3900},{"lineno":3901},{"lineno":3902},{"lineno":3903},{"lineno":3904},{"lineno":3906},{"lineno":3916},{"lineno":3918},{"lineno":3919},{"lineno":3920},{"lineno":3922},{"lineno":3923},{"lineno":3928},{"lineno":3929},{"lineno":3931},{"lineno":3932},{"lineno":3933},{"lineno":3934},{"lineno":3935},{"lineno":3938},{"lineno":3941},{"lineno":3942},{"lineno":3943},{"lineno":3944},{"lineno":3945},{"lineno":3946},{"lineno":3947},{"lineno":3950},{"lineno":3954},{"lineno":3957},{"lineno":3964},{"lineno":3965},{"lineno":3966},{"lineno":3968},{"lineno":3973},{"lineno":3975},{"lineno":3977},{"lineno":3978},{"lineno":3981},{"lineno":3982},{"lineno":3983},{"lineno":3987},{"lineno":3989},{"lineno":3996},{"lineno":3998},{"lineno":4000},{"lineno":4001},{"lineno":4004},{"lineno":4005},{"lineno":4006},{"lineno":4007},{"lineno":4008},{"lineno":4009},{"lineno":4012},{"lineno":4013},{"lineno":4022},{"lineno":4024},{"lineno":4026},{"lineno":4027},{"lineno":4029},{"lineno":4030},{"lineno":4031},{"lineno":4032},{"lineno":4033},{"lineno":4034},{"lineno":4037},{"lineno":4038},{"lineno":4049},{"lineno":4051},{"lineno":4055},{"lineno":4057},{"lineno":4059},{"lineno":4063},{"lineno":4064},{"lineno":4069},{"lineno":4071},{"lineno":4074},{"lineno":4076},{"lineno":4080},{"lineno":4081},{"lineno":4082},{"lineno":4083},{"lineno":4084},{"lineno":4088},{"lineno":4092},{"lineno":4094},{"lineno":4095},{"lineno":4096},{"lineno":4100},{"lineno":4101},{"lineno":4102},{"lineno":4106},{"lineno":4107},{"lineno":4108},{"lineno":4110},{"lineno":4113},{"lineno":4114},{"lineno":4119},{"lineno":4120},{"lineno":4121},{"lineno":4124},{"lineno":4126},{"lineno":4130},{"lineno":4134},{"lineno":4137},{"lineno":4138},{"lineno":4141},{"lineno":4142},{"lineno":4145},{"lineno":4148},{"lineno":4152},{"lineno":4154},{"lineno":4156},{"lineno":4158},{"lineno":4160},{"lineno":4167},{"lineno":4168},{"lineno":4169},{"lineno":4170},{"lineno":4171},{"lineno":4173},{"lineno":4175},{"lineno":4182},{"lineno":4188},{"lineno":4189},{"lineno":4190},{"lineno":4194},{"lineno":4203},{"lineno":4205},{"lineno":4206},{"lineno":4207},{"lineno":4209},{"lineno":4210},{"lineno":4213},{"lineno":4214},{"lineno":4215},{"lineno":4217},{"lineno":4219},{"lineno":4220},{"lineno":4221},{"lineno":4222},{"lineno":4224},{"lineno":4225},{"lineno":4226},{"lineno":4227},{"lineno":4228},{"lineno":4229},{"lineno":4230},{"lineno":4232},{"lineno":4234},{"lineno":4236},{"lineno":4239},{"lineno":4240},{"lineno":4241},{"lineno":4242},{"lineno":4244},{"lineno":4246},{"lineno":4247},{"lineno":4248},{"lineno":4249},{"lineno":4250},{"lineno":4253},{"lineno":4254},{"lineno":4255},{"lineno":4257},{"lineno":4258},{"lineno":4259},{"lineno":4260},{"lineno":4261},{"lineno":4262},{"lineno":4263},{"lineno":4264},{"lineno":4266},{"lineno":4268},{"lineno":4269},{"lineno":4273},{"lineno":4274},{"lineno":4275},{"lineno":4276},{"lineno":4279},{"lineno":4282},{"lineno":4283},{"lineno":4284},{"lineno":4285},{"lineno":4286},{"lineno":4288},{"lineno":4290},{"lineno":4291},{"lineno":4293},{"lineno":4294},{"lineno":4295},{"lineno":4296},{"lineno":4297},{"lineno":4300},{"lineno":4303},{"lineno":4304},{"lineno":4309},{"lineno":4310},{"lineno":4311},{"lineno":4312},{"lineno":4313},{"lineno":4314},{"lineno":4316},{"lineno":4317},{"lineno":4325},{"lineno":4327},{"lineno":4328},{"lineno":4329},{"lineno":4334},{"lineno":4337},{"lineno":4339},{"lineno":4342},{"lineno":4346},{"lineno":4348},{"lineno":4349},{"lineno":4350},{"lineno":4353},{"lineno":4357},{"lineno":4358},{"lineno":4360},{"lineno":4363},{"lineno":4364},{"lineno":4365},{"lineno":4366},{"lineno":4374},{"lineno":4378},{"lineno":4380},{"lineno":4382},{"lineno":4383},{"lineno":4386},{"lineno":4390},{"lineno":4391},{"lineno":4393},{"lineno":4397},{"lineno":4398},{"lineno":4399},{"lineno":4400},{"lineno":4401},{"lineno":4406},{"lineno":4413},{"lineno":4417},{"lineno":4419},{"lineno":4420},{"lineno":4421},{"lineno":4426},{"lineno":4429},{"lineno":4431},{"lineno":4434},{"lineno":4438},{"lineno":4445},{"lineno":4448},{"lineno":4454},{"lineno":4457},{"lineno":4458},{"lineno":4462},{"lineno":4463},{"lineno":4465},{"lineno":4466},{"lineno":4469},{"lineno":4470},{"lineno":4472},{"lineno":4473},{"lineno":4480},{"lineno":4481},{"lineno":4483},{"lineno":4484},{"lineno":4485},{"lineno":4488},{"lineno":4492},{"lineno":4493},{"lineno":4496},{"lineno":4497},{"lineno":4501},{"lineno":4503},{"lineno":4505},{"lineno":4508},{"lineno":4509},{"lineno":4512},{"lineno":4513},{"lineno":4514},{"lineno":4516},{"lineno":4517},{"lineno":4521},{"lineno":4522},{"lineno":4523},{"lineno":4525},{"lineno":4526},{"lineno":4529},{"lineno":4538},{"lineno":4541},{"lineno":4542},{"lineno":4546},{"lineno":4547},{"lineno":4550},{"lineno":4552},{"lineno":4554},{"lineno":4555},{"lineno":4556},{"lineno":4557},{"lineno":4558},{"lineno":4559},{"lineno":4560},{"lineno":4561},{"lineno":4562},{"lineno":4563},{"lineno":4564},{"lineno":4565},{"lineno":4566},{"lineno":4567},{"lineno":4568},{"lineno":4569},{"lineno":4570},{"lineno":4571},{"lineno":4572},{"lineno":4573},{"lineno":4574},{"lineno":4575},{"lineno":4576},{"lineno":4577},{"lineno":4578},{"lineno":4579},{"lineno":4580},{"lineno":4581},{"lineno":4582},{"lineno":4583},{"lineno":4584},{"lineno":4585},{"lineno":4586},{"lineno":4587},{"lineno":4588},{"lineno":4589},{"lineno":4590},{"lineno":4591},{"lineno":4592},{"lineno":4593},{"lineno":4594},{"lineno":4595},{"lineno":4596},{"lineno":4597},{"lineno":4598},{"lineno":4599},{"lineno":4600},{"lineno":4601},{"lineno":4602},{"lineno":4603},{"lineno":4604},{"lineno":4605},{"lineno":4607},{"lineno":4608},{"lineno":4609},{"lineno":4610},{"lineno":4611},{"lineno":4612},{"lineno":4613},{"lineno":4614},{"lineno":4615},{"lineno":4616},{"lineno":4617},{"lineno":4618},{"lineno":4619},{"lineno":4620},{"lineno":4621},{"lineno":4622},{"lineno":4623},{"lineno":4624},{"lineno":4625},{"lineno":4626},{"lineno":4627},{"lineno":4628},{"lineno":4629},{"lineno":4630},{"lineno":4631},{"lineno":4632},{"lineno":4633},{"lineno":4634},{"lineno":4635},{"lineno":4636},{"lineno":4637},{"lineno":4638},{"lineno":4639},{"lineno":4640},{"lineno":4641},{"lineno":4642},{"lineno":4643},{"lineno":4644},{"lineno":4645},{"lineno":4646},{"lineno":4647},{"lineno":4648},{"lineno":4649},{"lineno":4650},{"lineno":4651},{"lineno":4652},{"lineno":4653},{"lineno":4654},{"lineno":4655},{"lineno":4656},{"lineno":4657},{"lineno":4658},{"lineno":4661},{"lineno":4662},{"lineno":4663},{"lineno":4665},{"lineno":4666},{"lineno":4671},{"lineno":4672},{"lineno":4676},{"lineno":4679},{"lineno":4680},{"lineno":4681},{"lineno":4682},{"lineno":4683},{"lineno":4684},{"lineno":4685},{"lineno":4686},{"lineno":4687},{"lineno":4688},{"lineno":4689},{"lineno":4690},{"lineno":4691},{"lineno":4692},{"lineno":4693},{"lineno":4694},{"lineno":4695},{"lineno":4696},{"lineno":4697},{"lineno":4698},{"lineno":4699},{"lineno":4700},{"lineno":4701},{"lineno":4702},{"lineno":4703},{"lineno":4704},{"lineno":4705},{"lineno":4706},{"lineno":4707},{"lineno":4708},{"lineno":4709},{"lineno":4710},{"lineno":4711},{"lineno":4712},{"lineno":4713},{"lineno":4714},{"lineno":4715},{"lineno":4716},{"lineno":4717},{"lineno":4718},{"lineno":4719},{"lineno":4720},{"lineno":4721},{"lineno":4722},{"lineno":4723},{"lineno":4724},{"lineno":4725},{"lineno":4726},{"lineno":4727},{"lineno":4728},{"lineno":4729},{"lineno":4730},{"lineno":4731},{"lineno":4734},{"lineno":4735},{"lineno":4736},{"lineno":4741},{"lineno":4744},{"lineno":4745},{"lineno":4747},{"lineno":4751},{"lineno":4753},{"lineno":4754},{"lineno":4755},{"lineno":4758},{"lineno":4759},{"lineno":4760},{"lineno":4761},{"lineno":4762},{"lineno":4763},{"lineno":4764},{"lineno":4774},{"lineno":4775},{"lineno":4776},{"lineno":4777},{"lineno":4778},{"lineno":4779},{"lineno":4780},{"lineno":4782},{"lineno":4783},{"lineno":4785},{"lineno":4786},{"lineno":4790},{"lineno":4791},{"lineno":4795},{"lineno":4796},{"lineno":4800},{"lineno":4801},{"lineno":4806},{"lineno":4808},{"lineno":4809},{"lineno":4810},{"lineno":4811},{"lineno":4813},{"lineno":4814},{"lineno":4815},{"lineno":4817},{"lineno":4818},{"lineno":4821},{"lineno":4823},{"lineno":4824},{"lineno":4827}],"missing":2079,"seen":2778,"total":4857,"coverage":{"50":{"partial":false,"source":"        define(['exports'], factory);","missing":[{"startCol":8,"endCol":36}]},"54":{"partial":false,"source":"        factory((window.esprima = {}));","missing":[{"startCol":8,"endCol":38}]},"223":{"partial":false,"source":"            throw new Error('ASSERT: ' + message);","missing":[{"startCol":12,"endCol":50},{"startCol":28,"endCol":48}]},"228":{"partial":false,"source":"        return source.slice(from, to);","missing":[{"startCol":8,"endCol":38},{"startCol":15,"endCol":37}]},"232":{"partial":false,"source":"        sliceSource = function sliceArraySource(from, to) {","missing":[{}]},"233":{"partial":false,"source":"            return source.slice(from, to).join('');","missing":[{"startCol":12,"endCol":51},{"startCol":19,"endCol":50},{},{"startCol":31,"endCol":41}]},"234":{"partial":false,"source":"        };","missing":[{}]},"238":{"partial":false,"source":"        return '0123456789'.indexOf(ch) >= 0;","missing":[{"startCol":8,"endCol":45},{"startCol":15,"endCol":39}]},"242":{"partial":false,"source":"        return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;","missing":[{"startCol":8,"endCol":57},{"startCol":15,"endCol":51}]},"246":{"partial":false,"source":"        return '01234567'.indexOf(ch) >= 0;","missing":[{"startCol":8,"endCol":43},{"startCol":15,"endCol":37}]},"253":{"partial":false,"source":"        return (ch === ' ') || (ch === '\\u0009') || (ch === '\\u000B') ||","missing":[{"startCol":15,"endCol":27},{},{"startCol":31,"endCol":48},{"startCol":52,"endCol":69}]},"254":{"partial":false,"source":"            (ch === '\\u000C') || (ch === '\\u00A0') ||","missing":[{},{"startCol":33,"endCol":50},{"startCol":12,"endCol":29}]},"255":{"partial":false,"source":"            (ch.charCodeAt(0) >= 0x1680 &&","missing":[{},{"startCol":13,"endCol":39}]},"256":{"partial":false,"source":"             '\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\uFEFF'.indexOf(ch) >= 0);","missing":[{},{"startCol":13,"endCol":129}]},"262":{"partial":false,"source":"        return (ch === '\\n' || ch === '\\r' || ch === '\\u2028' || ch === '\\u2029');","missing":[{"startCol":8,"endCol":82},{"startCol":15,"endCol":81},{"startCol":16,"endCol":27},{"startCol":31,"endCol":42},{"startCol":46,"endCol":61},{"startCol":65,"endCol":80}]},"268":{"partial":false,"source":"        return (ch === '$') || (ch === '_') || (ch === '\\\\') ||","missing":[{"startCol":15,"endCol":27},{"startCol":31,"endCol":43},{},{"startCol":47,"endCol":60}]},"269":{"partial":false,"source":"            (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') ||","missing":[{"startCol":12,"endCol":36},{"startCol":13,"endCol":22},{"startCol":26,"endCol":35},{"startCol":40,"endCol":64},{"startCol":41,"endCol":50},{},{"startCol":54,"endCol":63}]},"270":{"partial":false,"source":"            ((ch.charCodeAt(0) >= 0x80) && Regex.NonAsciiIdentifierStart.test(ch));","missing":[{"startCol":12,"endCol":82},{},{"startCol":13,"endCol":39},{"startCol":14,"endCol":30},{"startCol":43,"endCol":81}]},"274":{"partial":false,"source":"        return (ch === '$') || (ch === '_') || (ch === '\\\\') ||","missing":[{"startCol":15,"endCol":27},{},{"startCol":31,"endCol":43},{"startCol":47,"endCol":60}]},"275":{"partial":false,"source":"            (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') ||","missing":[{},{"startCol":40,"endCol":64},{"startCol":41,"endCol":50},{"startCol":26,"endCol":35},{"startCol":54,"endCol":63},{"startCol":13,"endCol":22},{"startCol":12,"endCol":36}]},"276":{"partial":false,"source":"            ((ch >= '0') && (ch <= '9')) ||","missing":[{"startCol":12,"endCol":40},{},{"startCol":13,"endCol":24},{"startCol":28,"endCol":39}]},"277":{"partial":false,"source":"            ((ch.charCodeAt(0) >= 0x80) && Regex.NonAsciiIdentifierPart.test(ch));","missing":[{"startCol":12,"endCol":81},{"startCol":13,"endCol":39},{},{"startCol":14,"endCol":30},{"startCol":43,"endCol":80}]},"292":{"partial":false,"source":"            return true;","missing":[{"startCol":12,"endCol":24}]},"295":{"partial":false,"source":"        return false;","missing":[{"startCol":8,"endCol":21}]},"311":{"partial":false,"source":"            return true;","missing":[{"startCol":12,"endCol":24}]},"314":{"partial":false,"source":"        return false;","missing":[{"startCol":8,"endCol":21}]},"318":{"partial":false,"source":"        return id === 'eval' || id === 'arguments';","missing":[{"startCol":8,"endCol":51},{"startCol":15,"endCol":28},{"startCol":32,"endCol":50}]},"324":{"partial":false,"source":"        var keyword = false;","missing":[{"startCol":8,"endCol":28}]},"327":{"partial":false,"source":"            keyword = (id === 'if') || (id === 'in') || (id === 'do');","missing":[{"startCol":12,"endCol":70},{"startCol":22,"endCol":35},{"startCol":39,"endCol":52},{"startCol":56,"endCol":69}]},"330":{"partial":false,"source":"            keyword = (id === 'var') || (id === 'for') || (id === 'new') || (id === 'try');","missing":[{"startCol":12,"endCol":91},{"startCol":22,"endCol":36},{"startCol":40,"endCol":54},{"startCol":58,"endCol":72},{"startCol":76,"endCol":90}]},"333":{"partial":false,"source":"            keyword = (id === 'this') || (id === 'else') || (id === 'case') || (id === 'void') || (id === 'with');","missing":[{"startCol":12,"endCol":114},{"startCol":22,"endCol":37},{"startCol":41,"endCol":56},{"startCol":60,"endCol":75},{"startCol":79,"endCol":94},{"startCol":98,"endCol":113}]},"336":{"partial":false,"source":"            keyword = (id === 'while') || (id === 'break') || (id === 'catch') || (id === 'throw');","missing":[{"startCol":12,"endCol":99},{"startCol":22,"endCol":38},{"startCol":42,"endCol":58},{"startCol":62,"endCol":78},{"startCol":82,"endCol":98}]},"339":{"partial":false,"source":"            keyword = (id === 'return') || (id === 'typeof') || (id === 'delete') || (id === 'switch');","missing":[{"startCol":12,"endCol":103},{"startCol":22,"endCol":39},{"startCol":43,"endCol":60},{"startCol":64,"endCol":81},{"startCol":85,"endCol":102}]},"342":{"partial":false,"source":"            keyword = (id === 'default') || (id === 'finally');","missing":[{"startCol":12,"endCol":63},{"startCol":22,"endCol":40},{"startCol":44,"endCol":62}]},"345":{"partial":false,"source":"            keyword = (id === 'function') || (id === 'continue') || (id === 'debugger');","missing":[{"startCol":12,"endCol":88},{"startCol":22,"endCol":41},{"startCol":45,"endCol":64},{"startCol":68,"endCol":87}]},"348":{"partial":false,"source":"            keyword = (id === 'instanceof');","missing":[{"startCol":12,"endCol":44},{"startCol":22,"endCol":43}]},"353":{"partial":false,"source":"            return true;","missing":[{"startCol":12,"endCol":24}]},"360":{"partial":false,"source":"            return true;","missing":[{"startCol":12,"endCol":24}]},"365":{"partial":false,"source":"            return true;","missing":[{"startCol":12,"endCol":24}]},"368":{"partial":false,"source":"        if (strict && isStrictModeReservedWord(id)) {","missing":[{"startCol":12,"endCol":50},{"startCol":22,"endCol":50}]},"369":{"partial":false,"source":"            return true;","missing":[{"startCol":12,"endCol":24}]},"372":{"partial":false,"source":"        return isFutureReservedWord(id);","missing":[{"startCol":8,"endCol":40},{"startCol":15,"endCol":39}]},"378":{"partial":false,"source":"        return source[index++];","missing":[{"startCol":8,"endCol":31},{"startCol":22,"endCol":29}]},"384":{"partial":false,"source":"        var ch, blockComment, lineComment;","missing":[{"startCol":8,"endCol":42}]},"386":{"partial":false,"source":"        blockComment = false;","missing":[{"startCol":8,"endCol":29}]},"387":{"partial":false,"source":"        lineComment = false;","missing":[{"startCol":8,"endCol":28}]},"389":{"partial":false,"source":"        while (index < length) {","missing":[{"startCol":15,"endCol":29}]},"390":{"partial":false,"source":"            ch = source[index];","missing":[{"startCol":12,"endCol":31}]},"393":{"partial":false,"source":"                ch = nextChar();","missing":[{"startCol":16,"endCol":32},{"startCol":21,"endCol":31}]},"394":{"partial":false,"source":"                if (isLineTerminator(ch)) {","missing":[{"startCol":20,"endCol":40}]},"395":{"partial":false,"source":"                    lineComment = false;","missing":[{"startCol":20,"endCol":40}]},"396":{"partial":false,"source":"                    if (ch === '\\r' && source[index] === '\\n') {","missing":[{"startCol":24,"endCol":35},{"startCol":39,"endCol":61}]},"397":{"partial":false,"source":"                        ++index;","missing":[{"startCol":24,"endCol":31}]},"399":{"partial":false,"source":"                    ++lineNumber;","missing":[{"startCol":20,"endCol":32}]},"400":{"partial":false,"source":"                    lineStart = index;","missing":[{"startCol":20,"endCol":38}]},"403":{"partial":false,"source":"                if (isLineTerminator(ch)) {","missing":[{"startCol":20,"endCol":40}]},"404":{"partial":false,"source":"                    if (ch === '\\r' && source[index + 1] === '\\n') {","missing":[{"startCol":24,"endCol":35},{"startCol":39,"endCol":65},{"startCol":46,"endCol":55}]},"405":{"partial":false,"source":"                        ++index;","missing":[{"startCol":24,"endCol":31}]},"407":{"partial":false,"source":"                    ++lineNumber;","missing":[{"startCol":20,"endCol":32}]},"408":{"partial":false,"source":"                    ++index;","missing":[{"startCol":20,"endCol":27}]},"409":{"partial":false,"source":"                    lineStart = index;","missing":[{"startCol":20,"endCol":38}]},"410":{"partial":false,"source":"                    if (index >= length) {","missing":[{"startCol":24,"endCol":39}]},"411":{"partial":false,"source":"                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');","missing":[{"startCol":24,"endCol":75}]},"414":{"partial":false,"source":"                    ch = nextChar();","missing":[{"startCol":20,"endCol":36},{"startCol":25,"endCol":35}]},"415":{"partial":false,"source":"                    if (index >= length) {","missing":[{"startCol":24,"endCol":39}]},"416":{"partial":false,"source":"                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');","missing":[{"startCol":24,"endCol":75}]},"418":{"partial":false,"source":"                    if (ch === '*') {","missing":[{"startCol":24,"endCol":34}]},"419":{"partial":false,"source":"                        ch = source[index];","missing":[{"startCol":24,"endCol":43}]},"420":{"partial":false,"source":"                        if (ch === '/') {","missing":[{"startCol":28,"endCol":38}]},"421":{"partial":false,"source":"                            ++index;","missing":[{"startCol":28,"endCol":35}]},"422":{"partial":false,"source":"                            blockComment = false;","missing":[{"startCol":28,"endCol":49}]},"426":{"partial":false,"source":"            } else if (ch === '/') {","missing":[{"startCol":23,"endCol":33}]},"427":{"partial":false,"source":"                ch = source[index + 1];","missing":[{"startCol":16,"endCol":39},{"startCol":28,"endCol":37}]},"428":{"partial":false,"source":"                if (ch === '/') {","missing":[{"startCol":20,"endCol":30}]},"429":{"partial":false,"source":"                    index += 2;","missing":[{"startCol":20,"endCol":31}]},"430":{"partial":false,"source":"                    lineComment = true;","missing":[{"startCol":20,"endCol":39}]},"431":{"partial":false,"source":"                } else if (ch === '*') {","missing":[{"startCol":27,"endCol":37}]},"432":{"partial":false,"source":"                    index += 2;","missing":[{"startCol":20,"endCol":31}]},"433":{"partial":false,"source":"                    blockComment = true;","missing":[{"startCol":20,"endCol":40}]},"434":{"partial":false,"source":"                    if (index >= length) {","missing":[{"startCol":24,"endCol":39}]},"435":{"partial":false,"source":"                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');","missing":[{"startCol":24,"endCol":75}]},"440":{"partial":false,"source":"            } else if (isWhiteSpace(ch)) {","missing":[{"startCol":23,"endCol":39}]},"441":{"partial":false,"source":"                ++index;","missing":[{"startCol":16,"endCol":23}]},"442":{"partial":false,"source":"            } else if (isLineTerminator(ch)) {","missing":[{"startCol":23,"endCol":43}]},"443":{"partial":false,"source":"                ++index;","missing":[{"startCol":16,"endCol":23}]},"444":{"partial":false,"source":"                if (ch ===  '\\r' && source[index] === '\\n') {","missing":[{"startCol":20,"endCol":32},{"startCol":36,"endCol":58}]},"445":{"partial":false,"source":"                    ++index;","missing":[{"startCol":20,"endCol":27}]},"447":{"partial":false,"source":"                ++lineNumber;","missing":[{"startCol":16,"endCol":28}]},"448":{"partial":false,"source":"                lineStart = index;","missing":[{"startCol":16,"endCol":34}]},"456":{"partial":false,"source":"        var i, len, ch, code = 0;","missing":[{"startCol":8,"endCol":33}]},"458":{"partial":false,"source":"        len = (prefix === 'u') ? 4 : 2;","missing":[{"startCol":8,"endCol":39},{"startCol":14,"endCol":30},{"startCol":33,"endCol":34},{"startCol":37,"endCol":38}]},"459":{"partial":false,"source":"        for (i = 0; i < len; ++i) {","missing":[{"startCol":20,"endCol":27},{"startCol":29,"endCol":32}]},"460":{"partial":false,"source":"            if (index < length && isHexDigit(source[index])) {","missing":[{"startCol":16,"endCol":30},{"startCol":34,"endCol":59}]},"461":{"partial":false,"source":"                ch = nextChar();","missing":[{"startCol":16,"endCol":32},{"startCol":21,"endCol":31}]},"462":{"partial":false,"source":"                code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());","missing":[{"startCol":16,"endCol":80},{"startCol":23,"endCol":32},{"startCol":35,"endCol":79},{"startCol":62,"endCol":78}]},"464":{"partial":false,"source":"                return '';","missing":[{"startCol":16,"endCol":26}]},"467":{"partial":false,"source":"        return String.fromCharCode(code);","missing":[{"startCol":8,"endCol":41},{"startCol":15,"endCol":40}]},"471":{"partial":false,"source":"        var ch, code, cu1, cu2;","missing":[{"startCol":8,"endCol":31}]},"473":{"partial":false,"source":"        ch = source[index];","missing":[{"startCol":8,"endCol":27}]},"474":{"partial":false,"source":"        code = 0;","missing":[{"startCol":8,"endCol":17}]},"477":{"partial":false,"source":"        if (ch === '}') {","missing":[{"startCol":12,"endCol":22}]},"478":{"partial":false,"source":"            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');","missing":[{"startCol":12,"endCol":63}]},"481":{"partial":false,"source":"        while (index < length) {","missing":[{"startCol":15,"endCol":29}]},"482":{"partial":false,"source":"            ch = nextChar();","missing":[{"startCol":12,"endCol":28},{"startCol":17,"endCol":27}]},"483":{"partial":false,"source":"            if (!isHexDigit(ch)) {","missing":[{"startCol":17,"endCol":31}]},"486":{"partial":false,"source":"            code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());","missing":[{"startCol":12,"endCol":76},{"startCol":19,"endCol":28},{"startCol":31,"endCol":75},{"startCol":58,"endCol":74}]},"489":{"partial":false,"source":"        if (code > 0x10FFFF || ch !== '}') {","missing":[{"startCol":12,"endCol":27},{"startCol":31,"endCol":41}]},"490":{"partial":false,"source":"            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');","missing":[{"startCol":12,"endCol":63}]},"494":{"partial":false,"source":"        if (code <= 0xFFFF) {","missing":[{"startCol":12,"endCol":26}]},"495":{"partial":false,"source":"            return String.fromCharCode(code);","missing":[{"startCol":12,"endCol":45},{"startCol":19,"endCol":44}]},"497":{"partial":false,"source":"        cu1 = ((code - 0x10000) >> 10) + 0xD800;","missing":[{"startCol":8,"endCol":48},{"startCol":14,"endCol":38},{"startCol":15,"endCol":31}]},"498":{"partial":false,"source":"        cu2 = ((code - 0x10000) & 1023) + 0xDC00;","missing":[{"startCol":8,"endCol":49},{"startCol":14,"endCol":39},{"startCol":15,"endCol":31}]},"499":{"partial":false,"source":"        return String.fromCharCode(cu1, cu2);","missing":[{"startCol":8,"endCol":45},{"startCol":15,"endCol":44}]},"503":{"partial":false,"source":"        var ch, start, id, restore;","missing":[{"startCol":8,"endCol":35}]},"505":{"partial":false,"source":"        ch = source[index];","missing":[{"startCol":8,"endCol":27}]},"506":{"partial":false,"source":"        if (!isIdentifierStart(ch)) {","missing":[{"startCol":13,"endCol":34}]},"507":{"partial":false,"source":"            return;","missing":[{"startCol":12,"endCol":19}]},"510":{"partial":false,"source":"        start = index;","missing":[{"startCol":8,"endCol":22}]},"511":{"partial":false,"source":"        if (ch === '\\\\') {","missing":[{"startCol":12,"endCol":23}]},"512":{"partial":false,"source":"            ++index;","missing":[{"startCol":12,"endCol":19}]},"513":{"partial":false,"source":"            if (source[index] !== 'u') {","missing":[{"startCol":16,"endCol":37}]},"514":{"partial":false,"source":"                return;","missing":[{"startCol":16,"endCol":23}]},"516":{"partial":false,"source":"            ++index;","missing":[{"startCol":12,"endCol":19}]},"517":{"partial":false,"source":"            restore = index;","missing":[{"startCol":12,"endCol":28}]},"518":{"partial":false,"source":"            ch = scanHexEscape('u');","missing":[{"startCol":12,"endCol":36},{"startCol":17,"endCol":35}]},"520":{"partial":false,"source":"                if (ch === '\\\\' || !isIdentifierStart(ch)) {","missing":[{"startCol":20,"endCol":31},{"startCol":36,"endCol":57}]},"521":{"partial":false,"source":"                    return;","missing":[{"startCol":20,"endCol":27}]},"523":{"partial":false,"source":"                id = ch;","missing":[{"startCol":16,"endCol":24}]},"525":{"partial":false,"source":"                index = restore;","missing":[{"startCol":16,"endCol":32}]},"526":{"partial":false,"source":"                id = 'u';","missing":[{"startCol":16,"endCol":25}]},"529":{"partial":false,"source":"            id = nextChar();","missing":[{"startCol":12,"endCol":28},{"startCol":17,"endCol":27}]},"532":{"partial":false,"source":"        while (index < length) {","missing":[{"startCol":15,"endCol":29}]},"533":{"partial":false,"source":"            ch = source[index];","missing":[{"startCol":12,"endCol":31}]},"534":{"partial":false,"source":"            if (!isIdentifierPart(ch)) {","missing":[{"startCol":17,"endCol":37}]},"537":{"partial":false,"source":"            if (ch === '\\\\') {","missing":[{"startCol":16,"endCol":27}]},"538":{"partial":false,"source":"                ++index;","missing":[{"startCol":16,"endCol":23}]},"539":{"partial":false,"source":"                if (source[index] !== 'u') {","missing":[{"startCol":20,"endCol":41}]},"540":{"partial":false,"source":"                    return;","missing":[{"startCol":20,"endCol":27}]},"542":{"partial":false,"source":"                ++index;","missing":[{"startCol":16,"endCol":23}]},"543":{"partial":false,"source":"                restore = index;","missing":[{"startCol":16,"endCol":32}]},"544":{"partial":false,"source":"                ch = scanHexEscape('u');","missing":[{"startCol":16,"endCol":40},{"startCol":21,"endCol":39}]},"546":{"partial":false,"source":"                    if (ch === '\\\\' || !isIdentifierPart(ch)) {","missing":[{"startCol":24,"endCol":35},{"startCol":40,"endCol":60}]},"547":{"partial":false,"source":"                        return;","missing":[{"startCol":24,"endCol":31}]},"549":{"partial":false,"source":"                    id += ch;","missing":[{"startCol":20,"endCol":29}]},"551":{"partial":false,"source":"                    index = restore;","missing":[{"startCol":20,"endCol":36}]},"552":{"partial":false,"source":"                    id += 'u';","missing":[{"startCol":20,"endCol":30}]},"555":{"partial":false,"source":"                id += nextChar();","missing":[{"startCol":16,"endCol":33},{"startCol":22,"endCol":32}]},"561":{"partial":false,"source":"        if (id.length === 1) {","missing":[{"startCol":12,"endCol":27}]},"562":{"partial":false,"source":"            return {","missing":[{}]},"563":{"partial":false,"source":"                type: Token.Identifier,","missing":[{}]},"564":{"partial":false,"source":"                value: id,","missing":[{}]},"565":{"partial":false,"source":"                lineNumber: lineNumber,","missing":[{}]},"566":{"partial":false,"source":"                lineStart: lineStart,","missing":[{}]},"567":{"partial":false,"source":"                range: [start, index]","missing":[{}]},"568":{"partial":false,"source":"            };","missing":[{}]},"571":{"partial":false,"source":"        if (isKeyword(id)) {","missing":[{"startCol":12,"endCol":25}]},"572":{"partial":false,"source":"            return {","missing":[{}]},"573":{"partial":false,"source":"                type: Token.Keyword,","missing":[{}]},"574":{"partial":false,"source":"                value: id,","missing":[{}]},"575":{"partial":false,"source":"                lineNumber: lineNumber,","missing":[{}]},"576":{"partial":false,"source":"                lineStart: lineStart,","missing":[{}]},"577":{"partial":false,"source":"                range: [start, index]","missing":[{}]},"578":{"partial":false,"source":"            };","missing":[{}]},"583":{"partial":false,"source":"        if (id === 'null') {","missing":[{"startCol":12,"endCol":25}]},"584":{"partial":false,"source":"            return {","missing":[{}]},"585":{"partial":false,"source":"                type: Token.NullLiteral,","missing":[{}]},"586":{"partial":false,"source":"                value: id,","missing":[{}]},"587":{"partial":false,"source":"                lineNumber: lineNumber,","missing":[{}]},"588":{"partial":false,"source":"                lineStart: lineStart,","missing":[{}]},"589":{"partial":false,"source":"                range: [start, index]","missing":[{}]},"590":{"partial":false,"source":"            };","missing":[{}]},"595":{"partial":false,"source":"        if (id === 'true' || id === 'false') {","missing":[{"startCol":12,"endCol":25},{"startCol":29,"endCol":43}]},"596":{"partial":false,"source":"            return {","missing":[{}]},"597":{"partial":false,"source":"                type: Token.BooleanLiteral,","missing":[{}]},"598":{"partial":false,"source":"                value: id,","missing":[{}]},"599":{"partial":false,"source":"                lineNumber: lineNumber,","missing":[{}]},"600":{"partial":false,"source":"                lineStart: lineStart,","missing":[{}]},"601":{"partial":false,"source":"                range: [start, index]","missing":[{}]},"602":{"partial":false,"source":"            };","missing":[{}]},"605":{"partial":false,"source":"        return {","missing":[{}]},"606":{"partial":false,"source":"            type: Token.Identifier,","missing":[{}]},"607":{"partial":false,"source":"            value: id,","missing":[{}]},"608":{"partial":false,"source":"            lineNumber: lineNumber,","missing":[{}]},"609":{"partial":false,"source":"            lineStart: lineStart,","missing":[{}]},"610":{"partial":false,"source":"            range: [start, index]","missing":[{}]},"611":{"partial":false,"source":"        };","missing":[{}]},"617":{"partial":false,"source":"        var start = index,","missing":[{}]},"618":{"partial":false,"source":"            ch1 = source[index],","missing":[{}]},"619":{"partial":false,"source":"            ch2,","missing":[{}]},"620":{"partial":false,"source":"            ch3,","missing":[{}]},"621":{"partial":false,"source":"            ch4;","missing":[{}]},"625":{"partial":false,"source":"        if (ch1 === ';' || ch1 === '{' || ch1 === '}') {","missing":[{"startCol":12,"endCol":23},{"startCol":27,"endCol":38},{"startCol":42,"endCol":53}]},"626":{"partial":false,"source":"            ++index;","missing":[{"startCol":12,"endCol":19}]},"627":{"partial":false,"source":"            return {","missing":[{}]},"628":{"partial":false,"source":"                type: Token.Punctuator,","missing":[{}]},"629":{"partial":false,"source":"                value: ch1,","missing":[{}]},"630":{"partial":false,"source":"                lineNumber: lineNumber,","missing":[{}]},"631":{"partial":false,"source":"                lineStart: lineStart,","missing":[{}]},"632":{"partial":false,"source":"                range: [start, index]","missing":[{}]},"633":{"partial":false,"source":"            };","missing":[{}]},"636":{"partial":false,"source":"        if (ch1 === ',' || ch1 === '(' || ch1 === ')') {","missing":[{"startCol":12,"endCol":23},{"startCol":27,"endCol":38},{"startCol":42,"endCol":53}]},"637":{"partial":false,"source":"            ++index;","missing":[{"startCol":12,"endCol":19}]},"638":{"partial":false,"source":"            return {","missing":[{}]},"639":{"partial":false,"source":"                type: Token.Punctuator,","missing":[{}]},"640":{"partial":false,"source":"                value: ch1,","missing":[{}]},"641":{"partial":false,"source":"                lineNumber: lineNumber,","missing":[{}]},"642":{"partial":false,"source":"                lineStart: lineStart,","missing":[{}]},"643":{"partial":false,"source":"                range: [start, index]","missing":[{}]},"644":{"partial":false,"source":"            };","missing":[{}]},"650":{"partial":false,"source":"        ch2 = source[index + 1];","missing":[{"startCol":8,"endCol":32},{"startCol":21,"endCol":30}]},"651":{"partial":false,"source":"        if (ch1 === '.' && !isDecimalDigit(ch2)) {","missing":[{"startCol":12,"endCol":23},{"startCol":28,"endCol":47}]},"652":{"partial":false,"source":"            return {","missing":[{}]},"653":{"partial":false,"source":"                type: Token.Punctuator,","missing":[{}]},"654":{"partial":false,"source":"                value: nextChar(),","missing":[{},{"startCol":23,"endCol":33}]},"655":{"partial":false,"source":"                lineNumber: lineNumber,","missing":[{}]},"656":{"partial":false,"source":"                lineStart: lineStart,","missing":[{}]},"657":{"partial":false,"source":"                range: [start, index]","missing":[{}]},"658":{"partial":false,"source":"            };","missing":[{}]},"663":{"partial":false,"source":"        ch3 = source[index + 2];","missing":[{"startCol":8,"endCol":32},{"startCol":21,"endCol":30}]},"664":{"partial":false,"source":"        ch4 = source[index + 3];","missing":[{"startCol":8,"endCol":32},{"startCol":21,"endCol":30}]},"668":{"partial":false,"source":"        if (ch1 === '>' && ch2 === '>' && ch3 === '>') {","missing":[{"startCol":12,"endCol":23},{"startCol":27,"endCol":38},{"startCol":42,"endCol":53}]},"669":{"partial":false,"source":"            if (ch4 === '=') {","missing":[{"startCol":16,"endCol":27}]},"670":{"partial":false,"source":"                index += 4;","missing":[{"startCol":16,"endCol":27}]},"671":{"partial":false,"source":"                return {","missing":[{}]},"672":{"partial":false,"source":"                    type: Token.Punctuator,","missing":[{}]},"673":{"partial":false,"source":"                    value: '>>>=',","missing":[{}]},"674":{"partial":false,"source":"                    lineNumber: lineNumber,","missing":[{}]},"675":{"partial":false,"source":"                    lineStart: lineStart,","missing":[{}]},"676":{"partial":false,"source":"                    range: [start, index]","missing":[{}]},"677":{"partial":false,"source":"                };","missing":[{}]},"683":{"partial":false,"source":"        if (ch1 === '=' && ch2 === '=' && ch3 === '=') {","missing":[{"startCol":12,"endCol":23},{"startCol":27,"endCol":38},{"startCol":42,"endCol":53}]},"684":{"partial":false,"source":"            index += 3;","missing":[{"startCol":12,"endCol":23}]},"685":{"partial":false,"source":"            return {","missing":[{}]},"686":{"partial":false,"source":"                type: Token.Punctuator,","missing":[{}]},"687":{"partial":false,"source":"                value: '===',","missing":[{}]},"688":{"partial":false,"source":"                lineNumber: lineNumber,","missing":[{}]},"689":{"partial":false,"source":"                lineStart: lineStart,","missing":[{}]},"690":{"partial":false,"source":"                range: [start, index]","missing":[{}]},"691":{"partial":false,"source":"            };","missing":[{}]},"694":{"partial":false,"source":"        if (ch1 === '!' && ch2 === '=' && ch3 === '=') {","missing":[{"startCol":12,"endCol":23},{"startCol":27,"endCol":38},{"startCol":42,"endCol":53}]},"695":{"partial":false,"source":"            index += 3;","missing":[{"startCol":12,"endCol":23}]},"696":{"partial":false,"source":"            return {","missing":[{}]},"697":{"partial":false,"source":"                type: Token.Punctuator,","missing":[{}]},"698":{"partial":false,"source":"                value: '!==',","missing":[{}]},"699":{"partial":false,"source":"                lineNumber: lineNumber,","missing":[{}]},"700":{"partial":false,"source":"                lineStart: lineStart,","missing":[{}]},"701":{"partial":false,"source":"                range: [start, index]","missing":[{}]},"702":{"partial":false,"source":"            };","missing":[{}]},"705":{"partial":false,"source":"        if (ch1 === '>' && ch2 === '>' && ch3 === '>') {","missing":[{"startCol":12,"endCol":23},{"startCol":27,"endCol":38},{"startCol":42,"endCol":53}]},"706":{"partial":false,"source":"            index += 3;","missing":[{"startCol":12,"endCol":23}]},"707":{"partial":false,"source":"            return {","missing":[{}]},"708":{"partial":false,"source":"                type: Token.Punctuator,","missing":[{}]},"709":{"partial":false,"source":"                value: '>>>',","missing":[{}]},"710":{"partial":false,"source":"                lineNumber: lineNumber,","missing":[{}]},"711":{"partial":false,"source":"                lineStart: lineStart,","missing":[{}]},"712":{"partial":false,"source":"                range: [start, index]","missing":[{}]},"713":{"partial":false,"source":"            };","missing":[{}]},"716":{"partial":false,"source":"        if (ch1 === '<' && ch2 === '<' && ch3 === '=') {","missing":[{"startCol":12,"endCol":23},{"startCol":27,"endCol":38},{"startCol":42,"endCol":53}]},"717":{"partial":false,"source":"            index += 3;","missing":[{"startCol":12,"endCol":23}]},"718":{"partial":false,"source":"            return {","missing":[{}]},"719":{"partial":false,"source":"                type: Token.Punctuator,","missing":[{}]},"720":{"partial":false,"source":"                value: '<<=',","missing":[{}]},"721":{"partial":false,"source":"                lineNumber: lineNumber,","missing":[{}]},"722":{"partial":false,"source":"                lineStart: lineStart,","missing":[{}]},"723":{"partial":false,"source":"                range: [start, index]","missing":[{}]},"724":{"partial":false,"source":"            };","missing":[{}]},"727":{"partial":false,"source":"        if (ch1 === '>' && ch2 === '>' && ch3 === '=') {","missing":[{"startCol":12,"endCol":23},{"startCol":27,"endCol":38},{"startCol":42,"endCol":53}]},"728":{"partial":false,"source":"            index += 3;","missing":[{"startCol":12,"endCol":23}]},"729":{"partial":false,"source":"            return {","missing":[{}]},"730":{"partial":false,"source":"                type: Token.Punctuator,","missing":[{}]},"731":{"partial":false,"source":"                value: '>>=',","missing":[{}]},"732":{"partial":false,"source":"                lineNumber: lineNumber,","missing":[{}]},"733":{"partial":false,"source":"                lineStart: lineStart,","missing":[{}]},"734":{"partial":false,"source":"                range: [start, index]","missing":[{}]},"735":{"partial":false,"source":"            };","missing":[{}]},"741":{"partial":false,"source":"        if (ch2 === '=') {","missing":[{"startCol":12,"endCol":23}]},"742":{"partial":false,"source":"            if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {","missing":[{"startCol":16,"endCol":43}]},"743":{"partial":false,"source":"                index += 2;","missing":[{"startCol":16,"endCol":27}]},"744":{"partial":false,"source":"                return {","missing":[{}]},"745":{"partial":false,"source":"                    type: Token.Punctuator,","missing":[{}]},"746":{"partial":false,"source":"                    value: ch1 + ch2,","missing":[{"startCol":27,"endCol":36},{}]},"747":{"partial":false,"source":"                    lineNumber: lineNumber,","missing":[{}]},"748":{"partial":false,"source":"                    lineStart: lineStart,","missing":[{}]},"749":{"partial":false,"source":"                    range: [start, index]","missing":[{}]},"750":{"partial":false,"source":"                };","missing":[{}]},"754":{"partial":false,"source":"        if (ch1 === ch2 && ('+-<>&|'.indexOf(ch1) >= 0)) {","missing":[{"startCol":12,"endCol":23},{"startCol":27,"endCol":55},{"startCol":28,"endCol":49}]},"755":{"partial":false,"source":"            if ('+-<>&|'.indexOf(ch2) >= 0) {","missing":[{"startCol":16,"endCol":37}]},"756":{"partial":false,"source":"                index += 2;","missing":[{"startCol":16,"endCol":27}]},"757":{"partial":false,"source":"                return {","missing":[{}]},"758":{"partial":false,"source":"                    type: Token.Punctuator,","missing":[{}]},"759":{"partial":false,"source":"                    value: ch1 + ch2,","missing":[{"startCol":27,"endCol":36},{}]},"760":{"partial":false,"source":"                    lineNumber: lineNumber,","missing":[{}]},"761":{"partial":false,"source":"                    lineStart: lineStart,","missing":[{}]},"762":{"partial":false,"source":"                    range: [start, index]","missing":[{}]},"763":{"partial":false,"source":"                };","missing":[{}]},"767":{"partial":false,"source":"        if (ch1 === '=' && ch2 === '>') {","missing":[{"startCol":12,"endCol":23},{"startCol":27,"endCol":38}]},"768":{"partial":false,"source":"            index += 2;","missing":[{"startCol":12,"endCol":23}]},"769":{"partial":false,"source":"            return {","missing":[{}]},"770":{"partial":false,"source":"                type: Token.Punctuator,","missing":[{}]},"771":{"partial":false,"source":"                value: '=>',","missing":[{}]},"772":{"partial":false,"source":"                lineNumber: lineNumber,","missing":[{}]},"773":{"partial":false,"source":"                lineStart: lineStart,","missing":[{}]},"774":{"partial":false,"source":"                range: [start, index]","missing":[{}]},"775":{"partial":false,"source":"            };","missing":[{}]},"780":{"partial":false,"source":"        if ('[]<>+-*%&|^!~?:=/'.indexOf(ch1) >= 0) {","missing":[{"startCol":12,"endCol":44}]},"781":{"partial":false,"source":"            return {","missing":[{}]},"782":{"partial":false,"source":"                type: Token.Punctuator,","missing":[{}]},"783":{"partial":false,"source":"                value: nextChar(),","missing":[{"startCol":23,"endCol":33},{}]},"784":{"partial":false,"source":"                lineNumber: lineNumber,","missing":[{}]},"785":{"partial":false,"source":"                lineStart: lineStart,","missing":[{}]},"786":{"partial":false,"source":"                range: [start, index]","missing":[{}]},"787":{"partial":false,"source":"            };","missing":[{}]},"794":{"partial":false,"source":"        var number, start, ch, octal;","missing":[{"startCol":8,"endCol":37}]},"796":{"partial":false,"source":"        ch = source[index];","missing":[{"startCol":8,"endCol":27}]},"797":{"partial":false,"source":"        assert(isDecimalDigit(ch) || (ch === '.'),","missing":[{},{"startCol":37,"endCol":49},{"startCol":15,"endCol":33}]},"798":{"partial":false,"source":"            'Numeric literal must start with a decimal digit or a decimal point');","missing":[{}]},"800":{"partial":false,"source":"        start = index;","missing":[{"startCol":8,"endCol":22}]},"801":{"partial":false,"source":"        number = '';","missing":[{"startCol":8,"endCol":20}]},"802":{"partial":false,"source":"        if (ch !== '.') {","missing":[{"startCol":12,"endCol":22}]},"803":{"partial":false,"source":"            number = nextChar();","missing":[{"startCol":12,"endCol":32},{"startCol":21,"endCol":31}]},"804":{"partial":false,"source":"            ch = source[index];","missing":[{"startCol":12,"endCol":31}]},"810":{"partial":false,"source":"            if (number === '0') {","missing":[{"startCol":16,"endCol":30}]},"811":{"partial":false,"source":"                if (ch === 'x' || ch === 'X') {","missing":[{"startCol":20,"endCol":30},{"startCol":34,"endCol":44}]},"812":{"partial":false,"source":"                    number += nextChar();","missing":[{"startCol":20,"endCol":41},{"startCol":30,"endCol":40}]},"813":{"partial":false,"source":"                    while (index < length) {","missing":[{"startCol":27,"endCol":41}]},"814":{"partial":false,"source":"                        ch = source[index];","missing":[{"startCol":24,"endCol":43}]},"815":{"partial":false,"source":"                        if (!isHexDigit(ch)) {","missing":[{"startCol":29,"endCol":43}]},"818":{"partial":false,"source":"                        number += nextChar();","missing":[{"startCol":24,"endCol":45},{"startCol":34,"endCol":44}]},"821":{"partial":false,"source":"                    if (number.length <= 2) {","missing":[{"startCol":24,"endCol":42}]},"823":{"partial":false,"source":"                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');","missing":[{"startCol":24,"endCol":75}]},"826":{"partial":false,"source":"                    if (index < length) {","missing":[{"startCol":24,"endCol":38}]},"827":{"partial":false,"source":"                        ch = source[index];","missing":[{"startCol":24,"endCol":43}]},"828":{"partial":false,"source":"                        if (isIdentifierStart(ch)) {","missing":[{"startCol":28,"endCol":49}]},"829":{"partial":false,"source":"                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');","missing":[{"startCol":28,"endCol":79}]},"832":{"partial":false,"source":"                    return {","missing":[{}]},"833":{"partial":false,"source":"                        type: Token.NumericLiteral,","missing":[{}]},"834":{"partial":false,"source":"                        value: parseInt(number, 16),","missing":[{},{"startCol":31,"endCol":51}]},"835":{"partial":false,"source":"                        lineNumber: lineNumber,","missing":[{}]},"836":{"partial":false,"source":"                        lineStart: lineStart,","missing":[{}]},"837":{"partial":false,"source":"                        range: [start, index]","missing":[{}]},"838":{"partial":false,"source":"                    };","missing":[{}]},"839":{"partial":false,"source":"                } else if (ch === 'b' || ch === 'B') {","missing":[{"startCol":27,"endCol":37},{"startCol":41,"endCol":51}]},"840":{"partial":false,"source":"                    nextChar();","missing":[{"startCol":20,"endCol":30}]},"841":{"partial":false,"source":"                    number = '';","missing":[{"startCol":20,"endCol":32}]},"843":{"partial":false,"source":"                    while (index < length) {","missing":[{"startCol":27,"endCol":41}]},"844":{"partial":false,"source":"                        ch = source[index];","missing":[{"startCol":24,"endCol":43}]},"845":{"partial":false,"source":"                        if (ch !== '0' && ch !== '1') {","missing":[{"startCol":28,"endCol":38},{"startCol":42,"endCol":52}]},"848":{"partial":false,"source":"                        number += nextChar();","missing":[{"startCol":24,"endCol":45},{"startCol":34,"endCol":44}]},"851":{"partial":false,"source":"                    if (number.length === 0) {","missing":[{"startCol":24,"endCol":43}]},"853":{"partial":false,"source":"                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');","missing":[{"startCol":24,"endCol":75}]},"856":{"partial":false,"source":"                    if (index < length) {","missing":[{"startCol":24,"endCol":38}]},"857":{"partial":false,"source":"                        ch = source[index];","missing":[{"startCol":24,"endCol":43}]},"858":{"partial":false,"source":"                        if (isIdentifierStart(ch) || isDecimalDigit(ch)) {","missing":[{"startCol":28,"endCol":49},{"startCol":53,"endCol":71}]},"859":{"partial":false,"source":"                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');","missing":[{"startCol":28,"endCol":79}]},"862":{"partial":false,"source":"                    return {","missing":[{}]},"863":{"partial":false,"source":"                        type: Token.NumericLiteral,","missing":[{}]},"864":{"partial":false,"source":"                        value: parseInt(number, 2),","missing":[{"startCol":31,"endCol":50},{}]},"865":{"partial":false,"source":"                        lineNumber: lineNumber,","missing":[{}]},"866":{"partial":false,"source":"                        lineStart: lineStart,","missing":[{}]},"867":{"partial":false,"source":"                        range: [start, index]","missing":[{}]},"868":{"partial":false,"source":"                    };","missing":[{}]},"869":{"partial":false,"source":"                } else if (ch === 'o' || ch === 'O' || isOctalDigit(ch)) {","missing":[{"startCol":27,"endCol":37},{"startCol":41,"endCol":51},{"startCol":55,"endCol":71}]},"870":{"partial":false,"source":"                    if (isOctalDigit(ch)) {","missing":[{"startCol":24,"endCol":40}]},"871":{"partial":false,"source":"                        octal = true;","missing":[{"startCol":24,"endCol":37}]},"872":{"partial":false,"source":"                        number = nextChar();","missing":[{"startCol":24,"endCol":44},{"startCol":33,"endCol":43}]},"874":{"partial":false,"source":"                        octal = false;","missing":[{"startCol":24,"endCol":38}]},"875":{"partial":false,"source":"                        nextChar();","missing":[{"startCol":24,"endCol":34}]},"876":{"partial":false,"source":"                        number = '';","missing":[{"startCol":24,"endCol":36}]},"879":{"partial":false,"source":"                    while (index < length) {","missing":[{"startCol":27,"endCol":41}]},"880":{"partial":false,"source":"                        ch = source[index];","missing":[{"startCol":24,"endCol":43}]},"881":{"partial":false,"source":"                        if (!isOctalDigit(ch)) {","missing":[{"startCol":29,"endCol":45}]},"884":{"partial":false,"source":"                        number += nextChar();","missing":[{"startCol":24,"endCol":45},{"startCol":34,"endCol":44}]},"887":{"partial":false,"source":"                    if (number.length === 0) {","missing":[{"startCol":24,"endCol":43}]},"889":{"partial":false,"source":"                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');","missing":[{"startCol":24,"endCol":75}]},"892":{"partial":false,"source":"                    if (index < length) {","missing":[{"startCol":24,"endCol":38}]},"893":{"partial":false,"source":"                        ch = source[index];","missing":[{"startCol":24,"endCol":43}]},"894":{"partial":false,"source":"                        if (isIdentifierStart(ch) || isDecimalDigit(ch)) {","missing":[{"startCol":28,"endCol":49},{"startCol":53,"endCol":71}]},"895":{"partial":false,"source":"                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');","missing":[{"startCol":28,"endCol":79}]},"899":{"partial":false,"source":"                    return {","missing":[{}]},"900":{"partial":false,"source":"                        type: Token.NumericLiteral,","missing":[{}]},"901":{"partial":false,"source":"                        value: parseInt(number, 8),","missing":[{"startCol":31,"endCol":50},{}]},"902":{"partial":false,"source":"                        octal: octal,","missing":[{}]},"903":{"partial":false,"source":"                        lineNumber: lineNumber,","missing":[{}]},"904":{"partial":false,"source":"                        lineStart: lineStart,","missing":[{}]},"905":{"partial":false,"source":"                        range: [start, index]","missing":[{}]},"906":{"partial":false,"source":"                    };","missing":[{}]},"910":{"partial":false,"source":"                if (isDecimalDigit(ch)) {","missing":[{"startCol":20,"endCol":38}]},"911":{"partial":false,"source":"                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');","missing":[{"startCol":20,"endCol":71}]},"915":{"partial":false,"source":"            while (index < length) {","missing":[{"startCol":19,"endCol":33}]},"916":{"partial":false,"source":"                ch = source[index];","missing":[{"startCol":16,"endCol":35}]},"917":{"partial":false,"source":"                if (!isDecimalDigit(ch)) {","missing":[{"startCol":21,"endCol":39}]},"920":{"partial":false,"source":"                number += nextChar();","missing":[{"startCol":16,"endCol":37},{"startCol":26,"endCol":36}]},"924":{"partial":false,"source":"        if (ch === '.') {","missing":[{"startCol":12,"endCol":22}]},"925":{"partial":false,"source":"            number += nextChar();","missing":[{"startCol":12,"endCol":33},{"startCol":22,"endCol":32}]},"926":{"partial":false,"source":"            while (index < length) {","missing":[{"startCol":19,"endCol":33}]},"927":{"partial":false,"source":"                ch = source[index];","missing":[{"startCol":16,"endCol":35}]},"928":{"partial":false,"source":"                if (!isDecimalDigit(ch)) {","missing":[{"startCol":21,"endCol":39}]},"931":{"partial":false,"source":"                number += nextChar();","missing":[{"startCol":16,"endCol":37},{"startCol":26,"endCol":36}]},"935":{"partial":false,"source":"        if (ch === 'e' || ch === 'E') {","missing":[{"startCol":12,"endCol":22},{"startCol":26,"endCol":36}]},"936":{"partial":false,"source":"            number += nextChar();","missing":[{"startCol":12,"endCol":33},{"startCol":22,"endCol":32}]},"938":{"partial":false,"source":"            ch = source[index];","missing":[{"startCol":12,"endCol":31}]},"939":{"partial":false,"source":"            if (ch === '+' || ch === '-') {","missing":[{"startCol":16,"endCol":26},{"startCol":30,"endCol":40}]},"940":{"partial":false,"source":"                number += nextChar();","missing":[{"startCol":16,"endCol":37},{"startCol":26,"endCol":36}]},"943":{"partial":false,"source":"            ch = source[index];","missing":[{"startCol":12,"endCol":31}]},"944":{"partial":false,"source":"            if (isDecimalDigit(ch)) {","missing":[{"startCol":16,"endCol":34}]},"945":{"partial":false,"source":"                number += nextChar();","missing":[{"startCol":16,"endCol":37},{"startCol":26,"endCol":36}]},"946":{"partial":false,"source":"                while (index < length) {","missing":[{"startCol":23,"endCol":37}]},"947":{"partial":false,"source":"                    ch = source[index];","missing":[{"startCol":20,"endCol":39}]},"948":{"partial":false,"source":"                    if (!isDecimalDigit(ch)) {","missing":[{"startCol":25,"endCol":43}]},"951":{"partial":false,"source":"                    number += nextChar();","missing":[{"startCol":20,"endCol":41},{"startCol":30,"endCol":40}]},"954":{"partial":false,"source":"                ch = 'character ' + ch;","missing":[{"startCol":16,"endCol":39},{"startCol":21,"endCol":38}]},"955":{"partial":false,"source":"                if (index >= length) {","missing":[{"startCol":20,"endCol":35}]},"956":{"partial":false,"source":"                    ch = '<end>';","missing":[{"startCol":20,"endCol":33}]},"958":{"partial":false,"source":"                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');","missing":[{"startCol":16,"endCol":67}]},"962":{"partial":false,"source":"        if (index < length) {","missing":[{"startCol":12,"endCol":26}]},"963":{"partial":false,"source":"            ch = source[index];","missing":[{"startCol":12,"endCol":31}]},"964":{"partial":false,"source":"            if (isIdentifierStart(ch)) {","missing":[{"startCol":16,"endCol":37}]},"965":{"partial":false,"source":"                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');","missing":[{"startCol":16,"endCol":67}]},"969":{"partial":false,"source":"        return {","missing":[{}]},"970":{"partial":false,"source":"            type: Token.NumericLiteral,","missing":[{}]},"971":{"partial":false,"source":"            value: parseFloat(number),","missing":[{"startCol":19,"endCol":37},{}]},"972":{"partial":false,"source":"            lineNumber: lineNumber,","missing":[{}]},"973":{"partial":false,"source":"            lineStart: lineStart,","missing":[{}]},"974":{"partial":false,"source":"            range: [start, index]","missing":[{}]},"975":{"partial":false,"source":"        };","missing":[{}]},"981":{"partial":false,"source":"        var str = '', quote, start, ch, code, unescaped, restore, octal = false;","missing":[{"startCol":8,"endCol":80}]},"983":{"partial":false,"source":"        quote = source[index];","missing":[{"startCol":8,"endCol":30}]},"984":{"partial":false,"source":"        assert((quote === '\\'' || quote === '\"'),","missing":[{"startCol":15,"endCol":48},{"startCol":16,"endCol":30},{},{"startCol":34,"endCol":47}]},"985":{"partial":false,"source":"            'String literal must starts with a quote');","missing":[{}]},"987":{"partial":false,"source":"        start = index;","missing":[{"startCol":8,"endCol":22}]},"988":{"partial":false,"source":"        ++index;","missing":[{"startCol":8,"endCol":15}]},"990":{"partial":false,"source":"        while (index < length) {","missing":[{"startCol":15,"endCol":29}]},"991":{"partial":false,"source":"            ch = nextChar();","missing":[{"startCol":12,"endCol":28},{"startCol":17,"endCol":27}]},"993":{"partial":false,"source":"            if (ch === quote) {","missing":[{"startCol":16,"endCol":28}]},"994":{"partial":false,"source":"                quote = '';","missing":[{"startCol":16,"endCol":27}]},"996":{"partial":false,"source":"            } else if (ch === '\\\\') {","missing":[{"startCol":23,"endCol":34}]},"997":{"partial":false,"source":"                ch = nextChar();","missing":[{"startCol":16,"endCol":32},{"startCol":21,"endCol":31}]},"998":{"partial":false,"source":"                if (!isLineTerminator(ch)) {","missing":[{"startCol":21,"endCol":41}]},"1001":{"partial":false,"source":"                        str += '\\n';","missing":[{"startCol":24,"endCol":36}]},"1004":{"partial":false,"source":"                        str += '\\r';","missing":[{"startCol":24,"endCol":36}]},"1007":{"partial":false,"source":"                        str += '\\t';","missing":[{"startCol":24,"endCol":36}]},"1011":{"partial":false,"source":"                        if (source[index] === '{') {","missing":[{"startCol":28,"endCol":49}]},"1012":{"partial":false,"source":"                            ++index;","missing":[{"startCol":28,"endCol":35}]},"1013":{"partial":false,"source":"                            str += scanUnicodeCodePointEscape();","missing":[{"startCol":28,"endCol":64},{"startCol":35,"endCol":63}]},"1015":{"partial":false,"source":"                            restore = index;","missing":[{"startCol":28,"endCol":44}]},"1016":{"partial":false,"source":"                            unescaped = scanHexEscape(ch);","missing":[{"startCol":28,"endCol":58},{"startCol":40,"endCol":57}]},"1018":{"partial":false,"source":"                                str += unescaped;","missing":[{"startCol":32,"endCol":49}]},"1020":{"partial":false,"source":"                                index = restore;","missing":[{"startCol":32,"endCol":48}]},"1021":{"partial":false,"source":"                                str += ch;","missing":[{"startCol":32,"endCol":42}]},"1026":{"partial":false,"source":"                        str += '\\b';","missing":[{"startCol":24,"endCol":36}]},"1029":{"partial":false,"source":"                        str += '\\f';","missing":[{"startCol":24,"endCol":36}]},"1032":{"partial":false,"source":"                        str += '\\v';","missing":[{"startCol":24,"endCol":36}]},"1036":{"partial":false,"source":"                        if (isOctalDigit(ch)) {","missing":[{"startCol":28,"endCol":44}]},"1037":{"partial":false,"source":"                            code = '01234567'.indexOf(ch);","missing":[{"startCol":28,"endCol":58},{"startCol":35,"endCol":57}]},"1040":{"partial":false,"source":"                            if (code !== 0) {","missing":[{"startCol":32,"endCol":42}]},"1041":{"partial":false,"source":"                                octal = true;","missing":[{"startCol":32,"endCol":45}]},"1044":{"partial":false,"source":"                            if (index < length && isOctalDigit(source[index])) {","missing":[{"startCol":32,"endCol":46},{"startCol":50,"endCol":77}]},"1045":{"partial":false,"source":"                                octal = true;","missing":[{"startCol":32,"endCol":45}]},"1046":{"partial":false,"source":"                                code = code * 8 + '01234567'.indexOf(nextChar());","missing":[{"startCol":32,"endCol":81},{"startCol":39,"endCol":47},{"startCol":50,"endCol":80},{"startCol":69,"endCol":79}]},"1050":{"partial":false,"source":"                                if ('0123'.indexOf(ch) >= 0 &&","missing":[{"startCol":36,"endCol":59},{}]},"1051":{"partial":false,"source":"                                        index < length &&","missing":[{},{"startCol":40,"endCol":54}]},"1052":{"partial":false,"source":"                                        isOctalDigit(source[index])) {","missing":[{"startCol":40,"endCol":67},{}]},"1053":{"partial":false,"source":"                                    code = code * 8 + '01234567'.indexOf(nextChar());","missing":[{"startCol":36,"endCol":85},{"startCol":43,"endCol":51},{"startCol":54,"endCol":84},{"startCol":73,"endCol":83}]},"1056":{"partial":false,"source":"                            str += String.fromCharCode(code);","missing":[{"startCol":28,"endCol":61},{"startCol":35,"endCol":60}]},"1058":{"partial":false,"source":"                            str += ch;","missing":[{"startCol":28,"endCol":38}]},"1063":{"partial":false,"source":"                    ++lineNumber;","missing":[{"startCol":20,"endCol":32}]},"1064":{"partial":false,"source":"                    if (ch ===  '\\r' && source[index] === '\\n') {","missing":[{"startCol":24,"endCol":36},{"startCol":40,"endCol":62}]},"1065":{"partial":false,"source":"                        ++index;","missing":[{"startCol":24,"endCol":31}]},"1068":{"partial":false,"source":"            } else if (isLineTerminator(ch)) {","missing":[{"startCol":23,"endCol":43}]},"1071":{"partial":false,"source":"                str += ch;","missing":[{"startCol":16,"endCol":26}]},"1075":{"partial":false,"source":"        if (quote !== '') {","missing":[{"startCol":12,"endCol":24}]},"1076":{"partial":false,"source":"            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');","missing":[{"startCol":12,"endCol":63}]},"1079":{"partial":false,"source":"        return {","missing":[{}]},"1080":{"partial":false,"source":"            type: Token.StringLiteral,","missing":[{}]},"1081":{"partial":false,"source":"            value: str,","missing":[{}]},"1082":{"partial":false,"source":"            octal: octal,","missing":[{}]},"1083":{"partial":false,"source":"            lineNumber: lineNumber,","missing":[{}]},"1084":{"partial":false,"source":"            lineStart: lineStart,","missing":[{}]},"1085":{"partial":false,"source":"            range: [start, index]","missing":[{}]},"1086":{"partial":false,"source":"        };","missing":[{}]},"1090":{"partial":false,"source":"        var cooked = '', ch, start, terminated, tail, restore, unescaped, code, octal;","missing":[{"startCol":8,"endCol":86}]},"1092":{"partial":false,"source":"        terminated = false;","missing":[{"startCol":8,"endCol":27}]},"1093":{"partial":false,"source":"        tail = false;","missing":[{"startCol":8,"endCol":21}]},"1094":{"partial":false,"source":"        start = index;","missing":[{"startCol":8,"endCol":22}]},"1096":{"partial":false,"source":"        ++index;","missing":[{"startCol":8,"endCol":15}]},"1098":{"partial":false,"source":"        while (index < length) {","missing":[{"startCol":15,"endCol":29}]},"1099":{"partial":false,"source":"            ch = nextChar();","missing":[{"startCol":12,"endCol":28},{"startCol":17,"endCol":27}]},"1100":{"partial":false,"source":"            if (ch === '`') {","missing":[{"startCol":16,"endCol":26}]},"1101":{"partial":false,"source":"                tail = true;","missing":[{"startCol":16,"endCol":28}]},"1102":{"partial":false,"source":"                terminated = true;","missing":[{"startCol":16,"endCol":34}]},"1104":{"partial":false,"source":"            } else if (ch === '$') {","missing":[{"startCol":23,"endCol":33}]},"1105":{"partial":false,"source":"                if (source[index] === '{') {","missing":[{"startCol":20,"endCol":41}]},"1106":{"partial":false,"source":"                    ++index;","missing":[{"startCol":20,"endCol":27}]},"1107":{"partial":false,"source":"                    terminated = true;","missing":[{"startCol":20,"endCol":38}]},"1110":{"partial":false,"source":"                cooked += ch;","missing":[{"startCol":16,"endCol":29}]},"1111":{"partial":false,"source":"            } else if (ch === '\\\\') {","missing":[{"startCol":23,"endCol":34}]},"1112":{"partial":false,"source":"                ch = nextChar();","missing":[{"startCol":16,"endCol":32},{"startCol":21,"endCol":31}]},"1113":{"partial":false,"source":"                if (!isLineTerminator(ch)) {","missing":[{"startCol":21,"endCol":41}]},"1116":{"partial":false,"source":"                        cooked += '\\n';","missing":[{"startCol":24,"endCol":39}]},"1119":{"partial":false,"source":"                        cooked += '\\r';","missing":[{"startCol":24,"endCol":39}]},"1122":{"partial":false,"source":"                        cooked += '\\t';","missing":[{"startCol":24,"endCol":39}]},"1126":{"partial":false,"source":"                        if (source[index] === '{') {","missing":[{"startCol":28,"endCol":49}]},"1127":{"partial":false,"source":"                            ++index;","missing":[{"startCol":28,"endCol":35}]},"1128":{"partial":false,"source":"                            cooked += scanUnicodeCodePointEscape();","missing":[{"startCol":28,"endCol":67},{"startCol":38,"endCol":66}]},"1130":{"partial":false,"source":"                            restore = index;","missing":[{"startCol":28,"endCol":44}]},"1131":{"partial":false,"source":"                            unescaped = scanHexEscape(ch);","missing":[{"startCol":28,"endCol":58},{"startCol":40,"endCol":57}]},"1133":{"partial":false,"source":"                                cooked += unescaped;","missing":[{"startCol":32,"endCol":52}]},"1135":{"partial":false,"source":"                                index = restore;","missing":[{"startCol":32,"endCol":48}]},"1136":{"partial":false,"source":"                                cooked += ch;","missing":[{"startCol":32,"endCol":45}]},"1141":{"partial":false,"source":"                        cooked += '\\b';","missing":[{"startCol":24,"endCol":39}]},"1144":{"partial":false,"source":"                        cooked += '\\f';","missing":[{"startCol":24,"endCol":39}]},"1147":{"partial":false,"source":"                        cooked += '\\v';","missing":[{"startCol":24,"endCol":39}]},"1151":{"partial":false,"source":"                        if (isOctalDigit(ch)) {","missing":[{"startCol":28,"endCol":44}]},"1152":{"partial":false,"source":"                            code = '01234567'.indexOf(ch);","missing":[{"startCol":28,"endCol":58},{"startCol":35,"endCol":57}]},"1155":{"partial":false,"source":"                            if (code !== 0) {","missing":[{"startCol":32,"endCol":42}]},"1156":{"partial":false,"source":"                                octal = true;","missing":[{"startCol":32,"endCol":45}]},"1159":{"partial":false,"source":"                            if (index < length && isOctalDigit(source[index])) {","missing":[{"startCol":32,"endCol":46},{"startCol":50,"endCol":77}]},"1160":{"partial":false,"source":"                                octal = true;","missing":[{"startCol":32,"endCol":45}]},"1161":{"partial":false,"source":"                                code = code * 8 + '01234567'.indexOf(nextChar());","missing":[{"startCol":32,"endCol":81},{"startCol":39,"endCol":47},{"startCol":50,"endCol":80},{"startCol":69,"endCol":79}]},"1165":{"partial":false,"source":"                                if ('0123'.indexOf(ch) >= 0 &&","missing":[{"startCol":36,"endCol":54},{}]},"1166":{"partial":false,"source":"                                        index < length &&","missing":[{},{"startCol":40,"endCol":54}]},"1167":{"partial":false,"source":"                                        isOctalDigit(source[index])) {","missing":[{},{"startCol":40,"endCol":67}]},"1168":{"partial":false,"source":"                                    code = code * 8 + '01234567'.indexOf(nextChar());","missing":[{"startCol":36,"endCol":85},{"startCol":43,"endCol":51},{"startCol":54,"endCol":84},{"startCol":73,"endCol":83}]},"1171":{"partial":false,"source":"                            cooked += String.fromCharCode(code);","missing":[{"startCol":28,"endCol":64},{"startCol":38,"endCol":63}]},"1173":{"partial":false,"source":"                            cooked += ch;","missing":[{"startCol":28,"endCol":41}]},"1178":{"partial":false,"source":"                    ++lineNumber;","missing":[{"startCol":20,"endCol":32}]},"1179":{"partial":false,"source":"                    if (ch ===  '\\r' && source[index] === '\\n') {","missing":[{"startCol":24,"endCol":36},{"startCol":40,"endCol":62}]},"1180":{"partial":false,"source":"                        ++index;","missing":[{"startCol":24,"endCol":31}]},"1183":{"partial":false,"source":"            } else if (isLineTerminator(ch)) {","missing":[{"startCol":23,"endCol":43}]},"1184":{"partial":false,"source":"                ++lineNumber;","missing":[{"startCol":16,"endCol":28}]},"1185":{"partial":false,"source":"                if (ch ===  '\\r' && source[index] === '\\n') {","missing":[{"startCol":20,"endCol":32},{"startCol":36,"endCol":58}]},"1186":{"partial":false,"source":"                    ++index;","missing":[{"startCol":20,"endCol":27}]},"1189":{"partial":false,"source":"                cooked += ch;","missing":[{"startCol":16,"endCol":29}]},"1194":{"partial":false,"source":"            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');","missing":[{"startCol":12,"endCol":63}]},"1197":{"partial":false,"source":"        return {","missing":[{}]},"1198":{"partial":false,"source":"            type: Token.Quasi,","missing":[{}]},"1199":{"partial":false,"source":"            value: {","missing":[{}]},"1200":{"partial":false,"source":"                cooked: cooked,","missing":[{}]},"1201":{"partial":false,"source":"                raw: sliceSource(start + 1, index - ((tail) ? 1 : 2))","missing":[{"startCol":21,"endCol":69},{},{"startCol":33,"endCol":42},{"startCol":44,"endCol":68},{"startCol":62,"endCol":63},{"startCol":66,"endCol":67}]},"1202":{"partial":false,"source":"            },","missing":[{}]},"1203":{"partial":false,"source":"            tail: tail,","missing":[{}]},"1204":{"partial":false,"source":"            octal: octal,","missing":[{}]},"1205":{"partial":false,"source":"            lineNumber: lineNumber,","missing":[{}]},"1206":{"partial":false,"source":"            lineStart: lineStart,","missing":[{}]},"1207":{"partial":false,"source":"            range: [start, index]","missing":[{}]},"1208":{"partial":false,"source":"        };","missing":[{}]},"1212":{"partial":false,"source":"        var startsWith;","missing":[{"startCol":8,"endCol":23}]},"1214":{"partial":false,"source":"        buffer = null;","missing":[{"startCol":8,"endCol":22}]},"1215":{"partial":false,"source":"        skipComment();","missing":[{"startCol":8,"endCol":21}]},"1217":{"partial":false,"source":"        startsWith = (option.head) ? '`' : '}';","missing":[{"startCol":8,"endCol":47},{"startCol":37,"endCol":40},{"startCol":43,"endCol":46}]},"1219":{"partial":false,"source":"        if (source[index] !== startsWith) {","missing":[{"startCol":12,"endCol":40}]},"1220":{"partial":false,"source":"            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');","missing":[{"startCol":12,"endCol":63}]},"1223":{"partial":false,"source":"        return scanQuasi();","missing":[{"startCol":8,"endCol":27},{"startCol":15,"endCol":26}]},"1227":{"partial":false,"source":"        var str = '', ch, start, pattern, flags, value, classMarker = false, restore, terminated = false;","missing":[{"startCol":8,"endCol":105}]},"1229":{"partial":false,"source":"        buffer = null;","missing":[{"startCol":8,"endCol":22}]},"1230":{"partial":false,"source":"        skipComment();","missing":[{"startCol":8,"endCol":21}]},"1232":{"partial":false,"source":"        start = index;","missing":[{"startCol":8,"endCol":22}]},"1233":{"partial":false,"source":"        ch = source[index];","missing":[{"startCol":8,"endCol":27}]},"1234":{"partial":false,"source":"        assert(ch === '/', 'Regular expression literal must start with a slash');","missing":[{"startCol":8,"endCol":80},{"startCol":15,"endCol":25}]},"1235":{"partial":false,"source":"        str = nextChar();","missing":[{"startCol":8,"endCol":25},{"startCol":14,"endCol":24}]},"1237":{"partial":false,"source":"        while (index < length) {","missing":[{"startCol":15,"endCol":29}]},"1238":{"partial":false,"source":"            ch = nextChar();","missing":[{"startCol":12,"endCol":28},{"startCol":17,"endCol":27}]},"1239":{"partial":false,"source":"            str += ch;","missing":[{"startCol":12,"endCol":22}]},"1241":{"partial":false,"source":"                if (ch === ']') {","missing":[{"startCol":20,"endCol":30}]},"1242":{"partial":false,"source":"                    classMarker = false;","missing":[{"startCol":20,"endCol":40}]},"1245":{"partial":false,"source":"                if (ch === '\\\\') {","missing":[{"startCol":20,"endCol":31}]},"1246":{"partial":false,"source":"                    ch = nextChar();","missing":[{"startCol":20,"endCol":36},{"startCol":25,"endCol":35}]},"1248":{"partial":false,"source":"                    if (isLineTerminator(ch)) {","missing":[{"startCol":24,"endCol":44}]},"1249":{"partial":false,"source":"                        throwError({}, Messages.UnterminatedRegExp);","missing":[{"startCol":24,"endCol":67}]},"1251":{"partial":false,"source":"                    str += ch;","missing":[{"startCol":20,"endCol":30}]},"1252":{"partial":false,"source":"                } else if (ch === '/') {","missing":[{"startCol":27,"endCol":37}]},"1253":{"partial":false,"source":"                    terminated = true;","missing":[{"startCol":20,"endCol":38}]},"1255":{"partial":false,"source":"                } else if (ch === '[') {","missing":[{"startCol":27,"endCol":37}]},"1256":{"partial":false,"source":"                    classMarker = true;","missing":[{"startCol":20,"endCol":39}]},"1257":{"partial":false,"source":"                } else if (isLineTerminator(ch)) {","missing":[{"startCol":27,"endCol":47}]},"1258":{"partial":false,"source":"                    throwError({}, Messages.UnterminatedRegExp);","missing":[{"startCol":20,"endCol":63}]},"1264":{"partial":false,"source":"            throwError({}, Messages.UnterminatedRegExp);","missing":[{"startCol":12,"endCol":55}]},"1268":{"partial":false,"source":"        pattern = str.substr(1, str.length - 2);","missing":[{"startCol":8,"endCol":48},{"startCol":18,"endCol":47},{"startCol":32,"endCol":46}]},"1270":{"partial":false,"source":"        flags = '';","missing":[{"startCol":8,"endCol":19}]},"1271":{"partial":false,"source":"        while (index < length) {","missing":[{"startCol":15,"endCol":29}]},"1272":{"partial":false,"source":"            ch = source[index];","missing":[{"startCol":12,"endCol":31}]},"1273":{"partial":false,"source":"            if (!isIdentifierPart(ch)) {","missing":[{"startCol":17,"endCol":37}]},"1277":{"partial":false,"source":"            ++index;","missing":[{"startCol":12,"endCol":19}]},"1278":{"partial":false,"source":"            if (ch === '\\\\' && index < length) {","missing":[{"startCol":16,"endCol":27},{"startCol":31,"endCol":45}]},"1279":{"partial":false,"source":"                ch = source[index];","missing":[{"startCol":16,"endCol":35}]},"1280":{"partial":false,"source":"                if (ch === 'u') {","missing":[{"startCol":20,"endCol":30}]},"1281":{"partial":false,"source":"                    ++index;","missing":[{"startCol":20,"endCol":27}]},"1282":{"partial":false,"source":"                    restore = index;","missing":[{"startCol":20,"endCol":36}]},"1283":{"partial":false,"source":"                    ch = scanHexEscape('u');","missing":[{"startCol":20,"endCol":44},{"startCol":25,"endCol":43}]},"1285":{"partial":false,"source":"                        flags += ch;","missing":[{"startCol":24,"endCol":36}]},"1286":{"partial":false,"source":"                        str += '\\\\u';","missing":[{"startCol":24,"endCol":37}]},"1287":{"partial":false,"source":"                        for (; restore < index; ++restore) {","missing":[{"startCol":31,"endCol":46},{"startCol":48,"endCol":57}]},"1288":{"partial":false,"source":"                            str += source[restore];","missing":[{"startCol":28,"endCol":51}]},"1291":{"partial":false,"source":"                        index = restore;","missing":[{"startCol":24,"endCol":40}]},"1292":{"partial":false,"source":"                        flags += 'u';","missing":[{"startCol":24,"endCol":37}]},"1293":{"partial":false,"source":"                        str += '\\\\u';","missing":[{"startCol":24,"endCol":37}]},"1296":{"partial":false,"source":"                    str += '\\\\';","missing":[{"startCol":20,"endCol":32}]},"1299":{"partial":false,"source":"                flags += ch;","missing":[{"startCol":16,"endCol":28}]},"1300":{"partial":false,"source":"                str += ch;","missing":[{"startCol":16,"endCol":26}]},"1305":{"partial":false,"source":"            value = new RegExp(pattern, flags);","missing":[{"startCol":12,"endCol":47}]},"1307":{"partial":false,"source":"            throwError({}, Messages.InvalidRegExp);","missing":[{"startCol":12,"endCol":50}]},"1310":{"partial":false,"source":"        return {","missing":[{}]},"1311":{"partial":false,"source":"            literal: str,","missing":[{}]},"1312":{"partial":false,"source":"            value: value,","missing":[{}]},"1313":{"partial":false,"source":"            range: [start, index]","missing":[{}]},"1314":{"partial":false,"source":"        };","missing":[{}]},"1318":{"partial":false,"source":"        return token.type === Token.Identifier ||","missing":[{"startCol":15,"endCol":46},{}]},"1319":{"partial":false,"source":"            token.type === Token.Keyword ||","missing":[{},{"startCol":12,"endCol":40}]},"1320":{"partial":false,"source":"            token.type === Token.BooleanLiteral ||","missing":[{},{"startCol":12,"endCol":47}]},"1321":{"partial":false,"source":"            token.type === Token.NullLiteral;","missing":[{},{"startCol":12,"endCol":44}]},"1325":{"partial":false,"source":"        var ch, token;","missing":[{"startCol":8,"endCol":22}]},"1327":{"partial":false,"source":"        skipComment();","missing":[{"startCol":8,"endCol":21}]},"1329":{"partial":false,"source":"        if (index >= length) {","missing":[{"startCol":12,"endCol":27}]},"1330":{"partial":false,"source":"            return {","missing":[{}]},"1331":{"partial":false,"source":"                type: Token.EOF,","missing":[{}]},"1332":{"partial":false,"source":"                lineNumber: lineNumber,","missing":[{}]},"1333":{"partial":false,"source":"                lineStart: lineStart,","missing":[{}]},"1334":{"partial":false,"source":"                range: [index, index]","missing":[{}]},"1335":{"partial":false,"source":"            };","missing":[{}]},"1338":{"partial":false,"source":"        token = scanPunctuator();","missing":[{"startCol":8,"endCol":33},{"startCol":16,"endCol":32}]},"1339":{"partial":false,"source":"        if (typeof token !== 'undefined') {","missing":[{"startCol":12,"endCol":40}]},"1340":{"partial":false,"source":"            return token;","missing":[{"startCol":12,"endCol":25}]},"1343":{"partial":false,"source":"        ch = source[index];","missing":[{"startCol":8,"endCol":27}]},"1345":{"partial":false,"source":"        if (ch === '\\'' || ch === '\"') {","missing":[{"startCol":12,"endCol":23},{"startCol":27,"endCol":37}]},"1346":{"partial":false,"source":"            return scanStringLiteral();","missing":[{"startCol":12,"endCol":39},{"startCol":19,"endCol":38}]},"1349":{"partial":false,"source":"        if (ch === '.' || isDecimalDigit(ch)) {","missing":[{"startCol":12,"endCol":22},{"startCol":26,"endCol":44}]},"1350":{"partial":false,"source":"            return scanNumericLiteral();","missing":[{"startCol":12,"endCol":40},{"startCol":19,"endCol":39}]},"1353":{"partial":false,"source":"        if (ch === '`') {","missing":[{"startCol":12,"endCol":22}]},"1354":{"partial":false,"source":"            return scanQuasi();","missing":[{"startCol":12,"endCol":31},{"startCol":19,"endCol":30}]},"1357":{"partial":false,"source":"        token = scanIdentifier();","missing":[{"startCol":8,"endCol":33},{"startCol":16,"endCol":32}]},"1358":{"partial":false,"source":"        if (typeof token !== 'undefined') {","missing":[{"startCol":12,"endCol":40}]},"1359":{"partial":false,"source":"            return token;","missing":[{"startCol":12,"endCol":25}]},"1362":{"partial":false,"source":"        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');","missing":[{"startCol":8,"endCol":59}]},"1366":{"partial":false,"source":"        var token;","missing":[{"startCol":8,"endCol":18}]},"1369":{"partial":false,"source":"            index = buffer.range[1];","missing":[{"startCol":12,"endCol":36}]},"1370":{"partial":false,"source":"            lineNumber = buffer.lineNumber;","missing":[{"startCol":12,"endCol":43}]},"1371":{"partial":false,"source":"            lineStart = buffer.lineStart;","missing":[{"startCol":12,"endCol":41}]},"1372":{"partial":false,"source":"            token = buffer;","missing":[{"startCol":12,"endCol":27}]},"1373":{"partial":false,"source":"            buffer = null;","missing":[{"startCol":12,"endCol":26}]},"1374":{"partial":false,"source":"            return token;","missing":[{"startCol":12,"endCol":25}]},"1377":{"partial":false,"source":"        buffer = null;","missing":[{"startCol":8,"endCol":22}]},"1378":{"partial":false,"source":"        return advance();","missing":[{"startCol":8,"endCol":25},{"startCol":15,"endCol":24}]},"1382":{"partial":false,"source":"        var pos, line, start;","missing":[{"startCol":8,"endCol":29}]},"1384":{"partial":false,"source":"        if (buffer !== null) {","missing":[{"startCol":12,"endCol":27}]},"1385":{"partial":false,"source":"            return buffer;","missing":[{"startCol":12,"endCol":26}]},"1388":{"partial":false,"source":"        pos = index;","missing":[{"startCol":8,"endCol":20}]},"1389":{"partial":false,"source":"        line = lineNumber;","missing":[{"startCol":8,"endCol":26}]},"1390":{"partial":false,"source":"        start = lineStart;","missing":[{"startCol":8,"endCol":26}]},"1391":{"partial":false,"source":"        buffer = advance();","missing":[{"startCol":8,"endCol":27},{"startCol":17,"endCol":26}]},"1392":{"partial":false,"source":"        index = pos;","missing":[{"startCol":8,"endCol":20}]},"1393":{"partial":false,"source":"        lineNumber = line;","missing":[{"startCol":8,"endCol":26}]},"1394":{"partial":false,"source":"        lineStart = start;","missing":[{"startCol":8,"endCol":26}]},"1396":{"partial":false,"source":"        return buffer;","missing":[{"startCol":8,"endCol":22}]},"1400":{"partial":false,"source":"        var adv, pos, line, start, result;","missing":[{"startCol":8,"endCol":42}]},"1403":{"partial":false,"source":"        adv = (typeof extra.advance === 'function') ? extra.advance : advance;","missing":[{"startCol":8,"endCol":78},{"startCol":14,"endCol":51},{"startCol":54,"endCol":67},{"startCol":70,"endCol":77}]},"1405":{"partial":false,"source":"        pos = index;","missing":[{"startCol":8,"endCol":20}]},"1406":{"partial":false,"source":"        line = lineNumber;","missing":[{"startCol":8,"endCol":26}]},"1407":{"partial":false,"source":"        start = lineStart;","missing":[{"startCol":8,"endCol":26}]},"1410":{"partial":false,"source":"        if (buffer === null) {","missing":[{"startCol":12,"endCol":27}]},"1411":{"partial":false,"source":"            buffer = adv();","missing":[{"startCol":12,"endCol":27},{"startCol":21,"endCol":26}]},"1413":{"partial":false,"source":"        index = buffer.range[1];","missing":[{"startCol":8,"endCol":32}]},"1414":{"partial":false,"source":"        lineNumber = buffer.lineNumber;","missing":[{"startCol":8,"endCol":39}]},"1415":{"partial":false,"source":"        lineStart = buffer.lineStart;","missing":[{"startCol":8,"endCol":37}]},"1418":{"partial":false,"source":"        result = adv();","missing":[{"startCol":8,"endCol":23},{"startCol":17,"endCol":22}]},"1419":{"partial":false,"source":"        index = pos;","missing":[{"startCol":8,"endCol":20}]},"1420":{"partial":false,"source":"        lineNumber = line;","missing":[{"startCol":8,"endCol":26}]},"1421":{"partial":false,"source":"        lineStart = start;","missing":[{"startCol":8,"endCol":26}]},"1423":{"partial":false,"source":"        return result;","missing":[{"startCol":8,"endCol":22}]},"1429":{"partial":false,"source":"        var pos, line, start, found;","missing":[{"startCol":8,"endCol":36}]},"1431":{"partial":false,"source":"        pos = index;","missing":[{"startCol":8,"endCol":20}]},"1432":{"partial":false,"source":"        line = lineNumber;","missing":[{"startCol":8,"endCol":26}]},"1433":{"partial":false,"source":"        start = lineStart;","missing":[{"startCol":8,"endCol":26}]},"1434":{"partial":false,"source":"        skipComment();","missing":[{"startCol":8,"endCol":21}]},"1435":{"partial":false,"source":"        found = lineNumber !== line;","missing":[{"startCol":8,"endCol":36},{"startCol":16,"endCol":35}]},"1436":{"partial":false,"source":"        index = pos;","missing":[{"startCol":8,"endCol":20}]},"1437":{"partial":false,"source":"        lineNumber = line;","missing":[{"startCol":8,"endCol":26}]},"1438":{"partial":false,"source":"        lineStart = start;","missing":[{"startCol":8,"endCol":26}]},"1440":{"partial":false,"source":"        return found;","missing":[{"startCol":8,"endCol":21}]},"1446":{"partial":false,"source":"        var error,","missing":[{}]},"1447":{"partial":false,"source":"            args = Array.prototype.slice.call(arguments, 2),","missing":[{"startCol":19,"endCol":59},{}]},"1448":{"partial":false,"source":"            msg = messageFormat.replace(","missing":[{}]},"1449":{"partial":false,"source":"                /%(\\d)/g,","missing":[{}]},"1450":{"partial":false,"source":"                function (whole, index) {","missing":[{}]},"1451":{"partial":false,"source":"                    return args[index] || '';","missing":[{"startCol":20,"endCol":45},{},{"startCol":27,"endCol":44}]},"1452":{"partial":false,"source":"                }","missing":[{}]},"1453":{"partial":false,"source":"            );","missing":[{}]},"1455":{"partial":false,"source":"        if (typeof token.lineNumber === 'number') {","missing":[{"startCol":12,"endCol":48}]},"1456":{"partial":false,"source":"            error = new Error('Line ' + token.lineNumber + ': ' + msg);","missing":[{"startCol":12,"endCol":71},{"startCol":30,"endCol":56}]},"1457":{"partial":false,"source":"            error.index = token.range[0];","missing":[{"startCol":12,"endCol":41}]},"1458":{"partial":false,"source":"            error.lineNumber = token.lineNumber;","missing":[{"startCol":12,"endCol":48}]},"1459":{"partial":false,"source":"            error.column = token.range[0] - lineStart + 1;","missing":[{"startCol":12,"endCol":58},{"startCol":27,"endCol":53}]},"1461":{"partial":false,"source":"            error = new Error('Line ' + lineNumber + ': ' + msg);","missing":[{"startCol":12,"endCol":65},{"startCol":30,"endCol":50}]},"1462":{"partial":false,"source":"            error.index = index;","missing":[{"startCol":12,"endCol":32}]},"1463":{"partial":false,"source":"            error.lineNumber = lineNumber;","missing":[{"startCol":12,"endCol":42}]},"1464":{"partial":false,"source":"            error.column = index - lineStart + 1;","missing":[{"startCol":12,"endCol":49},{"startCol":27,"endCol":44}]},"1467":{"partial":false,"source":"        throw error;","missing":[{"startCol":8,"endCol":20}]},"1472":{"partial":false,"source":"            throwError.apply(null, arguments);","missing":[{"startCol":12,"endCol":45}]},"1475":{"partial":false,"source":"                extra.errors.push(e);","missing":[{"startCol":16,"endCol":36}]},"1477":{"partial":false,"source":"                throw e;","missing":[{"startCol":16,"endCol":24}]},"1486":{"partial":false,"source":"        if (token.type === Token.EOF) {","missing":[{"startCol":12,"endCol":36}]},"1487":{"partial":false,"source":"            throwError(token, Messages.UnexpectedEOS);","missing":[{"startCol":12,"endCol":53}]},"1490":{"partial":false,"source":"        if (token.type === Token.NumericLiteral) {","missing":[{"startCol":12,"endCol":47}]},"1491":{"partial":false,"source":"            throwError(token, Messages.UnexpectedNumber);","missing":[{"startCol":12,"endCol":56}]},"1494":{"partial":false,"source":"        if (token.type === Token.StringLiteral) {","missing":[{"startCol":12,"endCol":46}]},"1495":{"partial":false,"source":"            throwError(token, Messages.UnexpectedString);","missing":[{"startCol":12,"endCol":56}]},"1498":{"partial":false,"source":"        if (token.type === Token.Identifier) {","missing":[{"startCol":12,"endCol":43}]},"1499":{"partial":false,"source":"            throwError(token, Messages.UnexpectedIdentifier);","missing":[{"startCol":12,"endCol":60}]},"1502":{"partial":false,"source":"        if (token.type === Token.Keyword) {","missing":[{"startCol":12,"endCol":40}]},"1503":{"partial":false,"source":"            if (isFutureReservedWord(token.value)) {","missing":[{"startCol":16,"endCol":49}]},"1504":{"partial":false,"source":"                throwError(token, Messages.UnexpectedReserved);","missing":[{"startCol":16,"endCol":62}]},"1505":{"partial":false,"source":"            } else if (strict && isStrictModeReservedWord(token.value)) {","missing":[{"startCol":23,"endCol":70},{"startCol":33,"endCol":70}]},"1506":{"partial":false,"source":"                throwError(token, Messages.StrictReservedWord);","missing":[{"startCol":16,"endCol":62}]},"1508":{"partial":false,"source":"            throwError(token, Messages.UnexpectedToken, token.value);","missing":[{"startCol":12,"endCol":68}]},"1511":{"partial":false,"source":"        if (token.type === Token.Quasi) {","missing":[{"startCol":12,"endCol":38}]},"1512":{"partial":false,"source":"            throwError(token, Messages.UnexpectedQuasi, token.value.raw);","missing":[{"startCol":12,"endCol":72}]},"1516":{"partial":false,"source":"        throwError(token, Messages.UnexpectedToken, token.value);","missing":[{"startCol":8,"endCol":64}]},"1523":{"partial":false,"source":"        var token = lex();","missing":[{"startCol":8,"endCol":26},{"startCol":20,"endCol":25}]},"1524":{"partial":false,"source":"        if (token.type !== Token.Punctuator || token.value !== value) {","missing":[{"startCol":12,"endCol":43},{"startCol":47,"endCol":68}]},"1525":{"partial":false,"source":"            throwUnexpected(token);","missing":[{"startCol":12,"endCol":34}]},"1533":{"partial":false,"source":"        var token = lex();","missing":[{"startCol":8,"endCol":26},{"startCol":20,"endCol":25}]},"1534":{"partial":false,"source":"        if (token.type !== Token.Keyword || token.value !== keyword) {","missing":[{"startCol":12,"endCol":40},{"startCol":44,"endCol":67}]},"1535":{"partial":false,"source":"            throwUnexpected(token);","missing":[{"startCol":12,"endCol":34}]},"1542":{"partial":false,"source":"        var token = lookahead();","missing":[{"startCol":8,"endCol":32},{"startCol":20,"endCol":31}]},"1543":{"partial":false,"source":"        return token.type === Token.Punctuator && token.value === value;","missing":[{"startCol":8,"endCol":72},{"startCol":15,"endCol":46},{"startCol":50,"endCol":71}]},"1549":{"partial":false,"source":"        var token = lookahead();","missing":[{"startCol":8,"endCol":32},{"startCol":20,"endCol":31}]},"1550":{"partial":false,"source":"        return token.type === Token.Keyword && token.value === keyword;","missing":[{"startCol":8,"endCol":71},{"startCol":15,"endCol":43},{"startCol":47,"endCol":70}]},"1557":{"partial":false,"source":"        var token = lookahead();","missing":[{"startCol":8,"endCol":32},{"startCol":20,"endCol":31}]},"1558":{"partial":false,"source":"        return token.type === Token.Identifier && token.value === keyword;","missing":[{"startCol":8,"endCol":74},{"startCol":15,"endCol":46},{"startCol":50,"endCol":73}]},"1564":{"partial":false,"source":"        var token = lookahead(),","missing":[{"startCol":20,"endCol":31},{}]},"1565":{"partial":false,"source":"            op = token.value;","missing":[{}]},"1567":{"partial":false,"source":"        if (token.type !== Token.Punctuator) {","missing":[{"startCol":12,"endCol":43}]},"1568":{"partial":false,"source":"            return false;","missing":[{"startCol":12,"endCol":25}]},"1570":{"partial":false,"source":"        return op === '=' ||","missing":[{},{"startCol":15,"endCol":25}]},"1571":{"partial":false,"source":"            op === '*=' ||","missing":[{},{"startCol":12,"endCol":23}]},"1572":{"partial":false,"source":"            op === '/=' ||","missing":[{},{"startCol":12,"endCol":23}]},"1573":{"partial":false,"source":"            op === '%=' ||","missing":[{"startCol":12,"endCol":23},{}]},"1574":{"partial":false,"source":"            op === '+=' ||","missing":[{},{"startCol":12,"endCol":23}]},"1575":{"partial":false,"source":"            op === '-=' ||","missing":[{},{"startCol":12,"endCol":23}]},"1576":{"partial":false,"source":"            op === '<<=' ||","missing":[{},{"startCol":12,"endCol":24}]},"1577":{"partial":false,"source":"            op === '>>=' ||","missing":[{},{"startCol":12,"endCol":24}]},"1578":{"partial":false,"source":"            op === '>>>=' ||","missing":[{"startCol":12,"endCol":25},{}]},"1579":{"partial":false,"source":"            op === '&=' ||","missing":[{},{"startCol":12,"endCol":23}]},"1580":{"partial":false,"source":"            op === '^=' ||","missing":[{},{"startCol":12,"endCol":23}]},"1581":{"partial":false,"source":"            op === '|=';","missing":[{},{"startCol":12,"endCol":23}]},"1585":{"partial":false,"source":"        var token, line;","missing":[{"startCol":8,"endCol":24}]},"1588":{"partial":false,"source":"        if (source[index] === ';') {","missing":[{"startCol":12,"endCol":33}]},"1589":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"1590":{"partial":false,"source":"            return;","missing":[{"startCol":12,"endCol":19}]},"1593":{"partial":false,"source":"        line = lineNumber;","missing":[{"startCol":8,"endCol":26}]},"1594":{"partial":false,"source":"        skipComment();","missing":[{"startCol":8,"endCol":21}]},"1595":{"partial":false,"source":"        if (lineNumber !== line) {","missing":[{"startCol":12,"endCol":31}]},"1596":{"partial":false,"source":"            return;","missing":[{"startCol":12,"endCol":19}]},"1599":{"partial":false,"source":"        if (match(';')) {","missing":[{"startCol":12,"endCol":22}]},"1600":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"1601":{"partial":false,"source":"            return;","missing":[{"startCol":12,"endCol":19}]},"1604":{"partial":false,"source":"        token = lookahead();","missing":[{"startCol":8,"endCol":28},{"startCol":16,"endCol":27}]},"1605":{"partial":false,"source":"        if (token.type !== Token.EOF && !match('}')) {","missing":[{"startCol":12,"endCol":36},{"startCol":41,"endCol":51}]},"1606":{"partial":false,"source":"            throwUnexpected(token);","missing":[{"startCol":12,"endCol":34}]},"1608":{"partial":false,"source":"        return;","missing":[{"startCol":8,"endCol":15}]},"1614":{"partial":false,"source":"        return expr.type === Syntax.Identifier || expr.type === Syntax.MemberExpression;","missing":[{"startCol":8,"endCol":88},{"startCol":15,"endCol":46},{"startCol":50,"endCol":87}]},"1618":{"partial":false,"source":"        return isLeftHandSide(expr) || expr.type === Syntax.ObjectPattern || expr.type === Syntax.ArrayPattern;","missing":[{"startCol":8,"endCol":111},{"startCol":15,"endCol":35},{"startCol":39,"endCol":73},{"startCol":77,"endCol":110}]},"1624":{"partial":false,"source":"        var elements = [];","missing":[{"startCol":8,"endCol":26}]},"1626":{"partial":false,"source":"        expect('[');","missing":[{"startCol":8,"endCol":19}]},"1628":{"partial":false,"source":"        while (!match(']')) {","missing":[{"startCol":16,"endCol":26}]},"1629":{"partial":false,"source":"            if (match(',')) {","missing":[{"startCol":16,"endCol":26}]},"1630":{"partial":false,"source":"                lex();","missing":[{"startCol":16,"endCol":21}]},"1631":{"partial":false,"source":"                elements.push(null);","missing":[{"startCol":16,"endCol":35}]},"1633":{"partial":false,"source":"                elements.push(parseAssignmentExpression());","missing":[{"startCol":16,"endCol":58},{"startCol":30,"endCol":57}]},"1635":{"partial":false,"source":"                if (!match(']')) {","missing":[{"startCol":21,"endCol":31}]},"1636":{"partial":false,"source":"                    expect(',');","missing":[{"startCol":20,"endCol":31}]},"1641":{"partial":false,"source":"        expect(']');","missing":[{"startCol":8,"endCol":19}]},"1643":{"partial":false,"source":"        return {","missing":[{}]},"1644":{"partial":false,"source":"            type: Syntax.ArrayExpression,","missing":[{}]},"1645":{"partial":false,"source":"            elements: elements","missing":[{}]},"1646":{"partial":false,"source":"        };","missing":[{}]},"1652":{"partial":false,"source":"        var previousStrict, previousYieldAllowed, body;","missing":[{"startCol":8,"endCol":55}]},"1654":{"partial":false,"source":"        previousStrict = strict;","missing":[{"startCol":8,"endCol":32}]},"1655":{"partial":false,"source":"        previousYieldAllowed = yieldAllowed;","missing":[{"startCol":8,"endCol":44}]},"1656":{"partial":false,"source":"        yieldAllowed = options.generator;","missing":[{"startCol":8,"endCol":41}]},"1657":{"partial":false,"source":"        body = parseConciseBody();","missing":[{"startCol":8,"endCol":34},{"startCol":15,"endCol":33}]},"1658":{"partial":false,"source":"        if (options.name && strict && isRestrictedWord(param[0].name)) {","missing":[{"startCol":12,"endCol":34},{"startCol":38,"endCol":69}]},"1659":{"partial":false,"source":"            throwError(options.name, Messages.StrictParamName);","missing":[{"startCol":12,"endCol":62}]},"1661":{"partial":false,"source":"        if (yieldAllowed && !yieldFound) {","missing":[{"startCol":12,"endCol":39}]},"1662":{"partial":false,"source":"            throwError({}, Messages.NoYieldInGenerator);","missing":[{"startCol":12,"endCol":55}]},"1664":{"partial":false,"source":"        strict = previousStrict;","missing":[{"startCol":8,"endCol":32}]},"1665":{"partial":false,"source":"        yieldAllowed = previousYieldAllowed;","missing":[{"startCol":8,"endCol":44}]},"1667":{"partial":false,"source":"        return {","missing":[{}]},"1668":{"partial":false,"source":"            type: Syntax.FunctionExpression,","missing":[{}]},"1669":{"partial":false,"source":"            id: null,","missing":[{}]},"1670":{"partial":false,"source":"            params: param,","missing":[{}]},"1671":{"partial":false,"source":"            defaults: [],","missing":[{}]},"1672":{"partial":false,"source":"            body: body,","missing":[{}]},"1673":{"partial":false,"source":"            rest: null,","missing":[{}]},"1674":{"partial":false,"source":"            generator: options.generator,","missing":[{}]},"1675":{"partial":false,"source":"            expression: body.type !== Syntax.BlockStatement","missing":[{"startCol":24,"endCol":59},{}]},"1676":{"partial":false,"source":"        };","missing":[{}]},"1680":{"partial":false,"source":"        var token, previousStrict, param, params, paramSet, method;","missing":[{"startCol":8,"endCol":67}]},"1682":{"partial":false,"source":"        previousStrict = strict;","missing":[{"startCol":8,"endCol":32}]},"1683":{"partial":false,"source":"        strict = true;","missing":[{"startCol":8,"endCol":22}]},"1684":{"partial":false,"source":"        params = [];","missing":[{"startCol":8,"endCol":20}]},"1686":{"partial":false,"source":"        expect('(');","missing":[{"startCol":8,"endCol":19}]},"1688":{"partial":false,"source":"        if (!match(')')) {","missing":[{"startCol":13,"endCol":23}]},"1689":{"partial":false,"source":"            paramSet = {};","missing":[{"startCol":12,"endCol":26}]},"1690":{"partial":false,"source":"            while (index < length) {","missing":[{"startCol":19,"endCol":33}]},"1691":{"partial":false,"source":"                token = lookahead();","missing":[{"startCol":16,"endCol":36},{"startCol":24,"endCol":35}]},"1692":{"partial":false,"source":"                param = parseVariableIdentifier();","missing":[{"startCol":16,"endCol":50},{"startCol":24,"endCol":49}]},"1693":{"partial":false,"source":"                if (isRestrictedWord(token.value)) {","missing":[{"startCol":20,"endCol":49}]},"1694":{"partial":false,"source":"                    throwError(token, Messages.StrictParamName);","missing":[{"startCol":20,"endCol":63}]},"1696":{"partial":false,"source":"                if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {","missing":[{"startCol":20,"endCol":79}]},"1697":{"partial":false,"source":"                    throwError(token, Messages.StrictParamDupe);","missing":[{"startCol":20,"endCol":63}]},"1699":{"partial":false,"source":"                params.push(param);","missing":[{"startCol":16,"endCol":34}]},"1700":{"partial":false,"source":"                paramSet[param.name] = true;","missing":[{"startCol":16,"endCol":44}]},"1701":{"partial":false,"source":"                if (match(')')) {","missing":[{"startCol":20,"endCol":30}]},"1704":{"partial":false,"source":"                expect(',');","missing":[{"startCol":16,"endCol":27}]},"1708":{"partial":false,"source":"        expect(')');","missing":[{"startCol":8,"endCol":19}]},"1710":{"partial":false,"source":"        method = parsePropertyFunction(params, { generator: options.generator });","missing":[{"startCol":8,"endCol":81},{"startCol":17,"endCol":80}]},"1712":{"partial":false,"source":"        strict = previousStrict;","missing":[{"startCol":8,"endCol":32}]},"1714":{"partial":false,"source":"        return method;","missing":[{"startCol":8,"endCol":22}]},"1718":{"partial":false,"source":"        var token = lex();","missing":[{"startCol":8,"endCol":26},{"startCol":20,"endCol":25}]},"1723":{"partial":false,"source":"        if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {","missing":[{"startCol":12,"endCol":46},{"startCol":50,"endCol":85}]},"1724":{"partial":false,"source":"            if (strict && token.octal) {","missing":[{"startCol":16,"endCol":37}]},"1725":{"partial":false,"source":"                throwError(token, Messages.StrictOctalLiteral);","missing":[{"startCol":16,"endCol":62}]},"1727":{"partial":false,"source":"            return createLiteral(token);","missing":[{"startCol":12,"endCol":40},{"startCol":19,"endCol":39}]},"1730":{"partial":false,"source":"        return {","missing":[{}]},"1731":{"partial":false,"source":"            type: Syntax.Identifier,","missing":[{}]},"1732":{"partial":false,"source":"            name: token.value","missing":[{}]},"1733":{"partial":false,"source":"        };","missing":[{}]},"1737":{"partial":false,"source":"        var token, key, id, param;","missing":[{"startCol":8,"endCol":34}]},"1739":{"partial":false,"source":"        token = lookahead();","missing":[{"startCol":8,"endCol":28},{"startCol":16,"endCol":27}]},"1741":{"partial":false,"source":"        if (token.type === Token.Identifier) {","missing":[{"startCol":12,"endCol":43}]},"1743":{"partial":false,"source":"            id = parseObjectPropertyKey();","missing":[{"startCol":12,"endCol":42},{"startCol":17,"endCol":41}]},"1747":{"partial":false,"source":"            if (token.value === 'get' && !(match(':') || match('('))) {","missing":[{"startCol":16,"endCol":37},{"startCol":42,"endCol":68},{"startCol":43,"endCol":53},{"startCol":57,"endCol":67}]},"1748":{"partial":false,"source":"                key = parseObjectPropertyKey();","missing":[{"startCol":16,"endCol":47},{"startCol":22,"endCol":46}]},"1749":{"partial":false,"source":"                expect('(');","missing":[{"startCol":16,"endCol":27}]},"1750":{"partial":false,"source":"                expect(')');","missing":[{"startCol":16,"endCol":27}]},"1751":{"partial":false,"source":"                return {","missing":[{}]},"1752":{"partial":false,"source":"                    type: Syntax.Property,","missing":[{}]},"1753":{"partial":false,"source":"                    key: key,","missing":[{}]},"1754":{"partial":false,"source":"                    value: parsePropertyFunction([], { generator: false }),","missing":[{},{"startCol":27,"endCol":74}]},"1755":{"partial":false,"source":"                    kind: 'get'","missing":[{}]},"1756":{"partial":false,"source":"                };","missing":[{}]},"1757":{"partial":false,"source":"            } else if (token.value === 'set' && !(match(':') || match('('))) {","missing":[{"startCol":23,"endCol":44},{"startCol":49,"endCol":75},{"startCol":50,"endCol":60},{"startCol":64,"endCol":74}]},"1758":{"partial":false,"source":"                key = parseObjectPropertyKey();","missing":[{"startCol":16,"endCol":47},{"startCol":22,"endCol":46}]},"1759":{"partial":false,"source":"                expect('(');","missing":[{"startCol":16,"endCol":27}]},"1760":{"partial":false,"source":"                token = lookahead();","missing":[{"startCol":16,"endCol":36},{"startCol":24,"endCol":35}]},"1761":{"partial":false,"source":"                param = [ parseVariableIdentifier() ];","missing":[{"startCol":16,"endCol":54},{"startCol":26,"endCol":51}]},"1762":{"partial":false,"source":"                expect(')');","missing":[{"startCol":16,"endCol":27}]},"1763":{"partial":false,"source":"                return {","missing":[{}]},"1764":{"partial":false,"source":"                    type: Syntax.Property,","missing":[{}]},"1765":{"partial":false,"source":"                    key: key,","missing":[{}]},"1766":{"partial":false,"source":"                    value: parsePropertyFunction(param, { generator: false, name: token }),","missing":[{},{"startCol":27,"endCol":90}]},"1767":{"partial":false,"source":"                    kind: 'set'","missing":[{}]},"1768":{"partial":false,"source":"                };","missing":[{}]},"1770":{"partial":false,"source":"                if (match(':')) {","missing":[{"startCol":20,"endCol":30}]},"1771":{"partial":false,"source":"                    lex();","missing":[{"startCol":20,"endCol":25}]},"1772":{"partial":false,"source":"                    return {","missing":[{}]},"1773":{"partial":false,"source":"                        type: Syntax.Property,","missing":[{}]},"1774":{"partial":false,"source":"                        key: id,","missing":[{}]},"1775":{"partial":false,"source":"                        value: parseAssignmentExpression(),","missing":[{"startCol":31,"endCol":58},{}]},"1776":{"partial":false,"source":"                        kind: 'init'","missing":[{}]},"1777":{"partial":false,"source":"                    };","missing":[{}]},"1778":{"partial":false,"source":"                } else if (match('(')) {","missing":[{"startCol":27,"endCol":37}]},"1779":{"partial":false,"source":"                    return {","missing":[{}]},"1780":{"partial":false,"source":"                        type: Syntax.Property,","missing":[{}]},"1781":{"partial":false,"source":"                        key: id,","missing":[{}]},"1782":{"partial":false,"source":"                        value: parsePropertyMethodFunction({ generator: false }),","missing":[{"startCol":31,"endCol":80},{}]},"1783":{"partial":false,"source":"                        kind: 'init',","missing":[{}]},"1784":{"partial":false,"source":"                        method: true","missing":[{}]},"1785":{"partial":false,"source":"                    };","missing":[{}]},"1787":{"partial":false,"source":"                    return {","missing":[{}]},"1788":{"partial":false,"source":"                        type: Syntax.Property,","missing":[{}]},"1789":{"partial":false,"source":"                        key: id,","missing":[{}]},"1790":{"partial":false,"source":"                        value: id,","missing":[{}]},"1791":{"partial":false,"source":"                        kind: 'init',","missing":[{}]},"1792":{"partial":false,"source":"                        shorthand: true","missing":[{}]},"1793":{"partial":false,"source":"                    };","missing":[{}]},"1796":{"partial":false,"source":"        } else if (token.type === Token.EOF || token.type === Token.Punctuator) {","missing":[{"startCol":19,"endCol":43},{"startCol":47,"endCol":78}]},"1797":{"partial":false,"source":"            if (!match('*')) {","missing":[{"startCol":17,"endCol":27}]},"1798":{"partial":false,"source":"                throwUnexpected(token);","missing":[{"startCol":16,"endCol":38}]},"1800":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"1802":{"partial":false,"source":"            id = parseObjectPropertyKey();","missing":[{"startCol":12,"endCol":42},{"startCol":17,"endCol":41}]},"1804":{"partial":false,"source":"            if (!match('(')) {","missing":[{"startCol":17,"endCol":27}]},"1805":{"partial":false,"source":"                throwUnexpected(lex());","missing":[{"startCol":16,"endCol":38},{"startCol":32,"endCol":37}]},"1808":{"partial":false,"source":"            return {","missing":[{}]},"1809":{"partial":false,"source":"                type: Syntax.Property,","missing":[{}]},"1810":{"partial":false,"source":"                key: id,","missing":[{}]},"1811":{"partial":false,"source":"                value: parsePropertyMethodFunction({ generator: true }),","missing":[{},{"startCol":23,"endCol":71}]},"1812":{"partial":false,"source":"                kind: 'init',","missing":[{}]},"1813":{"partial":false,"source":"                method: true","missing":[{}]},"1814":{"partial":false,"source":"            };","missing":[{}]},"1816":{"partial":false,"source":"            key = parseObjectPropertyKey();","missing":[{"startCol":12,"endCol":43},{"startCol":18,"endCol":42}]},"1817":{"partial":false,"source":"            if (match(':')) {","missing":[{"startCol":16,"endCol":26}]},"1818":{"partial":false,"source":"                lex();","missing":[{"startCol":16,"endCol":21}]},"1819":{"partial":false,"source":"                return {","missing":[{}]},"1820":{"partial":false,"source":"                    type: Syntax.Property,","missing":[{}]},"1821":{"partial":false,"source":"                    key: key,","missing":[{}]},"1822":{"partial":false,"source":"                    value: parseAssignmentExpression(),","missing":[{"startCol":27,"endCol":54},{}]},"1823":{"partial":false,"source":"                    kind: 'init'","missing":[{}]},"1824":{"partial":false,"source":"                };","missing":[{}]},"1825":{"partial":false,"source":"            } else if (match('(')) {","missing":[{"startCol":23,"endCol":33}]},"1826":{"partial":false,"source":"                return {","missing":[{}]},"1827":{"partial":false,"source":"                    type: Syntax.Property,","missing":[{}]},"1828":{"partial":false,"source":"                    key: key,","missing":[{}]},"1829":{"partial":false,"source":"                    value: parsePropertyMethodFunction({ generator: false }),","missing":[{"startCol":27,"endCol":76},{}]},"1830":{"partial":false,"source":"                    kind: 'init',","missing":[{}]},"1831":{"partial":false,"source":"                    method: true","missing":[{}]},"1832":{"partial":false,"source":"                };","missing":[{}]},"1834":{"partial":false,"source":"                return {","missing":[{}]},"1835":{"partial":false,"source":"                    type: Syntax.Property,","missing":[{}]},"1836":{"partial":false,"source":"                    key: key,","missing":[{}]},"1837":{"partial":false,"source":"                    value: key,","missing":[{}]},"1838":{"partial":false,"source":"                    kind: 'init',","missing":[{}]},"1839":{"partial":false,"source":"                    shorthand: true","missing":[{}]},"1840":{"partial":false,"source":"                };","missing":[{}]},"1846":{"partial":false,"source":"        var properties = [], property, name, kind, map = {}, toString = String;","missing":[{"startCol":8,"endCol":79}]},"1848":{"partial":false,"source":"        expect('{');","missing":[{"startCol":8,"endCol":19}]},"1850":{"partial":false,"source":"        while (!match('}')) {","missing":[{"startCol":16,"endCol":26}]},"1851":{"partial":false,"source":"            property = parseObjectProperty();","missing":[{"startCol":12,"endCol":45},{"startCol":23,"endCol":44}]},"1853":{"partial":false,"source":"            if (property.key.type === Syntax.Identifier) {","missing":[{"startCol":16,"endCol":55}]},"1854":{"partial":false,"source":"                name = property.key.name;","missing":[{"startCol":16,"endCol":41}]},"1856":{"partial":false,"source":"                name = toString(property.key.value);","missing":[{"startCol":16,"endCol":52},{"startCol":23,"endCol":51}]},"1858":{"partial":false,"source":"            kind = (property.kind === 'init') ? PropertyKind.Data : (property.kind === 'get') ? PropertyKind.Get : PropertyKind.Set;","missing":[{"startCol":12,"endCol":132},{"startCol":19,"endCol":45},{"startCol":48,"endCol":65},{"startCol":68,"endCol":93},{"startCol":96,"endCol":112},{"startCol":115,"endCol":131}]},"1859":{"partial":false,"source":"            if (Object.prototype.hasOwnProperty.call(map, name)) {","missing":[{"startCol":16,"endCol":63}]},"1860":{"partial":false,"source":"                if (map[name] === PropertyKind.Data) {","missing":[{"startCol":20,"endCol":51}]},"1861":{"partial":false,"source":"                    if (strict && kind === PropertyKind.Data) {","missing":[{"startCol":24,"endCol":60},{"startCol":34,"endCol":60}]},"1862":{"partial":false,"source":"                        throwErrorTolerant({}, Messages.StrictDuplicateProperty);","missing":[{"startCol":24,"endCol":80}]},"1863":{"partial":false,"source":"                    } else if (kind !== PropertyKind.Data) {","missing":[{"startCol":31,"endCol":57}]},"1864":{"partial":false,"source":"                        throwError({}, Messages.AccessorDataProperty);","missing":[{"startCol":24,"endCol":69}]},"1867":{"partial":false,"source":"                    if (kind === PropertyKind.Data) {","missing":[{"startCol":24,"endCol":50}]},"1868":{"partial":false,"source":"                        throwError({}, Messages.AccessorDataProperty);","missing":[{"startCol":24,"endCol":69}]},"1869":{"partial":false,"source":"                    } else if (map[name] & kind) {","missing":[{"startCol":31,"endCol":47}]},"1870":{"partial":false,"source":"                        throwError({}, Messages.AccessorGetSet);","missing":[{"startCol":24,"endCol":63}]},"1873":{"partial":false,"source":"                map[name] |= kind;","missing":[{"startCol":16,"endCol":34}]},"1875":{"partial":false,"source":"                map[name] = kind;","missing":[{"startCol":16,"endCol":33}]},"1878":{"partial":false,"source":"            properties.push(property);","missing":[{"startCol":12,"endCol":37}]},"1880":{"partial":false,"source":"            if (!match('}')) {","missing":[{"startCol":17,"endCol":27}]},"1881":{"partial":false,"source":"                expect(',');","missing":[{"startCol":16,"endCol":27}]},"1885":{"partial":false,"source":"        expect('}');","missing":[{"startCol":8,"endCol":19}]},"1887":{"partial":false,"source":"        return {","missing":[{}]},"1888":{"partial":false,"source":"            type: Syntax.ObjectExpression,","missing":[{}]},"1889":{"partial":false,"source":"            properties: properties","missing":[{}]},"1890":{"partial":false,"source":"        };","missing":[{}]},"1894":{"partial":false,"source":"        var token = scanQuasiElement(option);","missing":[{"startCol":8,"endCol":45},{"startCol":20,"endCol":44}]},"1895":{"partial":false,"source":"        if (strict && token.octal) {","missing":[{"startCol":12,"endCol":33}]},"1896":{"partial":false,"source":"            throwError(token, Messages.StrictOctalLiteral);","missing":[{"startCol":12,"endCol":58}]},"1898":{"partial":false,"source":"        return {","missing":[{}]},"1899":{"partial":false,"source":"            type: Syntax.QuasiElement,","missing":[{}]},"1900":{"partial":false,"source":"            value: {","missing":[{}]},"1901":{"partial":false,"source":"                raw: token.value.raw,","missing":[{}]},"1902":{"partial":false,"source":"                cooked: token.value.cooked","missing":[{}]},"1903":{"partial":false,"source":"            },","missing":[{}]},"1904":{"partial":false,"source":"            tail: token.tail","missing":[{}]},"1905":{"partial":false,"source":"        };","missing":[{}]},"1909":{"partial":false,"source":"        var quasi, quasis, expressions;","missing":[{"startCol":8,"endCol":39}]},"1911":{"partial":false,"source":"        quasi = parseQuasiElement({ head: true });","missing":[{"startCol":8,"endCol":50},{"startCol":16,"endCol":49}]},"1912":{"partial":false,"source":"        quasis = [ quasi ];","missing":[{"startCol":8,"endCol":27}]},"1913":{"partial":false,"source":"        expressions = [];","missing":[{"startCol":8,"endCol":25}]},"1916":{"partial":false,"source":"            expressions.push(parseExpression());","missing":[{"startCol":12,"endCol":47},{"startCol":29,"endCol":46}]},"1917":{"partial":false,"source":"            quasi = parseQuasiElement({ head: false });","missing":[{"startCol":12,"endCol":55},{"startCol":20,"endCol":54}]},"1918":{"partial":false,"source":"            quasis.push(quasi);","missing":[{"startCol":12,"endCol":30}]},"1921":{"partial":false,"source":"        return {","missing":[{}]},"1922":{"partial":false,"source":"            type: Syntax.QuasiLiteral,","missing":[{}]},"1923":{"partial":false,"source":"            quasis: quasis,","missing":[{}]},"1924":{"partial":false,"source":"            expressions: expressions","missing":[{}]},"1925":{"partial":false,"source":"        };","missing":[{}]},"1931":{"partial":false,"source":"        var expr,","missing":[{}]},"1932":{"partial":false,"source":"            token = lookahead(),","missing":[{},{"startCol":20,"endCol":31}]},"1933":{"partial":false,"source":"            type = token.type;","missing":[{}]},"1935":{"partial":false,"source":"        if (type === Token.Identifier) {","missing":[{"startCol":12,"endCol":37}]},"1936":{"partial":false,"source":"            return {","missing":[{}]},"1937":{"partial":false,"source":"                type: Syntax.Identifier,","missing":[{}]},"1938":{"partial":false,"source":"                name: lex().value","missing":[{"startCol":25,"endCol":27},{}]},"1939":{"partial":false,"source":"            };","missing":[{}]},"1942":{"partial":false,"source":"        if (type === Token.StringLiteral || type === Token.NumericLiteral) {","missing":[{"startCol":12,"endCol":40},{"startCol":44,"endCol":73}]},"1943":{"partial":false,"source":"            if (strict && token.octal) {","missing":[{"startCol":16,"endCol":37}]},"1944":{"partial":false,"source":"                throwErrorTolerant(token, Messages.StrictOctalLiteral);","missing":[{"startCol":16,"endCol":70}]},"1946":{"partial":false,"source":"            return createLiteral(lex());","missing":[{"startCol":12,"endCol":40},{"startCol":19,"endCol":39},{"startCol":33,"endCol":38}]},"1949":{"partial":false,"source":"        if (type === Token.Keyword) {","missing":[{"startCol":12,"endCol":34}]},"1950":{"partial":false,"source":"            if (matchKeyword('this')) {","missing":[{"startCol":16,"endCol":36}]},"1951":{"partial":false,"source":"                lex();","missing":[{"startCol":16,"endCol":21}]},"1952":{"partial":false,"source":"                return {","missing":[{}]},"1953":{"partial":false,"source":"                    type: Syntax.ThisExpression","missing":[{}]},"1954":{"partial":false,"source":"                };","missing":[{}]},"1957":{"partial":false,"source":"            if (matchKeyword('function')) {","missing":[{"startCol":16,"endCol":40}]},"1958":{"partial":false,"source":"                return parseFunctionExpression();","missing":[{"startCol":16,"endCol":49},{"startCol":23,"endCol":48}]},"1961":{"partial":false,"source":"            if (matchKeyword('class')) {","missing":[{"startCol":16,"endCol":37}]},"1962":{"partial":false,"source":"                return parseClassExpression();","missing":[{"startCol":16,"endCol":46},{"startCol":23,"endCol":45}]},"1965":{"partial":false,"source":"            if (matchKeyword('super')) {","missing":[{"startCol":16,"endCol":37}]},"1966":{"partial":false,"source":"                lex();","missing":[{"startCol":16,"endCol":21}]},"1967":{"partial":false,"source":"                return {","missing":[{}]},"1968":{"partial":false,"source":"                    type: Syntax.Identifier,","missing":[{}]},"1969":{"partial":false,"source":"                    name: 'super'","missing":[{}]},"1970":{"partial":false,"source":"                };","missing":[{}]},"1974":{"partial":false,"source":"        if (type === Token.BooleanLiteral) {","missing":[{"startCol":12,"endCol":41}]},"1975":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"1976":{"partial":false,"source":"            token.value = (token.value === 'true');","missing":[{"startCol":12,"endCol":51},{"startCol":26,"endCol":50}]},"1977":{"partial":false,"source":"            return createLiteral(token);","missing":[{"startCol":12,"endCol":40},{"startCol":19,"endCol":39}]},"1980":{"partial":false,"source":"        if (type === Token.NullLiteral) {","missing":[{"startCol":12,"endCol":38}]},"1981":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"1982":{"partial":false,"source":"            token.value = null;","missing":[{"startCol":12,"endCol":31}]},"1983":{"partial":false,"source":"            return createLiteral(token);","missing":[{"startCol":12,"endCol":40},{"startCol":19,"endCol":39}]},"1986":{"partial":false,"source":"        if (match('[')) {","missing":[{"startCol":12,"endCol":22}]},"1987":{"partial":false,"source":"            return parseArrayInitialiser();","missing":[{"startCol":12,"endCol":43},{"startCol":19,"endCol":42}]},"1990":{"partial":false,"source":"        if (match('{')) {","missing":[{"startCol":12,"endCol":22}]},"1991":{"partial":false,"source":"            return parseObjectInitialiser();","missing":[{"startCol":12,"endCol":44},{"startCol":19,"endCol":43}]},"1994":{"partial":false,"source":"        if (match('(')) {","missing":[{"startCol":12,"endCol":22}]},"1995":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"1996":{"partial":false,"source":"            state.lastParenthesized = expr = parseExpression();","missing":[{"startCol":12,"endCol":63},{"startCol":45,"endCol":62}]},"1997":{"partial":false,"source":"            state.parenthesizedCount += 1;","missing":[{"startCol":12,"endCol":42}]},"1998":{"partial":false,"source":"            expect(')');","missing":[{"startCol":12,"endCol":23}]},"1999":{"partial":false,"source":"            return expr;","missing":[{"startCol":12,"endCol":24}]},"2002":{"partial":false,"source":"        if (match('/') || match('/=')) {","missing":[{"startCol":12,"endCol":22},{"startCol":26,"endCol":37}]},"2003":{"partial":false,"source":"            return createLiteral(scanRegExp());","missing":[{"startCol":12,"endCol":47},{"startCol":19,"endCol":46},{"startCol":33,"endCol":45}]},"2006":{"partial":false,"source":"        if (type === Token.Quasi) {","missing":[{"startCol":12,"endCol":32}]},"2007":{"partial":false,"source":"            return parseQuasiLiteral();","missing":[{"startCol":12,"endCol":39},{"startCol":19,"endCol":38}]},"2010":{"partial":false,"source":"        return throwUnexpected(lex());","missing":[{"startCol":8,"endCol":38},{"startCol":15,"endCol":37},{"startCol":31,"endCol":36}]},"2016":{"partial":false,"source":"        var args = [];","missing":[{"startCol":8,"endCol":22}]},"2018":{"partial":false,"source":"        expect('(');","missing":[{"startCol":8,"endCol":19}]},"2020":{"partial":false,"source":"        if (!match(')')) {","missing":[{"startCol":13,"endCol":23}]},"2021":{"partial":false,"source":"            while (index < length) {","missing":[{"startCol":19,"endCol":33}]},"2022":{"partial":false,"source":"                args.push(parseAssignmentExpression());","missing":[{"startCol":16,"endCol":54},{"startCol":26,"endCol":53}]},"2023":{"partial":false,"source":"                if (match(')')) {","missing":[{"startCol":20,"endCol":30}]},"2026":{"partial":false,"source":"                expect(',');","missing":[{"startCol":16,"endCol":27}]},"2030":{"partial":false,"source":"        expect(')');","missing":[{"startCol":8,"endCol":19}]},"2032":{"partial":false,"source":"        return args;","missing":[{"startCol":8,"endCol":20}]},"2036":{"partial":false,"source":"        var token = lex();","missing":[{"startCol":8,"endCol":26},{"startCol":20,"endCol":25}]},"2038":{"partial":false,"source":"        if (!isIdentifierName(token)) {","missing":[{"startCol":13,"endCol":36}]},"2039":{"partial":false,"source":"            throwUnexpected(token);","missing":[{"startCol":12,"endCol":34}]},"2042":{"partial":false,"source":"        return {","missing":[{}]},"2043":{"partial":false,"source":"            type: Syntax.Identifier,","missing":[{}]},"2044":{"partial":false,"source":"            name: token.value","missing":[{}]},"2045":{"partial":false,"source":"        };","missing":[{}]},"2049":{"partial":false,"source":"        return {","missing":[{}]},"2050":{"partial":false,"source":"            type: Syntax.MemberExpression,","missing":[{}]},"2051":{"partial":false,"source":"            computed: false,","missing":[{}]},"2052":{"partial":false,"source":"            object: object,","missing":[{}]},"2053":{"partial":false,"source":"            property: parseNonComputedProperty()","missing":[{},{"startCol":22,"endCol":48}]},"2054":{"partial":false,"source":"        };","missing":[{}]},"2058":{"partial":false,"source":"        var property, expr;","missing":[{"startCol":8,"endCol":27}]},"2060":{"partial":false,"source":"        expect('[');","missing":[{"startCol":8,"endCol":19}]},"2061":{"partial":false,"source":"        property = parseExpression();","missing":[{"startCol":8,"endCol":37},{"startCol":19,"endCol":36}]},"2062":{"partial":false,"source":"        expr = {","missing":[{}]},"2063":{"partial":false,"source":"            type: Syntax.MemberExpression,","missing":[{}]},"2064":{"partial":false,"source":"            computed: true,","missing":[{}]},"2065":{"partial":false,"source":"            object: object,","missing":[{}]},"2066":{"partial":false,"source":"            property: property","missing":[{}]},"2067":{"partial":false,"source":"        };","missing":[{}]},"2068":{"partial":false,"source":"        expect(']');","missing":[{"startCol":8,"endCol":19}]},"2069":{"partial":false,"source":"        return expr;","missing":[{"startCol":8,"endCol":20}]},"2073":{"partial":false,"source":"        return {","missing":[{}]},"2074":{"partial":false,"source":"            type: Syntax.TaggedQuasiExpression,","missing":[{}]},"2075":{"partial":false,"source":"            tag: tag,","missing":[{}]},"2076":{"partial":false,"source":"            quasi: parseQuasiLiteral()","missing":[{"startCol":19,"endCol":38},{}]},"2077":{"partial":false,"source":"        };","missing":[{}]},"2081":{"partial":false,"source":"        return {","missing":[{}]},"2082":{"partial":false,"source":"            type: Syntax.CallExpression,","missing":[{}]},"2083":{"partial":false,"source":"            callee: object,","missing":[{}]},"2084":{"partial":false,"source":"            'arguments': parseArguments()","missing":[{},{"startCol":25,"endCol":41}]},"2085":{"partial":false,"source":"        };","missing":[{}]},"2089":{"partial":false,"source":"        var expr;","missing":[{"startCol":8,"endCol":17}]},"2091":{"partial":false,"source":"        expectKeyword('new');","missing":[{"startCol":8,"endCol":28}]},"2093":{"partial":false,"source":"        expr = {","missing":[{}]},"2094":{"partial":false,"source":"            type: Syntax.NewExpression,","missing":[{}]},"2095":{"partial":false,"source":"            callee: parseLeftHandSideExpression(),","missing":[{"startCol":20,"endCol":49},{}]},"2096":{"partial":false,"source":"            'arguments': []","missing":[{}]},"2097":{"partial":false,"source":"        };","missing":[{}]},"2099":{"partial":false,"source":"        if (match('(')) {","missing":[{"startCol":12,"endCol":22}]},"2100":{"partial":false,"source":"            expr['arguments'] = parseArguments();","missing":[{"startCol":12,"endCol":49},{"startCol":32,"endCol":48}]},"2103":{"partial":false,"source":"        return expr;","missing":[{"startCol":8,"endCol":20}]},"2107":{"partial":false,"source":"        var useNew, expr;","missing":[{"startCol":8,"endCol":25}]},"2109":{"partial":false,"source":"        useNew = matchKeyword('new');","missing":[{"startCol":8,"endCol":37},{"startCol":17,"endCol":36}]},"2110":{"partial":false,"source":"        expr = useNew ? parseNewExpression() : parsePrimaryExpression();","missing":[{"startCol":8,"endCol":72},{"startCol":24,"endCol":44},{"startCol":47,"endCol":71}]},"2112":{"partial":false,"source":"        while (index < length) {","missing":[{"startCol":15,"endCol":29}]},"2113":{"partial":false,"source":"            if (match('.')) {","missing":[{"startCol":16,"endCol":26}]},"2114":{"partial":false,"source":"                lex();","missing":[{"startCol":16,"endCol":21}]},"2115":{"partial":false,"source":"                expr = parseNonComputedMember(expr);","missing":[{"startCol":16,"endCol":52},{"startCol":23,"endCol":51}]},"2116":{"partial":false,"source":"            } else if (match('[')) {","missing":[{"startCol":23,"endCol":33}]},"2117":{"partial":false,"source":"                expr = parseComputedMember(expr);","missing":[{"startCol":16,"endCol":49},{"startCol":23,"endCol":48}]},"2118":{"partial":false,"source":"            } else if (match('(')) {","missing":[{"startCol":23,"endCol":33}]},"2119":{"partial":false,"source":"                expr = parseCallMember(expr);","missing":[{"startCol":16,"endCol":45},{"startCol":23,"endCol":44}]},"2120":{"partial":false,"source":"            } else if (lookahead().type === Token.Quasi) {","missing":[{"startCol":23,"endCol":55},{"startCol":32,"endCol":34}]},"2121":{"partial":false,"source":"                expr = parseTaggedQuasi(expr);","missing":[{"startCol":16,"endCol":46},{"startCol":23,"endCol":45}]},"2127":{"partial":false,"source":"        return expr;","missing":[{"startCol":8,"endCol":20}]},"2131":{"partial":false,"source":"        var useNew, expr;","missing":[{"startCol":8,"endCol":25}]},"2133":{"partial":false,"source":"        useNew = matchKeyword('new');","missing":[{"startCol":8,"endCol":37},{"startCol":17,"endCol":36}]},"2134":{"partial":false,"source":"        expr = useNew ? parseNewExpression() : parsePrimaryExpression();","missing":[{"startCol":8,"endCol":72},{"startCol":24,"endCol":44},{"startCol":47,"endCol":71}]},"2136":{"partial":false,"source":"        while (index < length) {","missing":[{"startCol":15,"endCol":29}]},"2137":{"partial":false,"source":"            if (match('.')) {","missing":[{"startCol":16,"endCol":26}]},"2138":{"partial":false,"source":"                lex();","missing":[{"startCol":16,"endCol":21}]},"2139":{"partial":false,"source":"                expr = parseNonComputedMember(expr);","missing":[{"startCol":16,"endCol":52},{"startCol":23,"endCol":51}]},"2140":{"partial":false,"source":"            } else if (match('[')) {","missing":[{"startCol":23,"endCol":33}]},"2141":{"partial":false,"source":"                expr = parseComputedMember(expr);","missing":[{"startCol":16,"endCol":49},{"startCol":23,"endCol":48}]},"2142":{"partial":false,"source":"            } else if (lookahead().type === Token.Quasi) {","missing":[{"startCol":23,"endCol":55},{"startCol":32,"endCol":34}]},"2143":{"partial":false,"source":"                expr = parseTaggedQuasi(expr);","missing":[{"startCol":16,"endCol":46},{"startCol":23,"endCol":45}]},"2149":{"partial":false,"source":"        return expr;","missing":[{"startCol":8,"endCol":20}]},"2155":{"partial":false,"source":"        var expr = parseLeftHandSideExpressionAllowCall();","missing":[{"startCol":8,"endCol":58},{"startCol":19,"endCol":57}]},"2157":{"partial":false,"source":"        if ((match('++') || match('--')) && !peekLineTerminator()) {","missing":[{"startCol":12,"endCol":40},{"startCol":13,"endCol":24},{"startCol":28,"endCol":39},{"startCol":45,"endCol":65}]},"2159":{"partial":false,"source":"            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {","missing":[{"startCol":16,"endCol":57},{"startCol":26,"endCol":57},{"startCol":61,"endCol":88}]},"2160":{"partial":false,"source":"                throwError({}, Messages.StrictLHSPostfix);","missing":[{"startCol":16,"endCol":57}]},"2163":{"partial":false,"source":"            if (!isLeftHandSide(expr)) {","missing":[{"startCol":17,"endCol":37}]},"2164":{"partial":false,"source":"                throwError({}, Messages.InvalidLHSInAssignment);","missing":[{"startCol":16,"endCol":63}]},"2167":{"partial":false,"source":"            expr = {","missing":[{}]},"2168":{"partial":false,"source":"                type: Syntax.UpdateExpression,","missing":[{}]},"2169":{"partial":false,"source":"                operator: lex().value,","missing":[{"startCol":29,"endCol":31},{}]},"2170":{"partial":false,"source":"                argument: expr,","missing":[{}]},"2171":{"partial":false,"source":"                prefix: false","missing":[{}]},"2172":{"partial":false,"source":"            };","missing":[{}]},"2175":{"partial":false,"source":"        return expr;","missing":[{"startCol":8,"endCol":20}]},"2181":{"partial":false,"source":"        var token, expr;","missing":[{"startCol":8,"endCol":24}]},"2183":{"partial":false,"source":"        if (match('++') || match('--')) {","missing":[{"startCol":12,"endCol":23},{"startCol":27,"endCol":38}]},"2184":{"partial":false,"source":"            token = lex();","missing":[{"startCol":12,"endCol":26},{"startCol":20,"endCol":25}]},"2185":{"partial":false,"source":"            expr = parseUnaryExpression();","missing":[{"startCol":12,"endCol":42},{"startCol":19,"endCol":41}]},"2187":{"partial":false,"source":"            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {","missing":[{"startCol":16,"endCol":57},{"startCol":26,"endCol":57},{"startCol":61,"endCol":88}]},"2188":{"partial":false,"source":"                throwError({}, Messages.StrictLHSPrefix);","missing":[{"startCol":16,"endCol":56}]},"2191":{"partial":false,"source":"            if (!isLeftHandSide(expr)) {","missing":[{"startCol":17,"endCol":37}]},"2192":{"partial":false,"source":"                throwError({}, Messages.InvalidLHSInAssignment);","missing":[{"startCol":16,"endCol":63}]},"2195":{"partial":false,"source":"            expr = {","missing":[{}]},"2196":{"partial":false,"source":"                type: Syntax.UpdateExpression,","missing":[{}]},"2197":{"partial":false,"source":"                operator: token.value,","missing":[{}]},"2198":{"partial":false,"source":"                argument: expr,","missing":[{}]},"2199":{"partial":false,"source":"                prefix: true","missing":[{}]},"2200":{"partial":false,"source":"            };","missing":[{}]},"2201":{"partial":false,"source":"            return expr;","missing":[{"startCol":12,"endCol":24}]},"2204":{"partial":false,"source":"        if (match('+') || match('-') || match('~') || match('!')) {","missing":[{"startCol":12,"endCol":22},{"startCol":26,"endCol":36},{"startCol":40,"endCol":50},{"startCol":54,"endCol":64}]},"2205":{"partial":false,"source":"            expr = {","missing":[{}]},"2206":{"partial":false,"source":"                type: Syntax.UnaryExpression,","missing":[{}]},"2207":{"partial":false,"source":"                operator: lex().value,","missing":[{"startCol":29,"endCol":31},{}]},"2208":{"partial":false,"source":"                argument: parseUnaryExpression()","missing":[{},{"startCol":26,"endCol":48}]},"2209":{"partial":false,"source":"            };","missing":[{}]},"2210":{"partial":false,"source":"            return expr;","missing":[{"startCol":12,"endCol":24}]},"2213":{"partial":false,"source":"        if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {","missing":[{"startCol":12,"endCol":34},{"startCol":38,"endCol":58},{"startCol":62,"endCol":84}]},"2214":{"partial":false,"source":"            expr = {","missing":[{}]},"2215":{"partial":false,"source":"                type: Syntax.UnaryExpression,","missing":[{}]},"2216":{"partial":false,"source":"                operator: lex().value,","missing":[{"startCol":29,"endCol":31},{}]},"2217":{"partial":false,"source":"                argument: parseUnaryExpression()","missing":[{},{"startCol":26,"endCol":48}]},"2218":{"partial":false,"source":"            };","missing":[{}]},"2219":{"partial":false,"source":"            if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {","missing":[{"startCol":16,"endCol":52},{"startCol":26,"endCol":52},{"startCol":56,"endCol":96}]},"2220":{"partial":false,"source":"                throwErrorTolerant({}, Messages.StrictDelete);","missing":[{"startCol":16,"endCol":61}]},"2222":{"partial":false,"source":"            return expr;","missing":[{"startCol":12,"endCol":24}]},"2225":{"partial":false,"source":"        return parsePostfixExpression();","missing":[{"startCol":8,"endCol":40},{"startCol":15,"endCol":39}]},"2231":{"partial":false,"source":"        var expr = parseUnaryExpression();","missing":[{"startCol":8,"endCol":42},{"startCol":19,"endCol":41}]},"2233":{"partial":false,"source":"        while (match('*') || match('/') || match('%')) {","missing":[{"startCol":15,"endCol":25},{"startCol":29,"endCol":39},{"startCol":43,"endCol":53}]},"2234":{"partial":false,"source":"            expr = {","missing":[{}]},"2235":{"partial":false,"source":"                type: Syntax.BinaryExpression,","missing":[{}]},"2236":{"partial":false,"source":"                operator: lex().value,","missing":[{},{"startCol":29,"endCol":31}]},"2237":{"partial":false,"source":"                left: expr,","missing":[{}]},"2238":{"partial":false,"source":"                right: parseUnaryExpression()","missing":[{},{"startCol":23,"endCol":45}]},"2239":{"partial":false,"source":"            };","missing":[{}]},"2242":{"partial":false,"source":"        return expr;","missing":[{"startCol":8,"endCol":20}]},"2248":{"partial":false,"source":"        var expr = parseMultiplicativeExpression();","missing":[{"startCol":8,"endCol":51},{"startCol":19,"endCol":50}]},"2250":{"partial":false,"source":"        while (match('+') || match('-')) {","missing":[{"startCol":15,"endCol":25},{"startCol":29,"endCol":39}]},"2251":{"partial":false,"source":"            expr = {","missing":[{}]},"2252":{"partial":false,"source":"                type: Syntax.BinaryExpression,","missing":[{}]},"2253":{"partial":false,"source":"                operator: lex().value,","missing":[{"startCol":29,"endCol":31},{}]},"2254":{"partial":false,"source":"                left: expr,","missing":[{}]},"2255":{"partial":false,"source":"                right: parseMultiplicativeExpression()","missing":[{"startCol":23,"endCol":54},{}]},"2256":{"partial":false,"source":"            };","missing":[{}]},"2259":{"partial":false,"source":"        return expr;","missing":[{"startCol":8,"endCol":20}]},"2265":{"partial":false,"source":"        var expr = parseAdditiveExpression();","missing":[{"startCol":8,"endCol":45},{"startCol":19,"endCol":44}]},"2267":{"partial":false,"source":"        while (match('<<') || match('>>') || match('>>>')) {","missing":[{"startCol":15,"endCol":26},{"startCol":30,"endCol":41},{"startCol":45,"endCol":57}]},"2268":{"partial":false,"source":"            expr = {","missing":[{}]},"2269":{"partial":false,"source":"                type: Syntax.BinaryExpression,","missing":[{}]},"2270":{"partial":false,"source":"                operator: lex().value,","missing":[{"startCol":29,"endCol":31},{}]},"2271":{"partial":false,"source":"                left: expr,","missing":[{}]},"2272":{"partial":false,"source":"                right: parseAdditiveExpression()","missing":[{"startCol":23,"endCol":48},{}]},"2273":{"partial":false,"source":"            };","missing":[{}]},"2276":{"partial":false,"source":"        return expr;","missing":[{"startCol":8,"endCol":20}]},"2281":{"partial":false,"source":"        var expr, previousAllowIn;","missing":[{"startCol":8,"endCol":34}]},"2283":{"partial":false,"source":"        previousAllowIn = state.allowIn;","missing":[{"startCol":8,"endCol":40}]},"2284":{"partial":false,"source":"        state.allowIn = true;","missing":[{"startCol":8,"endCol":29}]},"2286":{"partial":false,"source":"        expr = parseShiftExpression();","missing":[{"startCol":8,"endCol":38},{"startCol":15,"endCol":37}]},"2288":{"partial":false,"source":"        while (match('<') || match('>') || match('<=') || match('>=') || (previousAllowIn && matchKeyword('in')) || matchKeyword('instanceof')) {","missing":[{"startCol":15,"endCol":25},{"startCol":29,"endCol":39},{"startCol":43,"endCol":54},{"startCol":58,"endCol":69},{"startCol":73,"endCol":112},{"startCol":93,"endCol":111},{"startCol":116,"endCol":142}]},"2289":{"partial":false,"source":"            expr = {","missing":[{}]},"2290":{"partial":false,"source":"                type: Syntax.BinaryExpression,","missing":[{}]},"2291":{"partial":false,"source":"                operator: lex().value,","missing":[{},{"startCol":29,"endCol":31}]},"2292":{"partial":false,"source":"                left: expr,","missing":[{}]},"2293":{"partial":false,"source":"                right: parseShiftExpression()","missing":[{"startCol":23,"endCol":45},{}]},"2294":{"partial":false,"source":"            };","missing":[{}]},"2297":{"partial":false,"source":"        state.allowIn = previousAllowIn;","missing":[{"startCol":8,"endCol":40}]},"2298":{"partial":false,"source":"        return expr;","missing":[{"startCol":8,"endCol":20}]},"2304":{"partial":false,"source":"        var expr = parseRelationalExpression();","missing":[{"startCol":8,"endCol":47},{"startCol":19,"endCol":46}]},"2306":{"partial":false,"source":"        while ((!peekLineTerminator() && (matchContextualKeyword('is') || matchContextualKeyword('isnt'))) || match('==') || match('!=') || match('===') || match('!==')) {","missing":[{"startCol":15,"endCol":106},{"startCol":17,"endCol":37},{"startCol":41,"endCol":105},{"startCol":42,"endCol":70},{"startCol":74,"endCol":104},{"startCol":110,"endCol":121},{"startCol":125,"endCol":136},{"startCol":140,"endCol":152},{"startCol":156,"endCol":168}]},"2307":{"partial":false,"source":"            expr = {","missing":[{}]},"2308":{"partial":false,"source":"                type: Syntax.BinaryExpression,","missing":[{}]},"2309":{"partial":false,"source":"                operator: lex().value,","missing":[{},{"startCol":29,"endCol":31}]},"2310":{"partial":false,"source":"                left: expr,","missing":[{}]},"2311":{"partial":false,"source":"                right: parseRelationalExpression()","missing":[{"startCol":23,"endCol":50},{}]},"2312":{"partial":false,"source":"            };","missing":[{}]},"2315":{"partial":false,"source":"        return expr;","missing":[{"startCol":8,"endCol":20}]},"2321":{"partial":false,"source":"        var expr = parseEqualityExpression();","missing":[{"startCol":8,"endCol":45},{"startCol":19,"endCol":44}]},"2323":{"partial":false,"source":"        while (match('&')) {","missing":[{"startCol":15,"endCol":25}]},"2324":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"2325":{"partial":false,"source":"            expr = {","missing":[{}]},"2326":{"partial":false,"source":"                type: Syntax.BinaryExpression,","missing":[{}]},"2327":{"partial":false,"source":"                operator: '&',","missing":[{}]},"2328":{"partial":false,"source":"                left: expr,","missing":[{}]},"2329":{"partial":false,"source":"                right: parseEqualityExpression()","missing":[{"startCol":23,"endCol":48},{}]},"2330":{"partial":false,"source":"            };","missing":[{}]},"2333":{"partial":false,"source":"        return expr;","missing":[{"startCol":8,"endCol":20}]},"2337":{"partial":false,"source":"        var expr = parseBitwiseANDExpression();","missing":[{"startCol":8,"endCol":47},{"startCol":19,"endCol":46}]},"2339":{"partial":false,"source":"        while (match('^')) {","missing":[{"startCol":15,"endCol":25}]},"2340":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"2341":{"partial":false,"source":"            expr = {","missing":[{}]},"2342":{"partial":false,"source":"                type: Syntax.BinaryExpression,","missing":[{}]},"2343":{"partial":false,"source":"                operator: '^',","missing":[{}]},"2344":{"partial":false,"source":"                left: expr,","missing":[{}]},"2345":{"partial":false,"source":"                right: parseBitwiseANDExpression()","missing":[{},{"startCol":23,"endCol":50}]},"2346":{"partial":false,"source":"            };","missing":[{}]},"2349":{"partial":false,"source":"        return expr;","missing":[{"startCol":8,"endCol":20}]},"2353":{"partial":false,"source":"        var expr = parseBitwiseXORExpression();","missing":[{"startCol":8,"endCol":47},{"startCol":19,"endCol":46}]},"2355":{"partial":false,"source":"        while (match('|')) {","missing":[{"startCol":15,"endCol":25}]},"2356":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"2357":{"partial":false,"source":"            expr = {","missing":[{}]},"2358":{"partial":false,"source":"                type: Syntax.BinaryExpression,","missing":[{}]},"2359":{"partial":false,"source":"                operator: '|',","missing":[{}]},"2360":{"partial":false,"source":"                left: expr,","missing":[{}]},"2361":{"partial":false,"source":"                right: parseBitwiseXORExpression()","missing":[{},{"startCol":23,"endCol":50}]},"2362":{"partial":false,"source":"            };","missing":[{}]},"2365":{"partial":false,"source":"        return expr;","missing":[{"startCol":8,"endCol":20}]},"2371":{"partial":false,"source":"        var expr = parseBitwiseORExpression();","missing":[{"startCol":8,"endCol":46},{"startCol":19,"endCol":45}]},"2373":{"partial":false,"source":"        while (match('&&')) {","missing":[{"startCol":15,"endCol":26}]},"2374":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"2375":{"partial":false,"source":"            expr = {","missing":[{}]},"2376":{"partial":false,"source":"                type: Syntax.LogicalExpression,","missing":[{}]},"2377":{"partial":false,"source":"                operator: '&&',","missing":[{}]},"2378":{"partial":false,"source":"                left: expr,","missing":[{}]},"2379":{"partial":false,"source":"                right: parseBitwiseORExpression()","missing":[{},{"startCol":23,"endCol":49}]},"2380":{"partial":false,"source":"            };","missing":[{}]},"2383":{"partial":false,"source":"        return expr;","missing":[{"startCol":8,"endCol":20}]},"2387":{"partial":false,"source":"        var expr = parseLogicalANDExpression();","missing":[{"startCol":8,"endCol":47},{"startCol":19,"endCol":46}]},"2389":{"partial":false,"source":"        while (match('||')) {","missing":[{"startCol":15,"endCol":26}]},"2390":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"2391":{"partial":false,"source":"            expr = {","missing":[{}]},"2392":{"partial":false,"source":"                type: Syntax.LogicalExpression,","missing":[{}]},"2393":{"partial":false,"source":"                operator: '||',","missing":[{}]},"2394":{"partial":false,"source":"                left: expr,","missing":[{}]},"2395":{"partial":false,"source":"                right: parseLogicalANDExpression()","missing":[{},{"startCol":23,"endCol":50}]},"2396":{"partial":false,"source":"            };","missing":[{}]},"2399":{"partial":false,"source":"        return expr;","missing":[{"startCol":8,"endCol":20}]},"2405":{"partial":false,"source":"        var expr, previousAllowIn, consequent;","missing":[{"startCol":8,"endCol":46}]},"2407":{"partial":false,"source":"        expr = parseLogicalORExpression();","missing":[{"startCol":8,"endCol":42},{"startCol":15,"endCol":41}]},"2409":{"partial":false,"source":"        if (match('?')) {","missing":[{"startCol":12,"endCol":22}]},"2410":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"2411":{"partial":false,"source":"            previousAllowIn = state.allowIn;","missing":[{"startCol":12,"endCol":44}]},"2412":{"partial":false,"source":"            state.allowIn = true;","missing":[{"startCol":12,"endCol":33}]},"2413":{"partial":false,"source":"            consequent = parseAssignmentExpression();","missing":[{"startCol":12,"endCol":53},{"startCol":25,"endCol":52}]},"2414":{"partial":false,"source":"            state.allowIn = previousAllowIn;","missing":[{"startCol":12,"endCol":44}]},"2415":{"partial":false,"source":"            expect(':');","missing":[{"startCol":12,"endCol":23}]},"2417":{"partial":false,"source":"            expr = {","missing":[{}]},"2418":{"partial":false,"source":"                type: Syntax.ConditionalExpression,","missing":[{}]},"2419":{"partial":false,"source":"                test: expr,","missing":[{}]},"2420":{"partial":false,"source":"                consequent: consequent,","missing":[{}]},"2421":{"partial":false,"source":"                alternate: parseAssignmentExpression()","missing":[{"startCol":27,"endCol":54},{}]},"2422":{"partial":false,"source":"            };","missing":[{}]},"2425":{"partial":false,"source":"        return expr;","missing":[{"startCol":8,"endCol":20}]},"2431":{"partial":false,"source":"        var i, len, property, element;","missing":[{"startCol":8,"endCol":38}]},"2433":{"partial":false,"source":"        if (expr.type === Syntax.ObjectExpression) {","missing":[{"startCol":12,"endCol":49}]},"2434":{"partial":false,"source":"            expr.type = Syntax.ObjectPattern;","missing":[{"startCol":12,"endCol":45}]},"2435":{"partial":false,"source":"            for (i = 0, len = expr.properties.length; i < len; i += 1) {","missing":[{"startCol":54,"endCol":61}]},"2436":{"partial":false,"source":"                property = expr.properties[i];","missing":[{"startCol":16,"endCol":46}]},"2437":{"partial":false,"source":"                if (property.kind !== 'init') {","missing":[{"startCol":20,"endCol":44}]},"2438":{"partial":false,"source":"                    throwError({}, Messages.InvalidLHSInAssignment);","missing":[{"startCol":20,"endCol":67}]},"2440":{"partial":false,"source":"                reinterpretAsAssignmentBindingPattern(property.value);","missing":[{"startCol":16,"endCol":69}]},"2442":{"partial":false,"source":"        } else if (expr.type === Syntax.ArrayExpression) {","missing":[{"startCol":19,"endCol":55}]},"2443":{"partial":false,"source":"            expr.type = Syntax.ArrayPattern;","missing":[{"startCol":12,"endCol":44}]},"2444":{"partial":false,"source":"            for (i = 0, len = expr.elements.length; i < len; i += 1) {","missing":[{"startCol":52,"endCol":59}]},"2445":{"partial":false,"source":"                element = expr.elements[i];","missing":[{"startCol":16,"endCol":43}]},"2447":{"partial":false,"source":"                    reinterpretAsAssignmentBindingPattern(element);","missing":[{"startCol":20,"endCol":66}]},"2450":{"partial":false,"source":"        } else if (expr.type === Syntax.Identifier) {","missing":[{"startCol":19,"endCol":50}]},"2451":{"partial":false,"source":"            if (isRestrictedWord(expr.name)) {","missing":[{"startCol":16,"endCol":43}]},"2452":{"partial":false,"source":"                throwError({}, Messages.InvalidLHSInAssignment);","missing":[{"startCol":16,"endCol":63}]},"2455":{"partial":false,"source":"            if (expr.type !== Syntax.MemberExpression && expr.type !== Syntax.CallExpression && expr.type !== Syntax.NewExpression) {","missing":[{"startCol":16,"endCol":53},{"startCol":57,"endCol":92},{"startCol":96,"endCol":130}]},"2456":{"partial":false,"source":"                throwError({}, Messages.InvalidLHSInAssignment);","missing":[{"startCol":16,"endCol":63}]},"2462":{"partial":false,"source":"        var i, len, param, paramSet;","missing":[{"startCol":8,"endCol":36}]},"2463":{"partial":false,"source":"        assert(expr.type === Syntax.SequenceExpression);","missing":[{"startCol":8,"endCol":55},{"startCol":15,"endCol":54}]},"2465":{"partial":false,"source":"        paramSet = {};","missing":[{"startCol":8,"endCol":22}]},"2467":{"partial":false,"source":"        for (i = 0, len = expr.expressions.length; i < len; i += 1) {","missing":[{"startCol":51,"endCol":58}]},"2468":{"partial":false,"source":"            param = expr.expressions[i];","missing":[{"startCol":12,"endCol":40}]},"2469":{"partial":false,"source":"            if (param.type !== Syntax.Identifier) {","missing":[{"startCol":16,"endCol":48}]},"2470":{"partial":false,"source":"                return null;","missing":[{"startCol":16,"endCol":28}]},"2472":{"partial":false,"source":"            if (isRestrictedWord(param.name)) {","missing":[{"startCol":16,"endCol":44}]},"2473":{"partial":false,"source":"                throwError({}, Messages.StrictParamName);","missing":[{"startCol":16,"endCol":56}]},"2475":{"partial":false,"source":"            if (Object.prototype.hasOwnProperty.call(paramSet, param.name)) {","missing":[{"startCol":16,"endCol":74}]},"2476":{"partial":false,"source":"                throwError({}, Messages.StrictParamDupe);","missing":[{"startCol":16,"endCol":56}]},"2478":{"partial":false,"source":"            paramSet[param.name] = true;","missing":[{"startCol":12,"endCol":40}]},"2480":{"partial":false,"source":"        return expr.expressions;","missing":[{"startCol":8,"endCol":32}]},"2484":{"partial":false,"source":"        var previousStrict, previousYieldAllowed, body;","missing":[{"startCol":8,"endCol":55}]},"2486":{"partial":false,"source":"        expect('=>');","missing":[{"startCol":8,"endCol":20}]},"2488":{"partial":false,"source":"        previousStrict = strict;","missing":[{"startCol":8,"endCol":32}]},"2489":{"partial":false,"source":"        previousYieldAllowed = yieldAllowed;","missing":[{"startCol":8,"endCol":44}]},"2490":{"partial":false,"source":"        strict = true;","missing":[{"startCol":8,"endCol":22}]},"2491":{"partial":false,"source":"        yieldAllowed = false;","missing":[{"startCol":8,"endCol":29}]},"2492":{"partial":false,"source":"        body = parseConciseBody();","missing":[{"startCol":8,"endCol":34},{"startCol":15,"endCol":33}]},"2493":{"partial":false,"source":"        strict = previousStrict;","missing":[{"startCol":8,"endCol":32}]},"2494":{"partial":false,"source":"        yieldAllowed = previousYieldAllowed;","missing":[{"startCol":8,"endCol":44}]},"2496":{"partial":false,"source":"        return {","missing":[{}]},"2497":{"partial":false,"source":"            type: Syntax.ArrowFunctionExpression,","missing":[{}]},"2498":{"partial":false,"source":"            id: null,","missing":[{}]},"2499":{"partial":false,"source":"            params: param,","missing":[{}]},"2500":{"partial":false,"source":"            defaults: [],","missing":[{}]},"2501":{"partial":false,"source":"            body: body,","missing":[{}]},"2502":{"partial":false,"source":"            rest: null,","missing":[{}]},"2503":{"partial":false,"source":"            generator: false,","missing":[{}]},"2504":{"partial":false,"source":"            expression: body.type !== Syntax.BlockStatement","missing":[{},{"startCol":24,"endCol":59}]},"2505":{"partial":false,"source":"        };","missing":[{}]},"2509":{"partial":false,"source":"        var expr, token, oldParenthesizedCount, coverFormalsList;","missing":[{"startCol":8,"endCol":65}]},"2511":{"partial":false,"source":"        if (matchKeyword('yield')) {","missing":[{"startCol":12,"endCol":33}]},"2512":{"partial":false,"source":"            return parseYieldExpression();","missing":[{"startCol":12,"endCol":42},{"startCol":19,"endCol":41}]},"2515":{"partial":false,"source":"        oldParenthesizedCount = state.parenthesizedCount;","missing":[{"startCol":8,"endCol":57}]},"2517":{"partial":false,"source":"        if (match('(')) {","missing":[{"startCol":12,"endCol":22}]},"2518":{"partial":false,"source":"            token = lookahead2();","missing":[{"startCol":12,"endCol":33},{"startCol":20,"endCol":32}]},"2519":{"partial":false,"source":"            if (token.type === Token.Punctuator && token.value === ')') {","missing":[{"startCol":16,"endCol":47},{"startCol":51,"endCol":70}]},"2520":{"partial":false,"source":"                lex();","missing":[{"startCol":16,"endCol":21}]},"2521":{"partial":false,"source":"                lex();","missing":[{"startCol":16,"endCol":21}]},"2522":{"partial":false,"source":"                if (!match('=>')) {","missing":[{"startCol":21,"endCol":32}]},"2523":{"partial":false,"source":"                    throwUnexpected(lex());","missing":[{"startCol":20,"endCol":42},{"startCol":36,"endCol":41}]},"2525":{"partial":false,"source":"                return parseArrowFunctionExpression([]);","missing":[{"startCol":16,"endCol":56},{"startCol":23,"endCol":55}]},"2529":{"partial":false,"source":"        expr = parseConditionalExpression();","missing":[{"startCol":8,"endCol":44},{"startCol":15,"endCol":43}]},"2531":{"partial":false,"source":"        if (match('=>')) {","missing":[{"startCol":12,"endCol":23}]},"2532":{"partial":false,"source":"            if (expr.type === Syntax.Identifier) {","missing":[{"startCol":16,"endCol":47}]},"2533":{"partial":false,"source":"                if (state.parenthesizedCount === oldParenthesizedCount || state.parenthesizedCount === (oldParenthesizedCount + 1)) {","missing":[{"startCol":20,"endCol":70},{"startCol":74,"endCol":130},{"startCol":103,"endCol":130}]},"2534":{"partial":false,"source":"                    if (isRestrictedWord(expr.name)) {","missing":[{"startCol":24,"endCol":51}]},"2535":{"partial":false,"source":"                        throwError({}, Messages.StrictParamName);","missing":[{"startCol":24,"endCol":64}]},"2537":{"partial":false,"source":"                    return parseArrowFunctionExpression([ expr ]);","missing":[{"startCol":20,"endCol":66},{"startCol":27,"endCol":65}]},"2539":{"partial":false,"source":"            } else if (expr.type === Syntax.SequenceExpression) {","missing":[{"startCol":23,"endCol":62}]},"2540":{"partial":false,"source":"                if (state.parenthesizedCount === (oldParenthesizedCount + 1)) {","missing":[{"startCol":20,"endCol":76},{"startCol":49,"endCol":76}]},"2541":{"partial":false,"source":"                    coverFormalsList = reinterpretAsCoverFormalsList(expr);","missing":[{"startCol":20,"endCol":75},{"startCol":39,"endCol":74}]},"2543":{"partial":false,"source":"                        return parseArrowFunctionExpression(coverFormalsList);","missing":[{"startCol":24,"endCol":78},{"startCol":31,"endCol":77}]},"2549":{"partial":false,"source":"        if (matchAssign()) {","missing":[{"startCol":12,"endCol":25}]},"2551":{"partial":false,"source":"            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {","missing":[{"startCol":16,"endCol":57},{"startCol":26,"endCol":57},{"startCol":61,"endCol":88}]},"2552":{"partial":false,"source":"                throwError({}, Messages.StrictLHSAssignment);","missing":[{"startCol":16,"endCol":60}]},"2556":{"partial":false,"source":"            if (match('=') && (expr.type === Syntax.ObjectExpression || expr.type === Syntax.ArrayExpression)) {","missing":[{"startCol":16,"endCol":26},{"startCol":30,"endCol":109},{"startCol":31,"endCol":68},{"startCol":72,"endCol":108}]},"2557":{"partial":false,"source":"                reinterpretAsAssignmentBindingPattern(expr);","missing":[{"startCol":16,"endCol":59}]},"2558":{"partial":false,"source":"            } else if (!isLeftHandSide(expr)) {","missing":[{"startCol":24,"endCol":44}]},"2559":{"partial":false,"source":"                throwError({}, Messages.InvalidLHSInAssignment);","missing":[{"startCol":16,"endCol":63}]},"2562":{"partial":false,"source":"            expr = {","missing":[{}]},"2563":{"partial":false,"source":"                type: Syntax.AssignmentExpression,","missing":[{}]},"2564":{"partial":false,"source":"                operator: lex().value,","missing":[{"startCol":29,"endCol":31},{}]},"2565":{"partial":false,"source":"                left: expr,","missing":[{}]},"2566":{"partial":false,"source":"                right: parseAssignmentExpression()","missing":[{},{"startCol":23,"endCol":50}]},"2567":{"partial":false,"source":"            };","missing":[{}]},"2570":{"partial":false,"source":"        return expr;","missing":[{"startCol":8,"endCol":20}]},"2576":{"partial":false,"source":"        var expr = parseAssignmentExpression();","missing":[{"startCol":8,"endCol":47},{"startCol":19,"endCol":46}]},"2578":{"partial":false,"source":"        if (match(',')) {","missing":[{"startCol":12,"endCol":22}]},"2579":{"partial":false,"source":"            expr = {","missing":[{}]},"2580":{"partial":false,"source":"                type: Syntax.SequenceExpression,","missing":[{}]},"2581":{"partial":false,"source":"                expressions: [ expr ]","missing":[{}]},"2582":{"partial":false,"source":"            };","missing":[{}]},"2584":{"partial":false,"source":"            while (index < length) {","missing":[{"startCol":19,"endCol":33}]},"2585":{"partial":false,"source":"                if (!match(',')) {","missing":[{"startCol":21,"endCol":31}]},"2588":{"partial":false,"source":"                lex();","missing":[{"startCol":16,"endCol":21}]},"2589":{"partial":false,"source":"                expr.expressions.push(parseAssignmentExpression());","missing":[{"startCol":16,"endCol":66},{"startCol":38,"endCol":65}]},"2593":{"partial":false,"source":"        return expr;","missing":[{"startCol":8,"endCol":20}]},"2599":{"partial":false,"source":"        var list = [],","missing":[{}]},"2600":{"partial":false,"source":"            statement;","missing":[{}]},"2602":{"partial":false,"source":"        while (index < length) {","missing":[{"startCol":15,"endCol":29}]},"2603":{"partial":false,"source":"            if (match('}')) {","missing":[{"startCol":16,"endCol":26}]},"2606":{"partial":false,"source":"            statement = parseSourceElement();","missing":[{"startCol":12,"endCol":45},{"startCol":24,"endCol":44}]},"2607":{"partial":false,"source":"            if (typeof statement === 'undefined') {","missing":[{"startCol":16,"endCol":48}]},"2610":{"partial":false,"source":"            list.push(statement);","missing":[{"startCol":12,"endCol":32}]},"2613":{"partial":false,"source":"        return list;","missing":[{"startCol":8,"endCol":20}]},"2617":{"partial":false,"source":"        var block;","missing":[{"startCol":8,"endCol":18}]},"2619":{"partial":false,"source":"        expect('{');","missing":[{"startCol":8,"endCol":19}]},"2621":{"partial":false,"source":"        block = parseStatementList();","missing":[{"startCol":8,"endCol":37},{"startCol":16,"endCol":36}]},"2623":{"partial":false,"source":"        expect('}');","missing":[{"startCol":8,"endCol":19}]},"2625":{"partial":false,"source":"        return {","missing":[{}]},"2626":{"partial":false,"source":"            type: Syntax.BlockStatement,","missing":[{}]},"2627":{"partial":false,"source":"            body: block","missing":[{}]},"2628":{"partial":false,"source":"        };","missing":[{}]},"2634":{"partial":false,"source":"        var token = lex();","missing":[{"startCol":8,"endCol":26},{"startCol":20,"endCol":25}]},"2636":{"partial":false,"source":"        if (token.type !== Token.Identifier) {","missing":[{"startCol":12,"endCol":43}]},"2637":{"partial":false,"source":"            throwUnexpected(token);","missing":[{"startCol":12,"endCol":34}]},"2640":{"partial":false,"source":"        return {","missing":[{}]},"2641":{"partial":false,"source":"            type: Syntax.Identifier,","missing":[{}]},"2642":{"partial":false,"source":"            name: token.value","missing":[{}]},"2643":{"partial":false,"source":"        };","missing":[{}]},"2647":{"partial":false,"source":"        var id,","missing":[{}]},"2648":{"partial":false,"source":"            init = null;","missing":[{}]},"2649":{"partial":false,"source":"        if (lookahead().value === '{') {","missing":[{"startCol":12,"endCol":37},{"startCol":21,"endCol":23}]},"2650":{"partial":false,"source":"            id = parseObjectInitialiser();","missing":[{"startCol":12,"endCol":42},{"startCol":17,"endCol":41}]},"2651":{"partial":false,"source":"            reinterpretAsAssignmentBindingPattern(id);","missing":[{"startCol":12,"endCol":53}]},"2653":{"partial":false,"source":"            id = parseVariableIdentifier();","missing":[{"startCol":12,"endCol":43},{"startCol":17,"endCol":42}]},"2655":{"partial":false,"source":"            if (strict && isRestrictedWord(id.name)) {","missing":[{"startCol":16,"endCol":51},{"startCol":26,"endCol":51}]},"2656":{"partial":false,"source":"                throwErrorTolerant({}, Messages.StrictVarName);","missing":[{"startCol":16,"endCol":62}]},"2660":{"partial":false,"source":"        if (kind === 'const') {","missing":[{"startCol":12,"endCol":28}]},"2661":{"partial":false,"source":"            expect('=');","missing":[{"startCol":12,"endCol":23}]},"2662":{"partial":false,"source":"            init = parseAssignmentExpression();","missing":[{"startCol":12,"endCol":47},{"startCol":19,"endCol":46}]},"2663":{"partial":false,"source":"        } else if (match('=')) {","missing":[{"startCol":19,"endCol":29}]},"2664":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"2665":{"partial":false,"source":"            init = parseAssignmentExpression();","missing":[{"startCol":12,"endCol":47},{"startCol":19,"endCol":46}]},"2668":{"partial":false,"source":"        return {","missing":[{}]},"2669":{"partial":false,"source":"            type: Syntax.VariableDeclarator,","missing":[{}]},"2670":{"partial":false,"source":"            id: id,","missing":[{}]},"2671":{"partial":false,"source":"            init: init","missing":[{}]},"2672":{"partial":false,"source":"        };","missing":[{}]},"2676":{"partial":false,"source":"        var list = [];","missing":[{"startCol":8,"endCol":22}]},"2678":{"partial":false,"source":"        while (index < length) {","missing":[{"startCol":15,"endCol":29}]},"2679":{"partial":false,"source":"            list.push(parseVariableDeclaration(kind));","missing":[{"startCol":12,"endCol":53},{"startCol":22,"endCol":52}]},"2680":{"partial":false,"source":"            if (!match(',')) {","missing":[{"startCol":17,"endCol":27}]},"2683":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"2686":{"partial":false,"source":"        return list;","missing":[{"startCol":8,"endCol":20}]},"2690":{"partial":false,"source":"        var declarations;","missing":[{"startCol":8,"endCol":25}]},"2692":{"partial":false,"source":"        expectKeyword('var');","missing":[{"startCol":8,"endCol":28}]},"2694":{"partial":false,"source":"        declarations = parseVariableDeclarationList();","missing":[{"startCol":8,"endCol":54},{"startCol":23,"endCol":53}]},"2696":{"partial":false,"source":"        consumeSemicolon();","missing":[{"startCol":8,"endCol":26}]},"2698":{"partial":false,"source":"        return {","missing":[{}]},"2699":{"partial":false,"source":"            type: Syntax.VariableDeclaration,","missing":[{}]},"2700":{"partial":false,"source":"            declarations: declarations,","missing":[{}]},"2701":{"partial":false,"source":"            kind: 'var'","missing":[{}]},"2702":{"partial":false,"source":"        };","missing":[{}]},"2710":{"partial":false,"source":"        var declarations;","missing":[{"startCol":8,"endCol":25}]},"2712":{"partial":false,"source":"        expectKeyword(kind);","missing":[{"startCol":8,"endCol":27}]},"2714":{"partial":false,"source":"        declarations = parseVariableDeclarationList(kind);","missing":[{"startCol":8,"endCol":58},{"startCol":23,"endCol":57}]},"2716":{"partial":false,"source":"        consumeSemicolon();","missing":[{"startCol":8,"endCol":26}]},"2718":{"partial":false,"source":"        return {","missing":[{}]},"2719":{"partial":false,"source":"            type: Syntax.VariableDeclaration,","missing":[{}]},"2720":{"partial":false,"source":"            declarations: declarations,","missing":[{}]},"2721":{"partial":false,"source":"            kind: kind","missing":[{}]},"2722":{"partial":false,"source":"        };","missing":[{}]},"2728":{"partial":false,"source":"        var result, id;","missing":[{"startCol":8,"endCol":23}]},"2730":{"partial":false,"source":"        result = {","missing":[{}]},"2731":{"partial":false,"source":"            type: Syntax.Path,","missing":[{}]},"2732":{"partial":false,"source":"            body: []","missing":[{}]},"2733":{"partial":false,"source":"        };","missing":[{}]},"2736":{"partial":false,"source":"            id = parseVariableIdentifier();","missing":[{"startCol":12,"endCol":43},{"startCol":17,"endCol":42}]},"2737":{"partial":false,"source":"            result.body.push(id);","missing":[{"startCol":12,"endCol":32}]},"2738":{"partial":false,"source":"            if (!match('.')) {","missing":[{"startCol":17,"endCol":27}]},"2741":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"2744":{"partial":false,"source":"        return result;","missing":[{"startCol":8,"endCol":22}]},"2748":{"partial":false,"source":"        expect('*');","missing":[{"startCol":8,"endCol":19}]},"2749":{"partial":false,"source":"        return {","missing":[{}]},"2750":{"partial":false,"source":"            type: Syntax.Glob","missing":[{}]},"2751":{"partial":false,"source":"        };","missing":[{}]},"2755":{"partial":false,"source":"        var id, token, declaration;","missing":[{"startCol":8,"endCol":35}]},"2757":{"partial":false,"source":"        lex();","missing":[{"startCol":8,"endCol":13}]},"2759":{"partial":false,"source":"        id = parseVariableIdentifier();","missing":[{"startCol":8,"endCol":39},{"startCol":13,"endCol":38}]},"2761":{"partial":false,"source":"        if (match('{')) {","missing":[{"startCol":12,"endCol":22}]},"2762":{"partial":false,"source":"            return {","missing":[{}]},"2763":{"partial":false,"source":"                type: Syntax.ModuleDeclaration,","missing":[{}]},"2764":{"partial":false,"source":"                id: id,","missing":[{}]},"2765":{"partial":false,"source":"                body: parseModuleBlock()","missing":[{"startCol":22,"endCol":40},{}]},"2766":{"partial":false,"source":"            };","missing":[{}]},"2769":{"partial":false,"source":"        expect('=');","missing":[{"startCol":8,"endCol":19}]},"2771":{"partial":false,"source":"        token = lookahead();","missing":[{"startCol":8,"endCol":28},{"startCol":16,"endCol":27}]},"2772":{"partial":false,"source":"        if (token.type === Token.StringLiteral) {","missing":[{"startCol":12,"endCol":46}]},"2773":{"partial":false,"source":"            declaration = {","missing":[{}]},"2774":{"partial":false,"source":"                type: Syntax.ModuleDeclaration,","missing":[{}]},"2775":{"partial":false,"source":"                id: id,","missing":[{}]},"2776":{"partial":false,"source":"                from: parsePrimaryExpression()","missing":[{"startCol":22,"endCol":46},{}]},"2777":{"partial":false,"source":"            };","missing":[{}]},"2779":{"partial":false,"source":"            declaration = {","missing":[{}]},"2780":{"partial":false,"source":"                type: Syntax.ModuleDeclaration,","missing":[{}]},"2781":{"partial":false,"source":"                id: id,","missing":[{}]},"2782":{"partial":false,"source":"                from: parsePath()","missing":[{},{"startCol":22,"endCol":33}]},"2783":{"partial":false,"source":"            };","missing":[{}]},"2786":{"partial":false,"source":"        consumeSemicolon();","missing":[{"startCol":8,"endCol":26}]},"2788":{"partial":false,"source":"        return declaration;","missing":[{"startCol":8,"endCol":27}]},"2792":{"partial":false,"source":"        var specifier;","missing":[{"startCol":8,"endCol":22}]},"2794":{"partial":false,"source":"        specifier = {","missing":[{}]},"2795":{"partial":false,"source":"            type: Syntax.ExportSpecifier,","missing":[{}]},"2796":{"partial":false,"source":"            id: parseVariableIdentifier(),","missing":[{},{"startCol":16,"endCol":41}]},"2797":{"partial":false,"source":"            from: null","missing":[{}]},"2798":{"partial":false,"source":"        };","missing":[{}]},"2800":{"partial":false,"source":"        if (match(':')) {","missing":[{"startCol":12,"endCol":22}]},"2801":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"2802":{"partial":false,"source":"            specifier.from = parsePath();","missing":[{"startCol":12,"endCol":41},{"startCol":29,"endCol":40}]},"2805":{"partial":false,"source":"        return specifier;","missing":[{"startCol":8,"endCol":25}]},"2809":{"partial":false,"source":"        var specifier, specifiers;","missing":[{"startCol":8,"endCol":34}]},"2811":{"partial":false,"source":"        if (match('{')) {","missing":[{"startCol":12,"endCol":22}]},"2812":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"2813":{"partial":false,"source":"            specifiers = [];","missing":[{"startCol":12,"endCol":28}]},"2816":{"partial":false,"source":"                specifiers.push(parseExportSpecifierSetProperty());","missing":[{"startCol":16,"endCol":66},{"startCol":32,"endCol":65}]},"2817":{"partial":false,"source":"            } while (match(',') && lex());","missing":[{"startCol":21,"endCol":31},{"startCol":35,"endCol":40}]},"2819":{"partial":false,"source":"            expect('}');","missing":[{"startCol":12,"endCol":23}]},"2821":{"partial":false,"source":"            return {","missing":[{}]},"2822":{"partial":false,"source":"                type: Syntax.ExportSpecifierSet,","missing":[{}]},"2823":{"partial":false,"source":"                specifiers: specifiers","missing":[{}]},"2824":{"partial":false,"source":"            };","missing":[{}]},"2827":{"partial":false,"source":"        if (match('*')) {","missing":[{"startCol":12,"endCol":22}]},"2828":{"partial":false,"source":"            specifier = {","missing":[{}]},"2829":{"partial":false,"source":"                type: Syntax.ExportSpecifier,","missing":[{}]},"2830":{"partial":false,"source":"                id: parseGlob(),","missing":[{"startCol":20,"endCol":31},{}]},"2831":{"partial":false,"source":"                from: null","missing":[{}]},"2832":{"partial":false,"source":"            };","missing":[{}]},"2834":{"partial":false,"source":"            if (matchContextualKeyword('from')) {","missing":[{"startCol":16,"endCol":46}]},"2835":{"partial":false,"source":"                lex();","missing":[{"startCol":16,"endCol":21}]},"2836":{"partial":false,"source":"                specifier.from = parsePath();","missing":[{"startCol":16,"endCol":45},{"startCol":33,"endCol":44}]},"2839":{"partial":false,"source":"            specifier = {","missing":[{}]},"2840":{"partial":false,"source":"                type: Syntax.ExportSpecifier,","missing":[{}]},"2841":{"partial":false,"source":"                id: parseVariableIdentifier(),","missing":[{"startCol":20,"endCol":45},{}]},"2842":{"partial":false,"source":"                from: null","missing":[{}]},"2843":{"partial":false,"source":"            };","missing":[{}]},"2845":{"partial":false,"source":"        return specifier;","missing":[{"startCol":8,"endCol":25}]},"2849":{"partial":false,"source":"        var token, specifiers;","missing":[{"startCol":8,"endCol":30}]},"2851":{"partial":false,"source":"        expectKeyword('export');","missing":[{"startCol":8,"endCol":31}]},"2853":{"partial":false,"source":"        token = lookahead();","missing":[{"startCol":8,"endCol":28},{"startCol":16,"endCol":27}]},"2855":{"partial":false,"source":"        if (token.type === Token.Keyword || (token.type === Token.Identifier && token.value === 'module')) {","missing":[{"startCol":12,"endCol":40},{"startCol":44,"endCol":105},{"startCol":45,"endCol":76},{"startCol":80,"endCol":104}]},"2858":{"partial":false,"source":"                return {","missing":[{}]},"2859":{"partial":false,"source":"                    type: Syntax.ExportDeclaration,","missing":[{}]},"2860":{"partial":false,"source":"                    declaration: parseFunctionDeclaration()","missing":[{},{"startCol":33,"endCol":59}]},"2861":{"partial":false,"source":"                };","missing":[{}]},"2863":{"partial":false,"source":"                return {","missing":[{}]},"2864":{"partial":false,"source":"                    type: Syntax.ExportDeclaration,","missing":[{}]},"2865":{"partial":false,"source":"                    declaration: parseModuleDeclaration()","missing":[{},{"startCol":33,"endCol":57}]},"2866":{"partial":false,"source":"                };","missing":[{}]},"2869":{"partial":false,"source":"                return {","missing":[{}]},"2870":{"partial":false,"source":"                    type: Syntax.ExportDeclaration,","missing":[{}]},"2871":{"partial":false,"source":"                    declaration: parseConstLetDeclaration(token.value)","missing":[{},{"startCol":33,"endCol":70}]},"2872":{"partial":false,"source":"                };","missing":[{}]},"2874":{"partial":false,"source":"                return {","missing":[{}]},"2875":{"partial":false,"source":"                    type: Syntax.ExportDeclaration,","missing":[{}]},"2876":{"partial":false,"source":"                    declaration: parseStatement()","missing":[{},{"startCol":33,"endCol":49}]},"2877":{"partial":false,"source":"                };","missing":[{}]},"2879":{"partial":false,"source":"            throwUnexpected(lex());","missing":[{"startCol":12,"endCol":34},{"startCol":28,"endCol":33}]},"2882":{"partial":false,"source":"        specifiers = [ parseExportSpecifier() ];","missing":[{"startCol":8,"endCol":48},{"startCol":23,"endCol":45}]},"2883":{"partial":false,"source":"        if (match(',')) {","missing":[{"startCol":12,"endCol":22}]},"2884":{"partial":false,"source":"            while (index < length) {","missing":[{"startCol":19,"endCol":33}]},"2885":{"partial":false,"source":"                if (!match(',')) {","missing":[{"startCol":21,"endCol":31}]},"2888":{"partial":false,"source":"                lex();","missing":[{"startCol":16,"endCol":21}]},"2889":{"partial":false,"source":"                specifiers.push(parseExportSpecifier());","missing":[{"startCol":16,"endCol":55},{"startCol":32,"endCol":54}]},"2893":{"partial":false,"source":"        consumeSemicolon();","missing":[{"startCol":8,"endCol":26}]},"2895":{"partial":false,"source":"        return {","missing":[{}]},"2896":{"partial":false,"source":"            type: Syntax.ExportDeclaration,","missing":[{}]},"2897":{"partial":false,"source":"            specifiers: specifiers","missing":[{}]},"2898":{"partial":false,"source":"        };","missing":[{}]},"2902":{"partial":false,"source":"        var specifiers, from;","missing":[{"startCol":8,"endCol":29}]},"2904":{"partial":false,"source":"        expectKeyword('import');","missing":[{"startCol":8,"endCol":31}]},"2906":{"partial":false,"source":"        if (match('*')) {","missing":[{"startCol":12,"endCol":22}]},"2907":{"partial":false,"source":"            specifiers = [parseGlob()];","missing":[{"startCol":12,"endCol":39},{"startCol":26,"endCol":37}]},"2908":{"partial":false,"source":"        } else if (match('{')) {","missing":[{"startCol":19,"endCol":29}]},"2909":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"2910":{"partial":false,"source":"            specifiers = [];","missing":[{"startCol":12,"endCol":28}]},"2913":{"partial":false,"source":"                specifiers.push(parseImportSpecifier());","missing":[{"startCol":16,"endCol":55},{"startCol":32,"endCol":54}]},"2914":{"partial":false,"source":"            } while (match(',') && lex());","missing":[{"startCol":21,"endCol":31},{"startCol":35,"endCol":40}]},"2916":{"partial":false,"source":"            expect('}');","missing":[{"startCol":12,"endCol":23}]},"2918":{"partial":false,"source":"            specifiers = [parseVariableIdentifier()];","missing":[{"startCol":12,"endCol":53},{"startCol":26,"endCol":51}]},"2921":{"partial":false,"source":"        if (!matchContextualKeyword('from')) {","missing":[{"startCol":13,"endCol":43}]},"2922":{"partial":false,"source":"            throwError({}, Messages.NoFromAfterImport);","missing":[{"startCol":12,"endCol":54}]},"2925":{"partial":false,"source":"        lex();","missing":[{"startCol":8,"endCol":13}]},"2927":{"partial":false,"source":"        if (lookahead().type === Token.StringLiteral) {","missing":[{"startCol":12,"endCol":52},{"startCol":21,"endCol":23}]},"2928":{"partial":false,"source":"            from = parsePrimaryExpression();","missing":[{"startCol":12,"endCol":44},{"startCol":19,"endCol":43}]},"2930":{"partial":false,"source":"            from = parsePath();","missing":[{"startCol":12,"endCol":31},{"startCol":19,"endCol":30}]},"2933":{"partial":false,"source":"        consumeSemicolon();","missing":[{"startCol":8,"endCol":26}]},"2935":{"partial":false,"source":"        return {","missing":[{}]},"2936":{"partial":false,"source":"            type: Syntax.ImportDeclaration,","missing":[{}]},"2937":{"partial":false,"source":"            specifiers: specifiers,","missing":[{}]},"2938":{"partial":false,"source":"            from: from","missing":[{}]},"2939":{"partial":false,"source":"        };","missing":[{}]},"2943":{"partial":false,"source":"        var specifier;","missing":[{"startCol":8,"endCol":22}]},"2945":{"partial":false,"source":"        specifier = {","missing":[{}]},"2946":{"partial":false,"source":"            type: Syntax.ImportSpecifier,","missing":[{}]},"2947":{"partial":false,"source":"            id: parseVariableIdentifier(),","missing":[{},{"startCol":16,"endCol":41}]},"2948":{"partial":false,"source":"            from: null","missing":[{}]},"2949":{"partial":false,"source":"        };","missing":[{}]},"2951":{"partial":false,"source":"        if (match(':')) {","missing":[{"startCol":12,"endCol":22}]},"2952":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"2953":{"partial":false,"source":"            specifier.from = parsePath();","missing":[{"startCol":12,"endCol":41},{"startCol":29,"endCol":40}]},"2956":{"partial":false,"source":"        return specifier;","missing":[{"startCol":8,"endCol":25}]},"2962":{"partial":false,"source":"        expect(';');","missing":[{"startCol":8,"endCol":19}]},"2964":{"partial":false,"source":"        return {","missing":[{}]},"2965":{"partial":false,"source":"            type: Syntax.EmptyStatement","missing":[{}]},"2966":{"partial":false,"source":"        };","missing":[{}]},"2972":{"partial":false,"source":"        var expr = parseExpression();","missing":[{"startCol":8,"endCol":37},{"startCol":19,"endCol":36}]},"2974":{"partial":false,"source":"        consumeSemicolon();","missing":[{"startCol":8,"endCol":26}]},"2976":{"partial":false,"source":"        return {","missing":[{}]},"2977":{"partial":false,"source":"            type: Syntax.ExpressionStatement,","missing":[{}]},"2978":{"partial":false,"source":"            expression: expr","missing":[{}]},"2979":{"partial":false,"source":"        };","missing":[{}]},"2985":{"partial":false,"source":"        var test, consequent, alternate;","missing":[{"startCol":8,"endCol":40}]},"2987":{"partial":false,"source":"        expectKeyword('if');","missing":[{"startCol":8,"endCol":27}]},"2989":{"partial":false,"source":"        expect('(');","missing":[{"startCol":8,"endCol":19}]},"2991":{"partial":false,"source":"        test = parseExpression();","missing":[{"startCol":8,"endCol":33},{"startCol":15,"endCol":32}]},"2993":{"partial":false,"source":"        expect(')');","missing":[{"startCol":8,"endCol":19}]},"2995":{"partial":false,"source":"        consequent = parseStatement();","missing":[{"startCol":8,"endCol":38},{"startCol":21,"endCol":37}]},"2997":{"partial":false,"source":"        if (matchKeyword('else')) {","missing":[{"startCol":12,"endCol":32}]},"2998":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"2999":{"partial":false,"source":"            alternate = parseStatement();","missing":[{"startCol":12,"endCol":41},{"startCol":24,"endCol":40}]},"3001":{"partial":false,"source":"            alternate = null;","missing":[{"startCol":12,"endCol":29}]},"3004":{"partial":false,"source":"        return {","missing":[{}]},"3005":{"partial":false,"source":"            type: Syntax.IfStatement,","missing":[{}]},"3006":{"partial":false,"source":"            test: test,","missing":[{}]},"3007":{"partial":false,"source":"            consequent: consequent,","missing":[{}]},"3008":{"partial":false,"source":"            alternate: alternate","missing":[{}]},"3009":{"partial":false,"source":"        };","missing":[{}]},"3015":{"partial":false,"source":"        var body, test, oldInIteration;","missing":[{"startCol":8,"endCol":39}]},"3017":{"partial":false,"source":"        expectKeyword('do');","missing":[{"startCol":8,"endCol":27}]},"3019":{"partial":false,"source":"        oldInIteration = state.inIteration;","missing":[{"startCol":8,"endCol":43}]},"3020":{"partial":false,"source":"        state.inIteration = true;","missing":[{"startCol":8,"endCol":33}]},"3022":{"partial":false,"source":"        body = parseStatement();","missing":[{"startCol":8,"endCol":32},{"startCol":15,"endCol":31}]},"3024":{"partial":false,"source":"        state.inIteration = oldInIteration;","missing":[{"startCol":8,"endCol":43}]},"3026":{"partial":false,"source":"        expectKeyword('while');","missing":[{"startCol":8,"endCol":30}]},"3028":{"partial":false,"source":"        expect('(');","missing":[{"startCol":8,"endCol":19}]},"3030":{"partial":false,"source":"        test = parseExpression();","missing":[{"startCol":8,"endCol":33},{"startCol":15,"endCol":32}]},"3032":{"partial":false,"source":"        expect(')');","missing":[{"startCol":8,"endCol":19}]},"3034":{"partial":false,"source":"        if (match(';')) {","missing":[{"startCol":12,"endCol":22}]},"3035":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"3038":{"partial":false,"source":"        return {","missing":[{}]},"3039":{"partial":false,"source":"            type: Syntax.DoWhileStatement,","missing":[{}]},"3040":{"partial":false,"source":"            body: body,","missing":[{}]},"3041":{"partial":false,"source":"            test: test","missing":[{}]},"3042":{"partial":false,"source":"        };","missing":[{}]},"3046":{"partial":false,"source":"        var test, body, oldInIteration;","missing":[{"startCol":8,"endCol":39}]},"3048":{"partial":false,"source":"        expectKeyword('while');","missing":[{"startCol":8,"endCol":30}]},"3050":{"partial":false,"source":"        expect('(');","missing":[{"startCol":8,"endCol":19}]},"3052":{"partial":false,"source":"        test = parseExpression();","missing":[{"startCol":8,"endCol":33},{"startCol":15,"endCol":32}]},"3054":{"partial":false,"source":"        expect(')');","missing":[{"startCol":8,"endCol":19}]},"3056":{"partial":false,"source":"        oldInIteration = state.inIteration;","missing":[{"startCol":8,"endCol":43}]},"3057":{"partial":false,"source":"        state.inIteration = true;","missing":[{"startCol":8,"endCol":33}]},"3059":{"partial":false,"source":"        body = parseStatement();","missing":[{"startCol":8,"endCol":32},{"startCol":15,"endCol":31}]},"3061":{"partial":false,"source":"        state.inIteration = oldInIteration;","missing":[{"startCol":8,"endCol":43}]},"3063":{"partial":false,"source":"        return {","missing":[{}]},"3064":{"partial":false,"source":"            type: Syntax.WhileStatement,","missing":[{}]},"3065":{"partial":false,"source":"            test: test,","missing":[{}]},"3066":{"partial":false,"source":"            body: body","missing":[{}]},"3067":{"partial":false,"source":"        };","missing":[{}]},"3071":{"partial":false,"source":"        var token = lex();","missing":[{"startCol":8,"endCol":26},{"startCol":20,"endCol":25}]},"3073":{"partial":false,"source":"        return {","missing":[{}]},"3074":{"partial":false,"source":"            type: Syntax.VariableDeclaration,","missing":[{}]},"3075":{"partial":false,"source":"            declarations: parseVariableDeclarationList(),","missing":[{"startCol":26,"endCol":56},{}]},"3076":{"partial":false,"source":"            kind: token.value","missing":[{}]},"3077":{"partial":false,"source":"        };","missing":[{}]},"3081":{"partial":false,"source":"        var init, test, update, left, right, body, operator, oldInIteration;","missing":[{"startCol":8,"endCol":76}]},"3083":{"partial":false,"source":"        init = test = update = null;","missing":[{"startCol":8,"endCol":36}]},"3085":{"partial":false,"source":"        expectKeyword('for');","missing":[{"startCol":8,"endCol":28}]},"3087":{"partial":false,"source":"        expect('(');","missing":[{"startCol":8,"endCol":19}]},"3089":{"partial":false,"source":"        if (match(';')) {","missing":[{"startCol":12,"endCol":22}]},"3090":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"3092":{"partial":false,"source":"            if (matchKeyword('var') || matchKeyword('let') || matchKeyword('const')) {","missing":[{"startCol":16,"endCol":35},{"startCol":39,"endCol":58},{"startCol":62,"endCol":83}]},"3093":{"partial":false,"source":"                state.allowIn = false;","missing":[{"startCol":16,"endCol":38}]},"3094":{"partial":false,"source":"                init = parseForVariableDeclaration();","missing":[{"startCol":16,"endCol":53},{"startCol":23,"endCol":52}]},"3095":{"partial":false,"source":"                state.allowIn = true;","missing":[{"startCol":16,"endCol":37}]},"3097":{"partial":false,"source":"                if (init.declarations.length === 1) {","missing":[{"startCol":20,"endCol":50}]},"3098":{"partial":false,"source":"                    if (matchKeyword('in') || matchContextualKeyword('of')) {","missing":[{"startCol":24,"endCol":42},{"startCol":46,"endCol":74}]},"3099":{"partial":false,"source":"                        operator = lookahead();","missing":[{"startCol":24,"endCol":47},{"startCol":35,"endCol":46}]},"3100":{"partial":false,"source":"                        if (!((operator.value === 'in' || init.kind !== 'var') && init.declarations[0].init)) {","missing":[{"startCol":29,"endCol":108},{"startCol":30,"endCol":78},{"startCol":31,"endCol":54},{"startCol":58,"endCol":77}]},"3101":{"partial":false,"source":"                            lex();","missing":[{"startCol":28,"endCol":33}]},"3102":{"partial":false,"source":"                            left = init;","missing":[{"startCol":28,"endCol":40}]},"3103":{"partial":false,"source":"                            right = parseExpression();","missing":[{"startCol":28,"endCol":54},{"startCol":36,"endCol":53}]},"3104":{"partial":false,"source":"                            init = null;","missing":[{"startCol":28,"endCol":40}]},"3109":{"partial":false,"source":"                state.allowIn = false;","missing":[{"startCol":16,"endCol":38}]},"3110":{"partial":false,"source":"                init = parseExpression();","missing":[{"startCol":16,"endCol":41},{"startCol":23,"endCol":40}]},"3111":{"partial":false,"source":"                state.allowIn = true;","missing":[{"startCol":16,"endCol":37}]},"3113":{"partial":false,"source":"                if (matchContextualKeyword('of')) {","missing":[{"startCol":20,"endCol":48}]},"3114":{"partial":false,"source":"                    operator = lex();","missing":[{"startCol":20,"endCol":37},{"startCol":31,"endCol":36}]},"3115":{"partial":false,"source":"                    left = init;","missing":[{"startCol":20,"endCol":32}]},"3116":{"partial":false,"source":"                    right = parseExpression();","missing":[{"startCol":20,"endCol":46},{"startCol":28,"endCol":45}]},"3117":{"partial":false,"source":"                    init = null;","missing":[{"startCol":20,"endCol":32}]},"3118":{"partial":false,"source":"                } else if (matchKeyword('in')) {","missing":[{"startCol":27,"endCol":45}]},"3120":{"partial":false,"source":"                    if (!isAssignableLeftHandSide(init)) {","missing":[{"startCol":25,"endCol":55}]},"3121":{"partial":false,"source":"                        throwError({}, Messages.InvalidLHSInForIn);","missing":[{"startCol":24,"endCol":66}]},"3123":{"partial":false,"source":"                    operator = lex();","missing":[{"startCol":20,"endCol":37},{"startCol":31,"endCol":36}]},"3124":{"partial":false,"source":"                    left = init;","missing":[{"startCol":20,"endCol":32}]},"3125":{"partial":false,"source":"                    right = parseExpression();","missing":[{"startCol":20,"endCol":46},{"startCol":28,"endCol":45}]},"3126":{"partial":false,"source":"                    init = null;","missing":[{"startCol":20,"endCol":32}]},"3130":{"partial":false,"source":"            if (typeof left === 'undefined') {","missing":[{"startCol":16,"endCol":43}]},"3131":{"partial":false,"source":"                expect(';');","missing":[{"startCol":16,"endCol":27}]},"3135":{"partial":false,"source":"        if (typeof left === 'undefined') {","missing":[{"startCol":12,"endCol":39}]},"3137":{"partial":false,"source":"            if (!match(';')) {","missing":[{"startCol":17,"endCol":27}]},"3138":{"partial":false,"source":"                test = parseExpression();","missing":[{"startCol":16,"endCol":41},{"startCol":23,"endCol":40}]},"3140":{"partial":false,"source":"            expect(';');","missing":[{"startCol":12,"endCol":23}]},"3142":{"partial":false,"source":"            if (!match(')')) {","missing":[{"startCol":17,"endCol":27}]},"3143":{"partial":false,"source":"                update = parseExpression();","missing":[{"startCol":16,"endCol":43},{"startCol":25,"endCol":42}]},"3147":{"partial":false,"source":"        expect(')');","missing":[{"startCol":8,"endCol":19}]},"3149":{"partial":false,"source":"        oldInIteration = state.inIteration;","missing":[{"startCol":8,"endCol":43}]},"3150":{"partial":false,"source":"        state.inIteration = true;","missing":[{"startCol":8,"endCol":33}]},"3152":{"partial":false,"source":"        body = parseStatement();","missing":[{"startCol":8,"endCol":32},{"startCol":15,"endCol":31}]},"3154":{"partial":false,"source":"        state.inIteration = oldInIteration;","missing":[{"startCol":8,"endCol":43}]},"3156":{"partial":false,"source":"        if (typeof left === 'undefined') {","missing":[{"startCol":12,"endCol":39}]},"3157":{"partial":false,"source":"            return {","missing":[{}]},"3158":{"partial":false,"source":"                type: Syntax.ForStatement,","missing":[{}]},"3159":{"partial":false,"source":"                init: init,","missing":[{}]},"3160":{"partial":false,"source":"                test: test,","missing":[{}]},"3161":{"partial":false,"source":"                update: update,","missing":[{}]},"3162":{"partial":false,"source":"                body: body","missing":[{}]},"3163":{"partial":false,"source":"            };","missing":[{}]},"3166":{"partial":false,"source":"        if (operator.value === 'in') {","missing":[{"startCol":12,"endCol":35}]},"3167":{"partial":false,"source":"            return {","missing":[{}]},"3168":{"partial":false,"source":"                type: Syntax.ForInStatement,","missing":[{}]},"3169":{"partial":false,"source":"                left: left,","missing":[{}]},"3170":{"partial":false,"source":"                right: right,","missing":[{}]},"3171":{"partial":false,"source":"                body: body,","missing":[{}]},"3172":{"partial":false,"source":"                each: false","missing":[{}]},"3173":{"partial":false,"source":"            };","missing":[{}]},"3175":{"partial":false,"source":"            return {","missing":[{}]},"3176":{"partial":false,"source":"                type: Syntax.ForOfStatement,","missing":[{}]},"3177":{"partial":false,"source":"                left: left,","missing":[{}]},"3178":{"partial":false,"source":"                right: right,","missing":[{}]},"3179":{"partial":false,"source":"                body: body","missing":[{}]},"3180":{"partial":false,"source":"            };","missing":[{}]},"3187":{"partial":false,"source":"        var token, label = null;","missing":[{"startCol":8,"endCol":32}]},"3189":{"partial":false,"source":"        expectKeyword('continue');","missing":[{"startCol":8,"endCol":33}]},"3192":{"partial":false,"source":"        if (source[index] === ';') {","missing":[{"startCol":12,"endCol":33}]},"3193":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"3196":{"partial":false,"source":"                throwError({}, Messages.IllegalContinue);","missing":[{"startCol":16,"endCol":56}]},"3199":{"partial":false,"source":"            return {","missing":[{}]},"3200":{"partial":false,"source":"                type: Syntax.ContinueStatement,","missing":[{}]},"3201":{"partial":false,"source":"                label: null","missing":[{}]},"3202":{"partial":false,"source":"            };","missing":[{}]},"3205":{"partial":false,"source":"        if (peekLineTerminator()) {","missing":[{"startCol":12,"endCol":32}]},"3207":{"partial":false,"source":"                throwError({}, Messages.IllegalContinue);","missing":[{"startCol":16,"endCol":56}]},"3210":{"partial":false,"source":"            return {","missing":[{}]},"3211":{"partial":false,"source":"                type: Syntax.ContinueStatement,","missing":[{}]},"3212":{"partial":false,"source":"                label: null","missing":[{}]},"3213":{"partial":false,"source":"            };","missing":[{}]},"3216":{"partial":false,"source":"        token = lookahead();","missing":[{"startCol":8,"endCol":28},{"startCol":16,"endCol":27}]},"3217":{"partial":false,"source":"        if (token.type === Token.Identifier) {","missing":[{"startCol":12,"endCol":43}]},"3218":{"partial":false,"source":"            label = parseVariableIdentifier();","missing":[{"startCol":12,"endCol":46},{"startCol":20,"endCol":45}]},"3220":{"partial":false,"source":"            if (!Object.prototype.hasOwnProperty.call(state.labelSet, label.name)) {","missing":[{"startCol":17,"endCol":81}]},"3221":{"partial":false,"source":"                throwError({}, Messages.UnknownLabel, label.name);","missing":[{"startCol":16,"endCol":65}]},"3225":{"partial":false,"source":"        consumeSemicolon();","missing":[{"startCol":8,"endCol":26}]},"3227":{"partial":false,"source":"        if (label === null && !state.inIteration) {","missing":[{"startCol":12,"endCol":26}]},"3228":{"partial":false,"source":"            throwError({}, Messages.IllegalContinue);","missing":[{"startCol":12,"endCol":52}]},"3231":{"partial":false,"source":"        return {","missing":[{}]},"3232":{"partial":false,"source":"            type: Syntax.ContinueStatement,","missing":[{}]},"3233":{"partial":false,"source":"            label: label","missing":[{}]},"3234":{"partial":false,"source":"        };","missing":[{}]},"3240":{"partial":false,"source":"        var token, label = null;","missing":[{"startCol":8,"endCol":32}]},"3242":{"partial":false,"source":"        expectKeyword('break');","missing":[{"startCol":8,"endCol":30}]},"3245":{"partial":false,"source":"        if (source[index] === ';') {","missing":[{"startCol":12,"endCol":33}]},"3246":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"3248":{"partial":false,"source":"            if (!(state.inIteration || state.inSwitch)) {","missing":[{"startCol":17,"endCol":54}]},"3249":{"partial":false,"source":"                throwError({}, Messages.IllegalBreak);","missing":[{"startCol":16,"endCol":53}]},"3252":{"partial":false,"source":"            return {","missing":[{}]},"3253":{"partial":false,"source":"                type: Syntax.BreakStatement,","missing":[{}]},"3254":{"partial":false,"source":"                label: null","missing":[{}]},"3255":{"partial":false,"source":"            };","missing":[{}]},"3258":{"partial":false,"source":"        if (peekLineTerminator()) {","missing":[{"startCol":12,"endCol":32}]},"3259":{"partial":false,"source":"            if (!(state.inIteration || state.inSwitch)) {","missing":[{"startCol":17,"endCol":54}]},"3260":{"partial":false,"source":"                throwError({}, Messages.IllegalBreak);","missing":[{"startCol":16,"endCol":53}]},"3263":{"partial":false,"source":"            return {","missing":[{}]},"3264":{"partial":false,"source":"                type: Syntax.BreakStatement,","missing":[{}]},"3265":{"partial":false,"source":"                label: null","missing":[{}]},"3266":{"partial":false,"source":"            };","missing":[{}]},"3269":{"partial":false,"source":"        token = lookahead();","missing":[{"startCol":8,"endCol":28},{"startCol":16,"endCol":27}]},"3270":{"partial":false,"source":"        if (token.type === Token.Identifier) {","missing":[{"startCol":12,"endCol":43}]},"3271":{"partial":false,"source":"            label = parseVariableIdentifier();","missing":[{"startCol":12,"endCol":46},{"startCol":20,"endCol":45}]},"3273":{"partial":false,"source":"            if (!Object.prototype.hasOwnProperty.call(state.labelSet, label.name)) {","missing":[{"startCol":17,"endCol":81}]},"3274":{"partial":false,"source":"                throwError({}, Messages.UnknownLabel, label.name);","missing":[{"startCol":16,"endCol":65}]},"3278":{"partial":false,"source":"        consumeSemicolon();","missing":[{"startCol":8,"endCol":26}]},"3280":{"partial":false,"source":"        if (label === null && !(state.inIteration || state.inSwitch)) {","missing":[{"startCol":12,"endCol":26},{"startCol":31,"endCol":68}]},"3281":{"partial":false,"source":"            throwError({}, Messages.IllegalBreak);","missing":[{"startCol":12,"endCol":49}]},"3284":{"partial":false,"source":"        return {","missing":[{}]},"3285":{"partial":false,"source":"            type: Syntax.BreakStatement,","missing":[{}]},"3286":{"partial":false,"source":"            label: label","missing":[{}]},"3287":{"partial":false,"source":"        };","missing":[{}]},"3293":{"partial":false,"source":"        var token, argument = null;","missing":[{"startCol":8,"endCol":35}]},"3295":{"partial":false,"source":"        expectKeyword('return');","missing":[{"startCol":8,"endCol":31}]},"3298":{"partial":false,"source":"            throwErrorTolerant({}, Messages.IllegalReturn);","missing":[{"startCol":12,"endCol":58}]},"3302":{"partial":false,"source":"        if (source[index] === ' ') {","missing":[{"startCol":12,"endCol":33}]},"3303":{"partial":false,"source":"            if (isIdentifierStart(source[index + 1])) {","missing":[{"startCol":16,"endCol":52},{"startCol":41,"endCol":50}]},"3304":{"partial":false,"source":"                argument = parseExpression();","missing":[{"startCol":16,"endCol":45},{"startCol":27,"endCol":44}]},"3305":{"partial":false,"source":"                consumeSemicolon();","missing":[{"startCol":16,"endCol":34}]},"3306":{"partial":false,"source":"                return {","missing":[{}]},"3307":{"partial":false,"source":"                    type: Syntax.ReturnStatement,","missing":[{}]},"3308":{"partial":false,"source":"                    argument: argument","missing":[{}]},"3309":{"partial":false,"source":"                };","missing":[{}]},"3313":{"partial":false,"source":"        if (peekLineTerminator()) {","missing":[{"startCol":12,"endCol":32}]},"3314":{"partial":false,"source":"            return {","missing":[{}]},"3315":{"partial":false,"source":"                type: Syntax.ReturnStatement,","missing":[{}]},"3316":{"partial":false,"source":"                argument: null","missing":[{}]},"3317":{"partial":false,"source":"            };","missing":[{}]},"3320":{"partial":false,"source":"        if (!match(';')) {","missing":[{"startCol":13,"endCol":23}]},"3321":{"partial":false,"source":"            token = lookahead();","missing":[{"startCol":12,"endCol":32},{"startCol":20,"endCol":31}]},"3322":{"partial":false,"source":"            if (!match('}') && token.type !== Token.EOF) {","missing":[{"startCol":16,"endCol":55},{"startCol":17,"endCol":27},{"startCol":31,"endCol":55}]},"3323":{"partial":false,"source":"                argument = parseExpression();","missing":[{"startCol":16,"endCol":45},{"startCol":27,"endCol":44}]},"3327":{"partial":false,"source":"        consumeSemicolon();","missing":[{"startCol":8,"endCol":26}]},"3329":{"partial":false,"source":"        return {","missing":[{}]},"3330":{"partial":false,"source":"            type: Syntax.ReturnStatement,","missing":[{}]},"3331":{"partial":false,"source":"            argument: argument","missing":[{}]},"3332":{"partial":false,"source":"        };","missing":[{}]},"3338":{"partial":false,"source":"        var object, body;","missing":[{"startCol":8,"endCol":25}]},"3341":{"partial":false,"source":"            throwErrorTolerant({}, Messages.StrictModeWith);","missing":[{"startCol":12,"endCol":59}]},"3344":{"partial":false,"source":"        expectKeyword('with');","missing":[{"startCol":8,"endCol":29}]},"3346":{"partial":false,"source":"        expect('(');","missing":[{"startCol":8,"endCol":19}]},"3348":{"partial":false,"source":"        object = parseExpression();","missing":[{"startCol":8,"endCol":35},{"startCol":17,"endCol":34}]},"3350":{"partial":false,"source":"        expect(')');","missing":[{"startCol":8,"endCol":19}]},"3352":{"partial":false,"source":"        body = parseStatement();","missing":[{"startCol":8,"endCol":32},{"startCol":15,"endCol":31}]},"3354":{"partial":false,"source":"        return {","missing":[{}]},"3355":{"partial":false,"source":"            type: Syntax.WithStatement,","missing":[{}]},"3356":{"partial":false,"source":"            object: object,","missing":[{}]},"3357":{"partial":false,"source":"            body: body","missing":[{}]},"3358":{"partial":false,"source":"        };","missing":[{}]},"3364":{"partial":false,"source":"        var test,","missing":[{}]},"3365":{"partial":false,"source":"            consequent = [],","missing":[{}]},"3366":{"partial":false,"source":"            statement;","missing":[{}]},"3368":{"partial":false,"source":"        if (matchKeyword('default')) {","missing":[{"startCol":12,"endCol":35}]},"3369":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"3370":{"partial":false,"source":"            test = null;","missing":[{"startCol":12,"endCol":24}]},"3372":{"partial":false,"source":"            expectKeyword('case');","missing":[{"startCol":12,"endCol":33}]},"3373":{"partial":false,"source":"            test = parseExpression();","missing":[{"startCol":12,"endCol":37},{"startCol":19,"endCol":36}]},"3375":{"partial":false,"source":"        expect(':');","missing":[{"startCol":8,"endCol":19}]},"3377":{"partial":false,"source":"        while (index < length) {","missing":[{"startCol":15,"endCol":29}]},"3378":{"partial":false,"source":"            if (match('}') || matchKeyword('default') || matchKeyword('case')) {","missing":[{"startCol":16,"endCol":26},{"startCol":30,"endCol":53},{"startCol":57,"endCol":77}]},"3381":{"partial":false,"source":"            statement = parseSourceElement();","missing":[{"startCol":12,"endCol":45},{"startCol":24,"endCol":44}]},"3382":{"partial":false,"source":"            if (typeof statement === 'undefined') {","missing":[{"startCol":16,"endCol":48}]},"3385":{"partial":false,"source":"            consequent.push(statement);","missing":[{"startCol":12,"endCol":38}]},"3388":{"partial":false,"source":"        return {","missing":[{}]},"3389":{"partial":false,"source":"            type: Syntax.SwitchCase,","missing":[{}]},"3390":{"partial":false,"source":"            test: test,","missing":[{}]},"3391":{"partial":false,"source":"            consequent: consequent","missing":[{}]},"3392":{"partial":false,"source":"        };","missing":[{}]},"3396":{"partial":false,"source":"        var discriminant, cases, clause, oldInSwitch, defaultFound;","missing":[{"startCol":8,"endCol":67}]},"3398":{"partial":false,"source":"        expectKeyword('switch');","missing":[{"startCol":8,"endCol":31}]},"3400":{"partial":false,"source":"        expect('(');","missing":[{"startCol":8,"endCol":19}]},"3402":{"partial":false,"source":"        discriminant = parseExpression();","missing":[{"startCol":8,"endCol":41},{"startCol":23,"endCol":40}]},"3404":{"partial":false,"source":"        expect(')');","missing":[{"startCol":8,"endCol":19}]},"3406":{"partial":false,"source":"        expect('{');","missing":[{"startCol":8,"endCol":19}]},"3408":{"partial":false,"source":"        if (match('}')) {","missing":[{"startCol":12,"endCol":22}]},"3409":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"3410":{"partial":false,"source":"            return {","missing":[{}]},"3411":{"partial":false,"source":"                type: Syntax.SwitchStatement,","missing":[{}]},"3412":{"partial":false,"source":"                discriminant: discriminant","missing":[{}]},"3413":{"partial":false,"source":"            };","missing":[{}]},"3416":{"partial":false,"source":"        cases = [];","missing":[{"startCol":8,"endCol":19}]},"3418":{"partial":false,"source":"        oldInSwitch = state.inSwitch;","missing":[{"startCol":8,"endCol":37}]},"3419":{"partial":false,"source":"        state.inSwitch = true;","missing":[{"startCol":8,"endCol":30}]},"3420":{"partial":false,"source":"        defaultFound = false;","missing":[{"startCol":8,"endCol":29}]},"3422":{"partial":false,"source":"        while (index < length) {","missing":[{"startCol":15,"endCol":29}]},"3423":{"partial":false,"source":"            if (match('}')) {","missing":[{"startCol":16,"endCol":26}]},"3426":{"partial":false,"source":"            clause = parseSwitchCase();","missing":[{"startCol":12,"endCol":39},{"startCol":21,"endCol":38}]},"3427":{"partial":false,"source":"            if (clause.test === null) {","missing":[{"startCol":16,"endCol":36}]},"3429":{"partial":false,"source":"                    throwError({}, Messages.MultipleDefaultsInSwitch);","missing":[{"startCol":20,"endCol":69}]},"3431":{"partial":false,"source":"                defaultFound = true;","missing":[{"startCol":16,"endCol":36}]},"3433":{"partial":false,"source":"            cases.push(clause);","missing":[{"startCol":12,"endCol":30}]},"3436":{"partial":false,"source":"        state.inSwitch = oldInSwitch;","missing":[{"startCol":8,"endCol":37}]},"3438":{"partial":false,"source":"        expect('}');","missing":[{"startCol":8,"endCol":19}]},"3440":{"partial":false,"source":"        return {","missing":[{}]},"3441":{"partial":false,"source":"            type: Syntax.SwitchStatement,","missing":[{}]},"3442":{"partial":false,"source":"            discriminant: discriminant,","missing":[{}]},"3443":{"partial":false,"source":"            cases: cases","missing":[{}]},"3444":{"partial":false,"source":"        };","missing":[{}]},"3450":{"partial":false,"source":"        var argument;","missing":[{"startCol":8,"endCol":21}]},"3452":{"partial":false,"source":"        expectKeyword('throw');","missing":[{"startCol":8,"endCol":30}]},"3454":{"partial":false,"source":"        if (peekLineTerminator()) {","missing":[{"startCol":12,"endCol":32}]},"3455":{"partial":false,"source":"            throwError({}, Messages.NewlineAfterThrow);","missing":[{"startCol":12,"endCol":54}]},"3458":{"partial":false,"source":"        argument = parseExpression();","missing":[{"startCol":8,"endCol":37},{"startCol":19,"endCol":36}]},"3460":{"partial":false,"source":"        consumeSemicolon();","missing":[{"startCol":8,"endCol":26}]},"3462":{"partial":false,"source":"        return {","missing":[{}]},"3463":{"partial":false,"source":"            type: Syntax.ThrowStatement,","missing":[{}]},"3464":{"partial":false,"source":"            argument: argument","missing":[{}]},"3465":{"partial":false,"source":"        };","missing":[{}]},"3471":{"partial":false,"source":"        var param;","missing":[{"startCol":8,"endCol":18}]},"3473":{"partial":false,"source":"        expectKeyword('catch');","missing":[{"startCol":8,"endCol":30}]},"3475":{"partial":false,"source":"        expect('(');","missing":[{"startCol":8,"endCol":19}]},"3476":{"partial":false,"source":"        if (!match(')')) {","missing":[{"startCol":13,"endCol":23}]},"3477":{"partial":false,"source":"            param = parseExpression();","missing":[{"startCol":12,"endCol":38},{"startCol":20,"endCol":37}]},"3479":{"partial":false,"source":"            if (strict && param.type === Syntax.Identifier && isRestrictedWord(param.name)) {","missing":[{"startCol":16,"endCol":58},{"startCol":26,"endCol":58},{"startCol":62,"endCol":90}]},"3480":{"partial":false,"source":"                throwErrorTolerant({}, Messages.StrictCatchVariable);","missing":[{"startCol":16,"endCol":68}]},"3483":{"partial":false,"source":"        expect(')');","missing":[{"startCol":8,"endCol":19}]},"3485":{"partial":false,"source":"        return {","missing":[{}]},"3486":{"partial":false,"source":"            type: Syntax.CatchClause,","missing":[{}]},"3487":{"partial":false,"source":"            param: param,","missing":[{}]},"3488":{"partial":false,"source":"            guard: null,","missing":[{}]},"3489":{"partial":false,"source":"            body: parseBlock()","missing":[{"startCol":18,"endCol":30},{}]},"3490":{"partial":false,"source":"        };","missing":[{}]},"3494":{"partial":false,"source":"        var block, handlers = [], finalizer = null;","missing":[{"startCol":8,"endCol":51}]},"3496":{"partial":false,"source":"        expectKeyword('try');","missing":[{"startCol":8,"endCol":28}]},"3498":{"partial":false,"source":"        block = parseBlock();","missing":[{"startCol":8,"endCol":29},{"startCol":16,"endCol":28}]},"3500":{"partial":false,"source":"        if (matchKeyword('catch')) {","missing":[{"startCol":12,"endCol":33}]},"3501":{"partial":false,"source":"            handlers.push(parseCatchClause());","missing":[{"startCol":12,"endCol":45},{"startCol":26,"endCol":44}]},"3504":{"partial":false,"source":"        if (matchKeyword('finally')) {","missing":[{"startCol":12,"endCol":35}]},"3505":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"3506":{"partial":false,"source":"            finalizer = parseBlock();","missing":[{"startCol":12,"endCol":37},{"startCol":24,"endCol":36}]},"3509":{"partial":false,"source":"        if (handlers.length === 0 && !finalizer) {","missing":[{"startCol":12,"endCol":33}]},"3510":{"partial":false,"source":"            throwError({}, Messages.NoCatchOrFinally);","missing":[{"startCol":12,"endCol":53}]},"3513":{"partial":false,"source":"        return {","missing":[{}]},"3514":{"partial":false,"source":"            type: Syntax.TryStatement,","missing":[{}]},"3515":{"partial":false,"source":"            block: block,","missing":[{}]},"3516":{"partial":false,"source":"            handlers: handlers,","missing":[{}]},"3517":{"partial":false,"source":"            finalizer: finalizer","missing":[{}]},"3518":{"partial":false,"source":"        };","missing":[{}]},"3524":{"partial":false,"source":"        expectKeyword('debugger');","missing":[{"startCol":8,"endCol":33}]},"3526":{"partial":false,"source":"        consumeSemicolon();","missing":[{"startCol":8,"endCol":26}]},"3528":{"partial":false,"source":"        return {","missing":[{}]},"3529":{"partial":false,"source":"            type: Syntax.DebuggerStatement","missing":[{}]},"3530":{"partial":false,"source":"        };","missing":[{}]},"3536":{"partial":false,"source":"        var token = lookahead(),","missing":[{},{"startCol":20,"endCol":31}]},"3537":{"partial":false,"source":"            expr,","missing":[{}]},"3538":{"partial":false,"source":"            labeledBody;","missing":[{}]},"3540":{"partial":false,"source":"        if (token.type === Token.EOF) {","missing":[{"startCol":12,"endCol":36}]},"3541":{"partial":false,"source":"            throwUnexpected(token);","missing":[{"startCol":12,"endCol":34}]},"3544":{"partial":false,"source":"        if (token.type === Token.Punctuator) {","missing":[{"startCol":12,"endCol":43}]},"3547":{"partial":false,"source":"                return parseEmptyStatement();","missing":[{"startCol":16,"endCol":45},{"startCol":23,"endCol":44}]},"3549":{"partial":false,"source":"                return parseBlock();","missing":[{"startCol":16,"endCol":36},{"startCol":23,"endCol":35}]},"3551":{"partial":false,"source":"                return parseExpressionStatement();","missing":[{"startCol":16,"endCol":50},{"startCol":23,"endCol":49}]},"3557":{"partial":false,"source":"        if (token.type === Token.Keyword) {","missing":[{"startCol":12,"endCol":40}]},"3560":{"partial":false,"source":"                return parseBreakStatement();","missing":[{"startCol":16,"endCol":45},{"startCol":23,"endCol":44}]},"3562":{"partial":false,"source":"                return parseContinueStatement();","missing":[{"startCol":16,"endCol":48},{"startCol":23,"endCol":47}]},"3564":{"partial":false,"source":"                return parseDebuggerStatement();","missing":[{"startCol":16,"endCol":48},{"startCol":23,"endCol":47}]},"3566":{"partial":false,"source":"                return parseDoWhileStatement();","missing":[{"startCol":16,"endCol":47},{"startCol":23,"endCol":46}]},"3568":{"partial":false,"source":"                return parseForStatement();","missing":[{"startCol":16,"endCol":43},{"startCol":23,"endCol":42}]},"3570":{"partial":false,"source":"                return parseFunctionDeclaration();","missing":[{"startCol":16,"endCol":50},{"startCol":23,"endCol":49}]},"3572":{"partial":false,"source":"                return parseClassDeclaration();","missing":[{"startCol":16,"endCol":47},{"startCol":23,"endCol":46}]},"3574":{"partial":false,"source":"                return parseIfStatement();","missing":[{"startCol":16,"endCol":42},{"startCol":23,"endCol":41}]},"3576":{"partial":false,"source":"                return parseReturnStatement();","missing":[{"startCol":16,"endCol":46},{"startCol":23,"endCol":45}]},"3578":{"partial":false,"source":"                return parseSwitchStatement();","missing":[{"startCol":16,"endCol":46},{"startCol":23,"endCol":45}]},"3580":{"partial":false,"source":"                return parseThrowStatement();","missing":[{"startCol":16,"endCol":45},{"startCol":23,"endCol":44}]},"3582":{"partial":false,"source":"                return parseTryStatement();","missing":[{"startCol":16,"endCol":43},{"startCol":23,"endCol":42}]},"3584":{"partial":false,"source":"                return parseVariableStatement();","missing":[{"startCol":16,"endCol":48},{"startCol":23,"endCol":47}]},"3586":{"partial":false,"source":"                return parseWhileStatement();","missing":[{"startCol":16,"endCol":45},{"startCol":23,"endCol":44}]},"3588":{"partial":false,"source":"                return parseWithStatement();","missing":[{"startCol":16,"endCol":44},{"startCol":23,"endCol":43}]},"3594":{"partial":false,"source":"        expr = parseExpression();","missing":[{"startCol":8,"endCol":33},{"startCol":15,"endCol":32}]},"3597":{"partial":false,"source":"        if ((expr.type === Syntax.Identifier) && match(':')) {","missing":[{"startCol":12,"endCol":45},{"startCol":49,"endCol":59}]},"3598":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"3600":{"partial":false,"source":"            if (Object.prototype.hasOwnProperty.call(state.labelSet, expr.name)) {","missing":[{"startCol":16,"endCol":79}]},"3601":{"partial":false,"source":"                throwError({}, Messages.Redeclaration, 'Label', expr.name);","missing":[{"startCol":16,"endCol":74}]},"3604":{"partial":false,"source":"            state.labelSet[expr.name] = true;","missing":[{"startCol":12,"endCol":45}]},"3605":{"partial":false,"source":"            labeledBody = parseStatement();","missing":[{"startCol":12,"endCol":43},{"startCol":26,"endCol":42}]},"3606":{"partial":false,"source":"            delete state.labelSet[expr.name];","missing":[{"startCol":12,"endCol":45}]},"3608":{"partial":false,"source":"            return {","missing":[{}]},"3609":{"partial":false,"source":"                type: Syntax.LabeledStatement,","missing":[{}]},"3610":{"partial":false,"source":"                label: expr,","missing":[{}]},"3611":{"partial":false,"source":"                body: labeledBody","missing":[{}]},"3612":{"partial":false,"source":"            };","missing":[{}]},"3615":{"partial":false,"source":"        consumeSemicolon();","missing":[{"startCol":8,"endCol":26}]},"3617":{"partial":false,"source":"        return {","missing":[{}]},"3618":{"partial":false,"source":"            type: Syntax.ExpressionStatement,","missing":[{}]},"3619":{"partial":false,"source":"            expression: expr","missing":[{}]},"3620":{"partial":false,"source":"        };","missing":[{}]},"3626":{"partial":false,"source":"        if (match('{')) {","missing":[{"startCol":12,"endCol":22}]},"3627":{"partial":false,"source":"            return parseFunctionSourceElements();","missing":[{"startCol":12,"endCol":49},{"startCol":19,"endCol":48}]},"3629":{"partial":false,"source":"            return parseAssignmentExpression();","missing":[{"startCol":12,"endCol":47},{"startCol":19,"endCol":46}]},"3634":{"partial":false,"source":"        var sourceElement, sourceElements = [], token, directive, firstRestricted,","missing":[{}]},"3635":{"partial":false,"source":"            oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody, oldParenthesizedCount;","missing":[{}]},"3637":{"partial":false,"source":"        expect('{');","missing":[{"startCol":8,"endCol":19}]},"3639":{"partial":false,"source":"        while (index < length) {","missing":[{"startCol":15,"endCol":29}]},"3640":{"partial":false,"source":"            token = lookahead();","missing":[{"startCol":12,"endCol":32},{"startCol":20,"endCol":31}]},"3641":{"partial":false,"source":"            if (token.type !== Token.StringLiteral) {","missing":[{"startCol":16,"endCol":50}]},"3645":{"partial":false,"source":"            sourceElement = parseSourceElement();","missing":[{"startCol":12,"endCol":49},{"startCol":28,"endCol":48}]},"3646":{"partial":false,"source":"            sourceElements.push(sourceElement);","missing":[{"startCol":12,"endCol":46}]},"3647":{"partial":false,"source":"            if (sourceElement.expression.type !== Syntax.Literal) {","missing":[{"startCol":16,"endCol":64}]},"3651":{"partial":false,"source":"            directive = sliceSource(token.range[0] + 1, token.range[1] - 1);","missing":[{"startCol":12,"endCol":76},{"startCol":24,"endCol":75},{"startCol":36,"endCol":54},{"startCol":56,"endCol":74}]},"3652":{"partial":false,"source":"            if (directive === 'use strict') {","missing":[{"startCol":16,"endCol":42}]},"3653":{"partial":false,"source":"                strict = true;","missing":[{"startCol":16,"endCol":30}]},"3655":{"partial":false,"source":"                    throwError(firstRestricted, Messages.StrictOctalLiteral);","missing":[{"startCol":20,"endCol":76}]},"3658":{"partial":false,"source":"                if (!firstRestricted && token.octal) {","missing":[{"startCol":20,"endCol":51}]},"3659":{"partial":false,"source":"                    firstRestricted = token;","missing":[{"startCol":20,"endCol":44}]},"3664":{"partial":false,"source":"        oldLabelSet = state.labelSet;","missing":[{"startCol":8,"endCol":37}]},"3665":{"partial":false,"source":"        oldInIteration = state.inIteration;","missing":[{"startCol":8,"endCol":43}]},"3666":{"partial":false,"source":"        oldInSwitch = state.inSwitch;","missing":[{"startCol":8,"endCol":37}]},"3667":{"partial":false,"source":"        oldInFunctionBody = state.inFunctionBody;","missing":[{"startCol":8,"endCol":49}]},"3668":{"partial":false,"source":"        oldParenthesizedCount = state.parenthesizedCount;","missing":[{"startCol":8,"endCol":57}]},"3670":{"partial":false,"source":"        state.labelSet = {};","missing":[{"startCol":8,"endCol":28}]},"3671":{"partial":false,"source":"        state.inIteration = false;","missing":[{"startCol":8,"endCol":34}]},"3672":{"partial":false,"source":"        state.inSwitch = false;","missing":[{"startCol":8,"endCol":31}]},"3673":{"partial":false,"source":"        state.inFunctionBody = true;","missing":[{"startCol":8,"endCol":36}]},"3674":{"partial":false,"source":"        state.parenthesizedCount = 0;","missing":[{"startCol":8,"endCol":37}]},"3676":{"partial":false,"source":"        while (index < length) {","missing":[{"startCol":15,"endCol":29}]},"3677":{"partial":false,"source":"            if (match('}')) {","missing":[{"startCol":16,"endCol":26}]},"3680":{"partial":false,"source":"            sourceElement = parseSourceElement();","missing":[{"startCol":12,"endCol":49},{"startCol":28,"endCol":48}]},"3681":{"partial":false,"source":"            if (typeof sourceElement === 'undefined') {","missing":[{"startCol":16,"endCol":52}]},"3684":{"partial":false,"source":"            sourceElements.push(sourceElement);","missing":[{"startCol":12,"endCol":46}]},"3687":{"partial":false,"source":"        expect('}');","missing":[{"startCol":8,"endCol":19}]},"3689":{"partial":false,"source":"        state.labelSet = oldLabelSet;","missing":[{"startCol":8,"endCol":37}]},"3690":{"partial":false,"source":"        state.inIteration = oldInIteration;","missing":[{"startCol":8,"endCol":43}]},"3691":{"partial":false,"source":"        state.inSwitch = oldInSwitch;","missing":[{"startCol":8,"endCol":37}]},"3692":{"partial":false,"source":"        state.inFunctionBody = oldInFunctionBody;","missing":[{"startCol":8,"endCol":49}]},"3693":{"partial":false,"source":"        state.parenthesizedCount = oldParenthesizedCount;","missing":[{"startCol":8,"endCol":57}]},"3695":{"partial":false,"source":"        return {","missing":[{}]},"3696":{"partial":false,"source":"            type: Syntax.BlockStatement,","missing":[{}]},"3697":{"partial":false,"source":"            body: sourceElements","missing":[{}]},"3698":{"partial":false,"source":"        };","missing":[{}]},"3702":{"partial":false,"source":"        var id, param, params = [], body, token, firstRestricted, message, previousStrict, previousYieldAllowed, paramSet, generator;","missing":[{"startCol":8,"endCol":133}]},"3704":{"partial":false,"source":"        expectKeyword('function');","missing":[{"startCol":8,"endCol":33}]},"3706":{"partial":false,"source":"        generator = false;","missing":[{"startCol":8,"endCol":26}]},"3707":{"partial":false,"source":"        if (match('*')) {","missing":[{"startCol":12,"endCol":22}]},"3708":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"3709":{"partial":false,"source":"            generator = true;","missing":[{"startCol":12,"endCol":29}]},"3712":{"partial":false,"source":"        token = lookahead();","missing":[{"startCol":8,"endCol":28},{"startCol":16,"endCol":27}]},"3714":{"partial":false,"source":"        id = parseVariableIdentifier();","missing":[{"startCol":8,"endCol":39},{"startCol":13,"endCol":38}]},"3716":{"partial":false,"source":"            if (isRestrictedWord(token.value)) {","missing":[{"startCol":16,"endCol":45}]},"3717":{"partial":false,"source":"                throwError(token, Messages.StrictFunctionName);","missing":[{"startCol":16,"endCol":62}]},"3720":{"partial":false,"source":"            if (isRestrictedWord(token.value)) {","missing":[{"startCol":16,"endCol":45}]},"3721":{"partial":false,"source":"                firstRestricted = token;","missing":[{"startCol":16,"endCol":40}]},"3722":{"partial":false,"source":"                message = Messages.StrictFunctionName;","missing":[{"startCol":16,"endCol":54}]},"3723":{"partial":false,"source":"            } else if (isStrictModeReservedWord(token.value)) {","missing":[{"startCol":23,"endCol":60}]},"3724":{"partial":false,"source":"                firstRestricted = token;","missing":[{"startCol":16,"endCol":40}]},"3725":{"partial":false,"source":"                message = Messages.StrictReservedWord;","missing":[{"startCol":16,"endCol":54}]},"3729":{"partial":false,"source":"        expect('(');","missing":[{"startCol":8,"endCol":19}]},"3731":{"partial":false,"source":"        if (!match(')')) {","missing":[{"startCol":13,"endCol":23}]},"3732":{"partial":false,"source":"            paramSet = {};","missing":[{"startCol":12,"endCol":26}]},"3733":{"partial":false,"source":"            while (index < length) {","missing":[{"startCol":19,"endCol":33}]},"3734":{"partial":false,"source":"                token = lookahead();","missing":[{"startCol":16,"endCol":36},{"startCol":24,"endCol":35}]},"3735":{"partial":false,"source":"                param = parseVariableIdentifier();","missing":[{"startCol":16,"endCol":50},{"startCol":24,"endCol":49}]},"3737":{"partial":false,"source":"                    if (isRestrictedWord(token.value)) {","missing":[{"startCol":24,"endCol":53}]},"3738":{"partial":false,"source":"                        throwError(token, Messages.StrictParamName);","missing":[{"startCol":24,"endCol":67}]},"3740":{"partial":false,"source":"                    if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {","missing":[{"startCol":24,"endCol":83}]},"3741":{"partial":false,"source":"                        throwError(token, Messages.StrictParamDupe);","missing":[{"startCol":24,"endCol":67}]},"3744":{"partial":false,"source":"                    if (isRestrictedWord(token.value)) {","missing":[{"startCol":24,"endCol":53}]},"3745":{"partial":false,"source":"                        firstRestricted = token;","missing":[{"startCol":24,"endCol":48}]},"3746":{"partial":false,"source":"                        message = Messages.StrictParamName;","missing":[{"startCol":24,"endCol":59}]},"3747":{"partial":false,"source":"                    } else if (isStrictModeReservedWord(token.value)) {","missing":[{"startCol":31,"endCol":68}]},"3748":{"partial":false,"source":"                        firstRestricted = token;","missing":[{"startCol":24,"endCol":48}]},"3749":{"partial":false,"source":"                        message = Messages.StrictReservedWord;","missing":[{"startCol":24,"endCol":62}]},"3750":{"partial":false,"source":"                    } else if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {","missing":[{"startCol":31,"endCol":90}]},"3751":{"partial":false,"source":"                        firstRestricted = token;","missing":[{"startCol":24,"endCol":48}]},"3752":{"partial":false,"source":"                        message = Messages.StrictParamDupe;","missing":[{"startCol":24,"endCol":59}]},"3755":{"partial":false,"source":"                params.push(param);","missing":[{"startCol":16,"endCol":34}]},"3756":{"partial":false,"source":"                paramSet[param.name] = true;","missing":[{"startCol":16,"endCol":44}]},"3757":{"partial":false,"source":"                if (match(')')) {","missing":[{"startCol":20,"endCol":30}]},"3760":{"partial":false,"source":"                expect(',');","missing":[{"startCol":16,"endCol":27}]},"3764":{"partial":false,"source":"        expect(')');","missing":[{"startCol":8,"endCol":19}]},"3766":{"partial":false,"source":"        previousStrict = strict;","missing":[{"startCol":8,"endCol":32}]},"3767":{"partial":false,"source":"        previousYieldAllowed = yieldAllowed;","missing":[{"startCol":8,"endCol":44}]},"3768":{"partial":false,"source":"        yieldAllowed = generator;","missing":[{"startCol":8,"endCol":33}]},"3769":{"partial":false,"source":"        body = parseFunctionSourceElements();","missing":[{"startCol":8,"endCol":45},{"startCol":15,"endCol":44}]},"3770":{"partial":false,"source":"        if (strict && firstRestricted) {","missing":[{"startCol":12,"endCol":37}]},"3771":{"partial":false,"source":"            throwError(firstRestricted, message);","missing":[{"startCol":12,"endCol":48}]},"3773":{"partial":false,"source":"        if (yieldAllowed && !yieldFound) {","missing":[{"startCol":12,"endCol":39}]},"3774":{"partial":false,"source":"            throwError({}, Messages.NoYieldInGenerator);","missing":[{"startCol":12,"endCol":55}]},"3776":{"partial":false,"source":"        strict = previousStrict;","missing":[{"startCol":8,"endCol":32}]},"3777":{"partial":false,"source":"        yieldAllowed = previousYieldAllowed;","missing":[{"startCol":8,"endCol":44}]},"3779":{"partial":false,"source":"        return {","missing":[{}]},"3780":{"partial":false,"source":"            type: Syntax.FunctionDeclaration,","missing":[{}]},"3781":{"partial":false,"source":"            id: id,","missing":[{}]},"3782":{"partial":false,"source":"            params: params,","missing":[{}]},"3783":{"partial":false,"source":"            defaults: [],","missing":[{}]},"3784":{"partial":false,"source":"            body: body,","missing":[{}]},"3785":{"partial":false,"source":"            rest: null,","missing":[{}]},"3786":{"partial":false,"source":"            generator: generator,","missing":[{}]},"3787":{"partial":false,"source":"            expression: false","missing":[{}]},"3788":{"partial":false,"source":"        };","missing":[{}]},"3792":{"partial":false,"source":"        var token, id = null, firstRestricted, message, param, params = [], body, previousStrict, previousYieldAllowed, paramSet, generator;","missing":[{"startCol":8,"endCol":140}]},"3794":{"partial":false,"source":"        expectKeyword('function');","missing":[{"startCol":8,"endCol":33}]},"3796":{"partial":false,"source":"        generator = false;","missing":[{"startCol":8,"endCol":26}]},"3798":{"partial":false,"source":"        if (match('*')) {","missing":[{"startCol":12,"endCol":22}]},"3799":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"3800":{"partial":false,"source":"            generator = true;","missing":[{"startCol":12,"endCol":29}]},"3803":{"partial":false,"source":"        if (!match('(')) {","missing":[{"startCol":13,"endCol":23}]},"3804":{"partial":false,"source":"            token = lookahead();","missing":[{"startCol":12,"endCol":32},{"startCol":20,"endCol":31}]},"3805":{"partial":false,"source":"            id = parseVariableIdentifier();","missing":[{"startCol":12,"endCol":43},{"startCol":17,"endCol":42}]},"3807":{"partial":false,"source":"                if (isRestrictedWord(token.value)) {","missing":[{"startCol":20,"endCol":49}]},"3808":{"partial":false,"source":"                    throwError(token, Messages.StrictFunctionName);","missing":[{"startCol":20,"endCol":66}]},"3811":{"partial":false,"source":"                if (isRestrictedWord(token.value)) {","missing":[{"startCol":20,"endCol":49}]},"3812":{"partial":false,"source":"                    firstRestricted = token;","missing":[{"startCol":20,"endCol":44}]},"3813":{"partial":false,"source":"                    message = Messages.StrictFunctionName;","missing":[{"startCol":20,"endCol":58}]},"3814":{"partial":false,"source":"                } else if (isStrictModeReservedWord(token.value)) {","missing":[{"startCol":27,"endCol":64}]},"3815":{"partial":false,"source":"                    firstRestricted = token;","missing":[{"startCol":20,"endCol":44}]},"3816":{"partial":false,"source":"                    message = Messages.StrictReservedWord;","missing":[{"startCol":20,"endCol":58}]},"3821":{"partial":false,"source":"        expect('(');","missing":[{"startCol":8,"endCol":19}]},"3823":{"partial":false,"source":"        if (!match(')')) {","missing":[{"startCol":13,"endCol":23}]},"3824":{"partial":false,"source":"            paramSet = {};","missing":[{"startCol":12,"endCol":26}]},"3825":{"partial":false,"source":"            while (index < length) {","missing":[{"startCol":19,"endCol":33}]},"3826":{"partial":false,"source":"                token = lookahead();","missing":[{"startCol":16,"endCol":36},{"startCol":24,"endCol":35}]},"3827":{"partial":false,"source":"                param = parseVariableIdentifier();","missing":[{"startCol":16,"endCol":50},{"startCol":24,"endCol":49}]},"3829":{"partial":false,"source":"                    if (isRestrictedWord(token.value)) {","missing":[{"startCol":24,"endCol":53}]},"3830":{"partial":false,"source":"                        throwError(token, Messages.StrictParamName);","missing":[{"startCol":24,"endCol":67}]},"3832":{"partial":false,"source":"                    if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {","missing":[{"startCol":24,"endCol":83}]},"3833":{"partial":false,"source":"                        throwError(token, Messages.StrictParamDupe);","missing":[{"startCol":24,"endCol":67}]},"3836":{"partial":false,"source":"                    if (isRestrictedWord(token.value)) {","missing":[{"startCol":24,"endCol":53}]},"3837":{"partial":false,"source":"                        firstRestricted = token;","missing":[{"startCol":24,"endCol":48}]},"3838":{"partial":false,"source":"                        message = Messages.StrictParamName;","missing":[{"startCol":24,"endCol":59}]},"3839":{"partial":false,"source":"                    } else if (isStrictModeReservedWord(token.value)) {","missing":[{"startCol":31,"endCol":68}]},"3840":{"partial":false,"source":"                        firstRestricted = token;","missing":[{"startCol":24,"endCol":48}]},"3841":{"partial":false,"source":"                        message = Messages.StrictReservedWord;","missing":[{"startCol":24,"endCol":62}]},"3842":{"partial":false,"source":"                    } else if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {","missing":[{"startCol":31,"endCol":90}]},"3843":{"partial":false,"source":"                        firstRestricted = token;","missing":[{"startCol":24,"endCol":48}]},"3844":{"partial":false,"source":"                        message = Messages.StrictParamDupe;","missing":[{"startCol":24,"endCol":59}]},"3847":{"partial":false,"source":"                params.push(param);","missing":[{"startCol":16,"endCol":34}]},"3848":{"partial":false,"source":"                paramSet[param.name] = true;","missing":[{"startCol":16,"endCol":44}]},"3849":{"partial":false,"source":"                if (match(')')) {","missing":[{"startCol":20,"endCol":30}]},"3852":{"partial":false,"source":"                expect(',');","missing":[{"startCol":16,"endCol":27}]},"3856":{"partial":false,"source":"        expect(')');","missing":[{"startCol":8,"endCol":19}]},"3858":{"partial":false,"source":"        previousStrict = strict;","missing":[{"startCol":8,"endCol":32}]},"3859":{"partial":false,"source":"        previousYieldAllowed = yieldAllowed;","missing":[{"startCol":8,"endCol":44}]},"3860":{"partial":false,"source":"        yieldAllowed = generator;","missing":[{"startCol":8,"endCol":33}]},"3861":{"partial":false,"source":"        body = parseFunctionSourceElements();","missing":[{"startCol":8,"endCol":45},{"startCol":15,"endCol":44}]},"3862":{"partial":false,"source":"        if (strict && firstRestricted) {","missing":[{"startCol":12,"endCol":37}]},"3863":{"partial":false,"source":"            throwError(firstRestricted, message);","missing":[{"startCol":12,"endCol":48}]},"3865":{"partial":false,"source":"        if (yieldAllowed && !yieldFound) {","missing":[{"startCol":12,"endCol":39}]},"3866":{"partial":false,"source":"            throwError({}, Messages.NoYieldInGenerator);","missing":[{"startCol":12,"endCol":55}]},"3868":{"partial":false,"source":"        strict = previousStrict;","missing":[{"startCol":8,"endCol":32}]},"3869":{"partial":false,"source":"        yieldAllowed = previousYieldAllowed;","missing":[{"startCol":8,"endCol":44}]},"3872":{"partial":false,"source":"        return {","missing":[{}]},"3873":{"partial":false,"source":"            type: Syntax.FunctionExpression,","missing":[{}]},"3874":{"partial":false,"source":"            id: id,","missing":[{}]},"3875":{"partial":false,"source":"            params: params,","missing":[{}]},"3876":{"partial":false,"source":"            defaults: [],","missing":[{}]},"3877":{"partial":false,"source":"            body: body,","missing":[{}]},"3878":{"partial":false,"source":"            rest: null,","missing":[{}]},"3879":{"partial":false,"source":"            generator: generator,","missing":[{}]},"3880":{"partial":false,"source":"            expression: false","missing":[{}]},"3881":{"partial":false,"source":"        };","missing":[{}]},"3885":{"partial":false,"source":"        var delegate, expr, previousYieldAllowed;","missing":[{"startCol":8,"endCol":49}]},"3887":{"partial":false,"source":"        expectKeyword('yield');","missing":[{"startCol":8,"endCol":30}]},"3890":{"partial":false,"source":"            throwErrorTolerant({}, Messages.IllegalYield);","missing":[{"startCol":12,"endCol":57}]},"3893":{"partial":false,"source":"        delegate = false;","missing":[{"startCol":8,"endCol":25}]},"3894":{"partial":false,"source":"        if (match('*')) {","missing":[{"startCol":12,"endCol":22}]},"3895":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"3896":{"partial":false,"source":"            delegate = true;","missing":[{"startCol":12,"endCol":28}]},"3900":{"partial":false,"source":"        previousYieldAllowed = yieldAllowed;","missing":[{"startCol":8,"endCol":44}]},"3901":{"partial":false,"source":"        yieldAllowed = false;","missing":[{"startCol":8,"endCol":29}]},"3902":{"partial":false,"source":"        expr = parseAssignmentExpression();","missing":[{"startCol":8,"endCol":43},{"startCol":15,"endCol":42}]},"3903":{"partial":false,"source":"        yieldAllowed = previousYieldAllowed;","missing":[{"startCol":8,"endCol":44}]},"3904":{"partial":false,"source":"        yieldFound = true;","missing":[{"startCol":8,"endCol":26}]},"3906":{"partial":false,"source":"        return {","missing":[{}]},"3907":{"partial":false,"source":"            type: Syntax.YieldExpression,","missing":[{}]},"3908":{"partial":false,"source":"            argument: expr,","missing":[{}]},"3909":{"partial":false,"source":"            delegate: delegate","missing":[{}]},"3910":{"partial":false,"source":"        };","missing":[{}]},"3916":{"partial":false,"source":"        var token, key, param;","missing":[{"startCol":8,"endCol":30}]},"3918":{"partial":false,"source":"        if (match('*')) {","missing":[{"startCol":12,"endCol":22}]},"3919":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"3920":{"partial":false,"source":"            return {","missing":[{}]},"3921":{"partial":false,"source":"                type: Syntax.MethodDefinition,","missing":[{}]},"3922":{"partial":false,"source":"                key: parseObjectPropertyKey(),","missing":[{},{"startCol":21,"endCol":45}]},"3923":{"partial":false,"source":"                value: parsePropertyMethodFunction({ generator: true }),","missing":[{},{"startCol":23,"endCol":71}]},"3924":{"partial":false,"source":"                kind: ''","missing":[{}]},"3925":{"partial":false,"source":"            };","missing":[{}]},"3928":{"partial":false,"source":"        token = lookahead();","missing":[{"startCol":8,"endCol":28},{"startCol":16,"endCol":27}]},"3929":{"partial":false,"source":"        key = parseObjectPropertyKey();","missing":[{"startCol":8,"endCol":39},{"startCol":14,"endCol":38}]},"3931":{"partial":false,"source":"        if (token.value === 'get' && !match('(')) {","missing":[{"startCol":12,"endCol":33},{"startCol":38,"endCol":48}]},"3932":{"partial":false,"source":"            key = parseObjectPropertyKey();","missing":[{"startCol":12,"endCol":43},{"startCol":18,"endCol":42}]},"3933":{"partial":false,"source":"            expect('(');","missing":[{"startCol":12,"endCol":23}]},"3934":{"partial":false,"source":"            expect(')');","missing":[{"startCol":12,"endCol":23}]},"3935":{"partial":false,"source":"            return {","missing":[{}]},"3936":{"partial":false,"source":"                type: Syntax.MethodDefinition,","missing":[{}]},"3937":{"partial":false,"source":"                key: key,","missing":[{}]},"3938":{"partial":false,"source":"                value: parsePropertyFunction([], { generator: false }),","missing":[{"startCol":23,"endCol":70},{}]},"3939":{"partial":false,"source":"                kind: 'get'","missing":[{}]},"3940":{"partial":false,"source":"            };","missing":[{}]},"3941":{"partial":false,"source":"        } else if (token.value === 'set' && !match('(')) {","missing":[{"startCol":19,"endCol":40},{"startCol":45,"endCol":55}]},"3942":{"partial":false,"source":"            key = parseObjectPropertyKey();","missing":[{"startCol":12,"endCol":43},{"startCol":18,"endCol":42}]},"3943":{"partial":false,"source":"            expect('(');","missing":[{"startCol":12,"endCol":23}]},"3944":{"partial":false,"source":"            token = lookahead();","missing":[{"startCol":12,"endCol":32},{"startCol":20,"endCol":31}]},"3945":{"partial":false,"source":"            param = [ parseVariableIdentifier() ];","missing":[{"startCol":12,"endCol":50},{"startCol":22,"endCol":47}]},"3946":{"partial":false,"source":"            expect(')');","missing":[{"startCol":12,"endCol":23}]},"3947":{"partial":false,"source":"            return {","missing":[{}]},"3948":{"partial":false,"source":"                type: Syntax.MethodDefinition,","missing":[{}]},"3949":{"partial":false,"source":"                key: key,","missing":[{}]},"3950":{"partial":false,"source":"                value: parsePropertyFunction(param, { generator: false, name: token }),","missing":[{"startCol":23,"endCol":86},{}]},"3951":{"partial":false,"source":"                kind: 'set'","missing":[{}]},"3952":{"partial":false,"source":"            };","missing":[{}]},"3954":{"partial":false,"source":"            return {","missing":[{}]},"3955":{"partial":false,"source":"                type: Syntax.MethodDefinition,","missing":[{}]},"3956":{"partial":false,"source":"                key: key,","missing":[{}]},"3957":{"partial":false,"source":"                value: parsePropertyMethodFunction({ generator: false }),","missing":[{"startCol":23,"endCol":72},{}]},"3958":{"partial":false,"source":"                kind: ''","missing":[{}]},"3959":{"partial":false,"source":"            };","missing":[{}]},"3964":{"partial":false,"source":"        if (match(';')) {","missing":[{"startCol":12,"endCol":22}]},"3965":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"3966":{"partial":false,"source":"            return;","missing":[{"startCol":12,"endCol":19}]},"3968":{"partial":false,"source":"            return parseMethodDefinition();","missing":[{"startCol":12,"endCol":43},{"startCol":19,"endCol":42}]},"3973":{"partial":false,"source":"        var classElement, classElements = [];","missing":[{"startCol":8,"endCol":45}]},"3975":{"partial":false,"source":"        expect('{');","missing":[{"startCol":8,"endCol":19}]},"3977":{"partial":false,"source":"        while (index < length) {","missing":[{"startCol":15,"endCol":29}]},"3978":{"partial":false,"source":"            if (match('}')) {","missing":[{"startCol":16,"endCol":26}]},"3981":{"partial":false,"source":"            classElement = parseClassElement();","missing":[{"startCol":12,"endCol":47},{"startCol":27,"endCol":46}]},"3982":{"partial":false,"source":"            if (typeof classElement !== 'undefined') {","missing":[{"startCol":16,"endCol":51}]},"3983":{"partial":false,"source":"                classElements.push(classElement);","missing":[{"startCol":16,"endCol":48}]},"3987":{"partial":false,"source":"        expect('}');","missing":[{"startCol":8,"endCol":19}]},"3989":{"partial":false,"source":"        return {","missing":[{}]},"3990":{"partial":false,"source":"            type: Syntax.ClassBody,","missing":[{}]},"3991":{"partial":false,"source":"            body: classElements","missing":[{}]},"3992":{"partial":false,"source":"        };","missing":[{}]},"3996":{"partial":false,"source":"        var id, body, previousYieldAllowed, superClass;","missing":[{"startCol":8,"endCol":55}]},"3998":{"partial":false,"source":"        expectKeyword('class');","missing":[{"startCol":8,"endCol":30}]},"4000":{"partial":false,"source":"        if (!matchKeyword('extends') && !match('{')) {","missing":[{"startCol":12,"endCol":51},{"startCol":13,"endCol":36},{"startCol":41,"endCol":51}]},"4001":{"partial":false,"source":"            id = parseVariableIdentifier();","missing":[{"startCol":12,"endCol":43},{"startCol":17,"endCol":42}]},"4004":{"partial":false,"source":"        if (matchKeyword('extends')) {","missing":[{"startCol":12,"endCol":35}]},"4005":{"partial":false,"source":"            expectKeyword('extends');","missing":[{"startCol":12,"endCol":36}]},"4006":{"partial":false,"source":"            previousYieldAllowed = yieldAllowed;","missing":[{"startCol":12,"endCol":48}]},"4007":{"partial":false,"source":"            yieldAllowed = false;","missing":[{"startCol":12,"endCol":33}]},"4008":{"partial":false,"source":"            superClass = parseAssignmentExpression();","missing":[{"startCol":12,"endCol":53},{"startCol":25,"endCol":52}]},"4009":{"partial":false,"source":"            yieldAllowed = previousYieldAllowed;","missing":[{"startCol":12,"endCol":48}]},"4012":{"partial":false,"source":"        body = parseClassBody();","missing":[{"startCol":8,"endCol":32},{"startCol":15,"endCol":31}]},"4013":{"partial":false,"source":"        return {","missing":[{}]},"4014":{"partial":false,"source":"            id: id,","missing":[{}]},"4015":{"partial":false,"source":"            type: Syntax.ClassExpression,","missing":[{}]},"4016":{"partial":false,"source":"            body: body,","missing":[{}]},"4017":{"partial":false,"source":"            superClass: superClass","missing":[{}]},"4018":{"partial":false,"source":"        };","missing":[{}]},"4022":{"partial":false,"source":"        var token, id, body, previousYieldAllowed, superClass;","missing":[{"startCol":8,"endCol":62}]},"4024":{"partial":false,"source":"        expectKeyword('class');","missing":[{"startCol":8,"endCol":30}]},"4026":{"partial":false,"source":"        token = lookahead();","missing":[{"startCol":8,"endCol":28},{"startCol":16,"endCol":27}]},"4027":{"partial":false,"source":"        id = parseVariableIdentifier();","missing":[{"startCol":8,"endCol":39},{"startCol":13,"endCol":38}]},"4029":{"partial":false,"source":"        if (matchKeyword('extends')) {","missing":[{"startCol":12,"endCol":35}]},"4030":{"partial":false,"source":"            expectKeyword('extends');","missing":[{"startCol":12,"endCol":36}]},"4031":{"partial":false,"source":"            previousYieldAllowed = yieldAllowed;","missing":[{"startCol":12,"endCol":48}]},"4032":{"partial":false,"source":"            yieldAllowed = false;","missing":[{"startCol":12,"endCol":33}]},"4033":{"partial":false,"source":"            superClass = parseAssignmentExpression();","missing":[{"startCol":12,"endCol":53},{"startCol":25,"endCol":52}]},"4034":{"partial":false,"source":"            yieldAllowed = previousYieldAllowed;","missing":[{"startCol":12,"endCol":48}]},"4037":{"partial":false,"source":"        body = parseClassBody();","missing":[{"startCol":8,"endCol":32},{"startCol":15,"endCol":31}]},"4038":{"partial":false,"source":"        return {","missing":[{}]},"4039":{"partial":false,"source":"            id: id,","missing":[{}]},"4040":{"partial":false,"source":"            type: Syntax.ClassDeclaration,","missing":[{}]},"4041":{"partial":false,"source":"            body: body,","missing":[{}]},"4042":{"partial":false,"source":"            superClass: superClass","missing":[{}]},"4043":{"partial":false,"source":"        };","missing":[{}]},"4049":{"partial":false,"source":"        var token = lookahead();","missing":[{"startCol":8,"endCol":32},{"startCol":20,"endCol":31}]},"4051":{"partial":false,"source":"        if (token.type === Token.Keyword) {","missing":[{"startCol":12,"endCol":40}]},"4055":{"partial":false,"source":"                return parseConstLetDeclaration(token.value);","missing":[{"startCol":16,"endCol":61},{"startCol":23,"endCol":60}]},"4057":{"partial":false,"source":"                return parseFunctionDeclaration();","missing":[{"startCol":16,"endCol":50},{"startCol":23,"endCol":49}]},"4059":{"partial":false,"source":"                return parseStatement();","missing":[{"startCol":16,"endCol":40},{"startCol":23,"endCol":39}]},"4063":{"partial":false,"source":"        if (token.type !== Token.EOF) {","missing":[{"startCol":12,"endCol":36}]},"4064":{"partial":false,"source":"            return parseStatement();","missing":[{"startCol":12,"endCol":36},{"startCol":19,"endCol":35}]},"4069":{"partial":false,"source":"        var token = lookahead(), lineNumber;","missing":[{"startCol":8,"endCol":44},{"startCol":20,"endCol":31}]},"4071":{"partial":false,"source":"        if (token.type === Token.Keyword) {","missing":[{"startCol":12,"endCol":40}]},"4074":{"partial":false,"source":"                return parseExportDeclaration();","missing":[{"startCol":16,"endCol":48},{"startCol":23,"endCol":47}]},"4076":{"partial":false,"source":"                return parseImportDeclaration();","missing":[{"startCol":16,"endCol":48},{"startCol":23,"endCol":47}]},"4080":{"partial":false,"source":"        if (token.value === 'module' && token.type === Token.Identifier) {","missing":[{"startCol":12,"endCol":36},{"startCol":40,"endCol":71}]},"4081":{"partial":false,"source":"            lineNumber = token.lineNumber;","missing":[{"startCol":12,"endCol":42}]},"4082":{"partial":false,"source":"            token = lookahead2();","missing":[{"startCol":12,"endCol":33},{"startCol":20,"endCol":32}]},"4083":{"partial":false,"source":"            if (token.type === Token.Identifier && token.lineNumber === lineNumber) {","missing":[{"startCol":16,"endCol":47},{"startCol":51,"endCol":82}]},"4084":{"partial":false,"source":"                return parseModuleDeclaration();","missing":[{"startCol":16,"endCol":48},{"startCol":23,"endCol":47}]},"4088":{"partial":false,"source":"        return parseSourceElement();","missing":[{"startCol":8,"endCol":36},{"startCol":15,"endCol":35}]},"4092":{"partial":false,"source":"        var sourceElement, sourceElements = [], token, directive, firstRestricted;","missing":[{"startCol":8,"endCol":82}]},"4094":{"partial":false,"source":"        while (index < length) {","missing":[{"startCol":15,"endCol":29}]},"4095":{"partial":false,"source":"            token = lookahead();","missing":[{"startCol":12,"endCol":32},{"startCol":20,"endCol":31}]},"4096":{"partial":false,"source":"            if (token.type !== Token.StringLiteral) {","missing":[{"startCol":16,"endCol":50}]},"4100":{"partial":false,"source":"            sourceElement = parseProgramElement();","missing":[{"startCol":12,"endCol":50},{"startCol":28,"endCol":49}]},"4101":{"partial":false,"source":"            sourceElements.push(sourceElement);","missing":[{"startCol":12,"endCol":46}]},"4102":{"partial":false,"source":"            if (sourceElement.expression.type !== Syntax.Literal) {","missing":[{"startCol":16,"endCol":64}]},"4106":{"partial":false,"source":"            directive = sliceSource(token.range[0] + 1, token.range[1] - 1);","missing":[{"startCol":12,"endCol":76},{"startCol":24,"endCol":75},{"startCol":36,"endCol":54},{"startCol":56,"endCol":74}]},"4107":{"partial":false,"source":"            if (directive === 'use strict') {","missing":[{"startCol":16,"endCol":42}]},"4108":{"partial":false,"source":"                strict = true;","missing":[{"startCol":16,"endCol":30}]},"4110":{"partial":false,"source":"                    throwError(firstRestricted, Messages.StrictOctalLiteral);","missing":[{"startCol":20,"endCol":76}]},"4113":{"partial":false,"source":"                if (!firstRestricted && token.octal) {","missing":[{"startCol":20,"endCol":51}]},"4114":{"partial":false,"source":"                    firstRestricted = token;","missing":[{"startCol":20,"endCol":44}]},"4119":{"partial":false,"source":"        while (index < length) {","missing":[{"startCol":15,"endCol":29}]},"4120":{"partial":false,"source":"            sourceElement = parseProgramElement();","missing":[{"startCol":12,"endCol":50},{"startCol":28,"endCol":49}]},"4121":{"partial":false,"source":"            if (typeof sourceElement === 'undefined') {","missing":[{"startCol":16,"endCol":52}]},"4124":{"partial":false,"source":"            sourceElements.push(sourceElement);","missing":[{"startCol":12,"endCol":46}]},"4126":{"partial":false,"source":"        return sourceElements;","missing":[{"startCol":8,"endCol":30}]},"4130":{"partial":false,"source":"        return parseProgramElement();","missing":[{"startCol":8,"endCol":37},{"startCol":15,"endCol":36}]},"4134":{"partial":false,"source":"        var list = [],","missing":[{}]},"4135":{"partial":false,"source":"            statement;","missing":[{}]},"4137":{"partial":false,"source":"        while (index < length) {","missing":[{"startCol":15,"endCol":29}]},"4138":{"partial":false,"source":"            if (match('}')) {","missing":[{"startCol":16,"endCol":26}]},"4141":{"partial":false,"source":"            statement = parseModuleElement();","missing":[{"startCol":12,"endCol":45},{"startCol":24,"endCol":44}]},"4142":{"partial":false,"source":"            if (typeof statement === 'undefined') {","missing":[{"startCol":16,"endCol":48}]},"4145":{"partial":false,"source":"            list.push(statement);","missing":[{"startCol":12,"endCol":32}]},"4148":{"partial":false,"source":"        return list;","missing":[{"startCol":8,"endCol":20}]},"4152":{"partial":false,"source":"        var block;","missing":[{"startCol":8,"endCol":18}]},"4154":{"partial":false,"source":"        expect('{');","missing":[{"startCol":8,"endCol":19}]},"4156":{"partial":false,"source":"        block = parseModuleElements();","missing":[{"startCol":8,"endCol":38},{"startCol":16,"endCol":37}]},"4158":{"partial":false,"source":"        expect('}');","missing":[{"startCol":8,"endCol":19}]},"4160":{"partial":false,"source":"        return {","missing":[{}]},"4161":{"partial":false,"source":"            type: Syntax.BlockStatement,","missing":[{}]},"4162":{"partial":false,"source":"            body: block","missing":[{}]},"4163":{"partial":false,"source":"        };","missing":[{}]},"4167":{"partial":false,"source":"        var program;","missing":[{"startCol":8,"endCol":20}]},"4168":{"partial":false,"source":"        strict = false;","missing":[{"startCol":8,"endCol":23}]},"4169":{"partial":false,"source":"        yieldAllowed = false;","missing":[{"startCol":8,"endCol":29}]},"4170":{"partial":false,"source":"        yieldFound = false;","missing":[{"startCol":8,"endCol":27}]},"4171":{"partial":false,"source":"        program = {","missing":[{}]},"4172":{"partial":false,"source":"            type: Syntax.Program,","missing":[{}]},"4173":{"partial":false,"source":"            body: parseProgramElements()","missing":[{"startCol":18,"endCol":40},{}]},"4174":{"partial":false,"source":"        };","missing":[{}]},"4175":{"partial":false,"source":"        return program;","missing":[{"startCol":8,"endCol":23}]},"4182":{"partial":false,"source":"        assert(typeof start === 'number', 'Comment must have valid position');","missing":[{"startCol":8,"endCol":77},{"startCol":15,"endCol":40}]},"4188":{"partial":false,"source":"        if (extra.comments.length > 0) {","missing":[{"startCol":12,"endCol":37}]},"4189":{"partial":false,"source":"            if (extra.comments[extra.comments.length - 1].range[1] > start) {","missing":[{"startCol":16,"endCol":74},{"startCol":31,"endCol":56}]},"4190":{"partial":false,"source":"                return;","missing":[{"startCol":16,"endCol":23}]},"4194":{"partial":false,"source":"        extra.comments.push({","missing":[{}]},"4195":{"partial":false,"source":"            type: type,","missing":[{}]},"4196":{"partial":false,"source":"            value: value,","missing":[{}]},"4197":{"partial":false,"source":"            range: [start, end],","missing":[{}]},"4198":{"partial":false,"source":"            loc: loc","missing":[{}]},"4199":{"partial":false,"source":"        });","missing":[{}]},"4203":{"partial":false,"source":"        var comment, ch, loc, start, blockComment, lineComment;","missing":[{"startCol":8,"endCol":63}]},"4205":{"partial":false,"source":"        comment = '';","missing":[{"startCol":8,"endCol":21}]},"4206":{"partial":false,"source":"        blockComment = false;","missing":[{"startCol":8,"endCol":29}]},"4207":{"partial":false,"source":"        lineComment = false;","missing":[{"startCol":8,"endCol":28}]},"4209":{"partial":false,"source":"        while (index < length) {","missing":[{"startCol":15,"endCol":29}]},"4210":{"partial":false,"source":"            ch = source[index];","missing":[{"startCol":12,"endCol":31}]},"4213":{"partial":false,"source":"                ch = nextChar();","missing":[{"startCol":16,"endCol":32},{"startCol":21,"endCol":31}]},"4214":{"partial":false,"source":"                if (isLineTerminator(ch)) {","missing":[{"startCol":20,"endCol":40}]},"4215":{"partial":false,"source":"                    loc.end = {","missing":[{}]},"4216":{"partial":false,"source":"                        line: lineNumber,","missing":[{}]},"4217":{"partial":false,"source":"                        column: index - lineStart - 1","missing":[{"startCol":32,"endCol":53},{}]},"4218":{"partial":false,"source":"                    };","missing":[{}]},"4219":{"partial":false,"source":"                    lineComment = false;","missing":[{"startCol":20,"endCol":40}]},"4220":{"partial":false,"source":"                    addComment('Line', comment, start, index - 1, loc);","missing":[{"startCol":20,"endCol":70},{"startCol":55,"endCol":64}]},"4221":{"partial":false,"source":"                    if (ch === '\\r' && source[index] === '\\n') {","missing":[{"startCol":24,"endCol":35},{"startCol":39,"endCol":61}]},"4222":{"partial":false,"source":"                        ++index;","missing":[{"startCol":24,"endCol":31}]},"4224":{"partial":false,"source":"                    ++lineNumber;","missing":[{"startCol":20,"endCol":32}]},"4225":{"partial":false,"source":"                    lineStart = index;","missing":[{"startCol":20,"endCol":38}]},"4226":{"partial":false,"source":"                    comment = '';","missing":[{"startCol":20,"endCol":33}]},"4227":{"partial":false,"source":"                } else if (index >= length) {","missing":[{"startCol":27,"endCol":42}]},"4228":{"partial":false,"source":"                    lineComment = false;","missing":[{"startCol":20,"endCol":40}]},"4229":{"partial":false,"source":"                    comment += ch;","missing":[{"startCol":20,"endCol":34}]},"4230":{"partial":false,"source":"                    loc.end = {","missing":[{}]},"4231":{"partial":false,"source":"                        line: lineNumber,","missing":[{}]},"4232":{"partial":false,"source":"                        column: length - lineStart","missing":[{"startCol":32,"endCol":50},{}]},"4233":{"partial":false,"source":"                    };","missing":[{}]},"4234":{"partial":false,"source":"                    addComment('Line', comment, start, length, loc);","missing":[{"startCol":20,"endCol":67}]},"4236":{"partial":false,"source":"                    comment += ch;","missing":[{"startCol":20,"endCol":34}]},"4239":{"partial":false,"source":"                if (isLineTerminator(ch)) {","missing":[{"startCol":20,"endCol":40}]},"4240":{"partial":false,"source":"                    if (ch === '\\r' && source[index + 1] === '\\n') {","missing":[{"startCol":24,"endCol":35},{"startCol":39,"endCol":65},{"startCol":46,"endCol":55}]},"4241":{"partial":false,"source":"                        ++index;","missing":[{"startCol":24,"endCol":31}]},"4242":{"partial":false,"source":"                        comment += '\\r\\n';","missing":[{"startCol":24,"endCol":42}]},"4244":{"partial":false,"source":"                        comment += ch;","missing":[{"startCol":24,"endCol":38}]},"4246":{"partial":false,"source":"                    ++lineNumber;","missing":[{"startCol":20,"endCol":32}]},"4247":{"partial":false,"source":"                    ++index;","missing":[{"startCol":20,"endCol":27}]},"4248":{"partial":false,"source":"                    lineStart = index;","missing":[{"startCol":20,"endCol":38}]},"4249":{"partial":false,"source":"                    if (index >= length) {","missing":[{"startCol":24,"endCol":39}]},"4250":{"partial":false,"source":"                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');","missing":[{"startCol":24,"endCol":75}]},"4253":{"partial":false,"source":"                    ch = nextChar();","missing":[{"startCol":20,"endCol":36},{"startCol":25,"endCol":35}]},"4254":{"partial":false,"source":"                    if (index >= length) {","missing":[{"startCol":24,"endCol":39}]},"4255":{"partial":false,"source":"                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');","missing":[{"startCol":24,"endCol":75}]},"4257":{"partial":false,"source":"                    comment += ch;","missing":[{"startCol":20,"endCol":34}]},"4258":{"partial":false,"source":"                    if (ch === '*') {","missing":[{"startCol":24,"endCol":34}]},"4259":{"partial":false,"source":"                        ch = source[index];","missing":[{"startCol":24,"endCol":43}]},"4260":{"partial":false,"source":"                        if (ch === '/') {","missing":[{"startCol":28,"endCol":38}]},"4261":{"partial":false,"source":"                            comment = comment.substr(0, comment.length - 1);","missing":[{"startCol":28,"endCol":76},{"startCol":38,"endCol":75},{"startCol":56,"endCol":74}]},"4262":{"partial":false,"source":"                            blockComment = false;","missing":[{"startCol":28,"endCol":49}]},"4263":{"partial":false,"source":"                            ++index;","missing":[{"startCol":28,"endCol":35}]},"4264":{"partial":false,"source":"                            loc.end = {","missing":[{}]},"4265":{"partial":false,"source":"                                line: lineNumber,","missing":[{}]},"4266":{"partial":false,"source":"                                column: index - lineStart","missing":[{"startCol":40,"endCol":57},{}]},"4267":{"partial":false,"source":"                            };","missing":[{}]},"4268":{"partial":false,"source":"                            addComment('Block', comment, start, index, loc);","missing":[{"startCol":28,"endCol":75}]},"4269":{"partial":false,"source":"                            comment = '';","missing":[{"startCol":28,"endCol":41}]},"4273":{"partial":false,"source":"            } else if (ch === '/') {","missing":[{"startCol":23,"endCol":33}]},"4274":{"partial":false,"source":"                ch = source[index + 1];","missing":[{"startCol":16,"endCol":39},{"startCol":28,"endCol":37}]},"4275":{"partial":false,"source":"                if (ch === '/') {","missing":[{"startCol":20,"endCol":30}]},"4276":{"partial":false,"source":"                    loc = {","missing":[{}]},"4277":{"partial":false,"source":"                        start: {","missing":[{}]},"4278":{"partial":false,"source":"                            line: lineNumber,","missing":[{}]},"4279":{"partial":false,"source":"                            column: index - lineStart","missing":[{},{"startCol":36,"endCol":53}]},"4280":{"partial":false,"source":"                        }","missing":[{}]},"4281":{"partial":false,"source":"                    };","missing":[{}]},"4282":{"partial":false,"source":"                    start = index;","missing":[{"startCol":20,"endCol":34}]},"4283":{"partial":false,"source":"                    index += 2;","missing":[{"startCol":20,"endCol":31}]},"4284":{"partial":false,"source":"                    lineComment = true;","missing":[{"startCol":20,"endCol":39}]},"4285":{"partial":false,"source":"                    if (index >= length) {","missing":[{"startCol":24,"endCol":39}]},"4286":{"partial":false,"source":"                        loc.end = {","missing":[{}]},"4287":{"partial":false,"source":"                            line: lineNumber,","missing":[{}]},"4288":{"partial":false,"source":"                            column: index - lineStart","missing":[{},{"startCol":36,"endCol":53}]},"4289":{"partial":false,"source":"                        };","missing":[{}]},"4290":{"partial":false,"source":"                        lineComment = false;","missing":[{"startCol":24,"endCol":44}]},"4291":{"partial":false,"source":"                        addComment('Line', comment, start, index, loc);","missing":[{"startCol":24,"endCol":70}]},"4293":{"partial":false,"source":"                } else if (ch === '*') {","missing":[{"startCol":27,"endCol":37}]},"4294":{"partial":false,"source":"                    start = index;","missing":[{"startCol":20,"endCol":34}]},"4295":{"partial":false,"source":"                    index += 2;","missing":[{"startCol":20,"endCol":31}]},"4296":{"partial":false,"source":"                    blockComment = true;","missing":[{"startCol":20,"endCol":40}]},"4297":{"partial":false,"source":"                    loc = {","missing":[{}]},"4298":{"partial":false,"source":"                        start: {","missing":[{}]},"4299":{"partial":false,"source":"                            line: lineNumber,","missing":[{}]},"4300":{"partial":false,"source":"                            column: index - lineStart - 2","missing":[{"startCol":36,"endCol":53},{}]},"4301":{"partial":false,"source":"                        }","missing":[{}]},"4302":{"partial":false,"source":"                    };","missing":[{}]},"4303":{"partial":false,"source":"                    if (index >= length) {","missing":[{"startCol":24,"endCol":39}]},"4304":{"partial":false,"source":"                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');","missing":[{"startCol":24,"endCol":75}]},"4309":{"partial":false,"source":"            } else if (isWhiteSpace(ch)) {","missing":[{"startCol":23,"endCol":39}]},"4310":{"partial":false,"source":"                ++index;","missing":[{"startCol":16,"endCol":23}]},"4311":{"partial":false,"source":"            } else if (isLineTerminator(ch)) {","missing":[{"startCol":23,"endCol":43}]},"4312":{"partial":false,"source":"                ++index;","missing":[{"startCol":16,"endCol":23}]},"4313":{"partial":false,"source":"                if (ch ===  '\\r' && source[index] === '\\n') {","missing":[{"startCol":20,"endCol":32},{"startCol":36,"endCol":58}]},"4314":{"partial":false,"source":"                    ++index;","missing":[{"startCol":20,"endCol":27}]},"4316":{"partial":false,"source":"                ++lineNumber;","missing":[{"startCol":16,"endCol":28}]},"4317":{"partial":false,"source":"                lineStart = index;","missing":[{"startCol":16,"endCol":34}]},"4325":{"partial":false,"source":"        var i, entry, comment, comments = [];","missing":[{"startCol":8,"endCol":45}]},"4327":{"partial":false,"source":"        for (i = 0; i < extra.comments.length; ++i) {","missing":[{"startCol":20,"endCol":45},{"startCol":47,"endCol":50}]},"4328":{"partial":false,"source":"            entry = extra.comments[i];","missing":[{"startCol":12,"endCol":38}]},"4329":{"partial":false,"source":"            comment = {","missing":[{}]},"4330":{"partial":false,"source":"                type: entry.type,","missing":[{}]},"4331":{"partial":false,"source":"                value: entry.value","missing":[{}]},"4332":{"partial":false,"source":"            };","missing":[{}]},"4334":{"partial":false,"source":"                comment.range = entry.range;","missing":[{"startCol":16,"endCol":44}]},"4337":{"partial":false,"source":"                comment.loc = entry.loc;","missing":[{"startCol":16,"endCol":40}]},"4339":{"partial":false,"source":"            comments.push(comment);","missing":[{"startCol":12,"endCol":34}]},"4342":{"partial":false,"source":"        extra.comments = comments;","missing":[{"startCol":8,"endCol":34}]},"4346":{"partial":false,"source":"        var start, loc, token, range, value;","missing":[{"startCol":8,"endCol":44}]},"4348":{"partial":false,"source":"        skipComment();","missing":[{"startCol":8,"endCol":21}]},"4349":{"partial":false,"source":"        start = index;","missing":[{"startCol":8,"endCol":22}]},"4350":{"partial":false,"source":"        loc = {","missing":[{}]},"4351":{"partial":false,"source":"            start: {","missing":[{}]},"4352":{"partial":false,"source":"                line: lineNumber,","missing":[{}]},"4353":{"partial":false,"source":"                column: index - lineStart","missing":[{},{"startCol":24,"endCol":41}]},"4354":{"partial":false,"source":"            }","missing":[{}]},"4355":{"partial":false,"source":"        };","missing":[{}]},"4357":{"partial":false,"source":"        token = extra.advance();","missing":[{"startCol":8,"endCol":32},{"startCol":16,"endCol":31}]},"4358":{"partial":false,"source":"        loc.end = {","missing":[{}]},"4359":{"partial":false,"source":"            line: lineNumber,","missing":[{}]},"4360":{"partial":false,"source":"            column: index - lineStart","missing":[{},{"startCol":20,"endCol":37}]},"4361":{"partial":false,"source":"        };","missing":[{}]},"4363":{"partial":false,"source":"        if (token.type !== Token.EOF) {","missing":[{"startCol":12,"endCol":36}]},"4364":{"partial":false,"source":"            range = [token.range[0], token.range[1]];","missing":[{"startCol":12,"endCol":53}]},"4365":{"partial":false,"source":"            value = sliceSource(token.range[0], token.range[1]);","missing":[{"startCol":12,"endCol":64},{"startCol":20,"endCol":63}]},"4366":{"partial":false,"source":"            extra.tokens.push({","missing":[{}]},"4367":{"partial":false,"source":"                type: TokenName[token.type],","missing":[{}]},"4368":{"partial":false,"source":"                value: value,","missing":[{}]},"4369":{"partial":false,"source":"                range: range,","missing":[{}]},"4370":{"partial":false,"source":"                loc: loc","missing":[{}]},"4371":{"partial":false,"source":"            });","missing":[{}]},"4374":{"partial":false,"source":"        return token;","missing":[{"startCol":8,"endCol":21}]},"4378":{"partial":false,"source":"        var pos, loc, regex, token;","missing":[{"startCol":8,"endCol":35}]},"4380":{"partial":false,"source":"        skipComment();","missing":[{"startCol":8,"endCol":21}]},"4382":{"partial":false,"source":"        pos = index;","missing":[{"startCol":8,"endCol":20}]},"4383":{"partial":false,"source":"        loc = {","missing":[{}]},"4384":{"partial":false,"source":"            start: {","missing":[{}]},"4385":{"partial":false,"source":"                line: lineNumber,","missing":[{}]},"4386":{"partial":false,"source":"                column: index - lineStart","missing":[{},{"startCol":24,"endCol":41}]},"4387":{"partial":false,"source":"            }","missing":[{}]},"4388":{"partial":false,"source":"        };","missing":[{}]},"4390":{"partial":false,"source":"        regex = extra.scanRegExp();","missing":[{"startCol":8,"endCol":35},{"startCol":16,"endCol":34}]},"4391":{"partial":false,"source":"        loc.end = {","missing":[{}]},"4392":{"partial":false,"source":"            line: lineNumber,","missing":[{}]},"4393":{"partial":false,"source":"            column: index - lineStart","missing":[{"startCol":20,"endCol":37},{}]},"4394":{"partial":false,"source":"        };","missing":[{}]},"4397":{"partial":false,"source":"        if (extra.tokens.length > 0) {","missing":[{"startCol":12,"endCol":35}]},"4398":{"partial":false,"source":"            token = extra.tokens[extra.tokens.length - 1];","missing":[{"startCol":12,"endCol":58},{"startCol":33,"endCol":56}]},"4399":{"partial":false,"source":"            if (token.range[0] === pos && token.type === 'Punctuator') {","missing":[{"startCol":16,"endCol":38},{"startCol":42,"endCol":69}]},"4400":{"partial":false,"source":"                if (token.value === '/' || token.value === '/=') {","missing":[{"startCol":20,"endCol":39},{"startCol":43,"endCol":63}]},"4401":{"partial":false,"source":"                    extra.tokens.pop();","missing":[{"startCol":20,"endCol":38}]},"4406":{"partial":false,"source":"        extra.tokens.push({","missing":[{}]},"4407":{"partial":false,"source":"            type: 'RegularExpression',","missing":[{}]},"4408":{"partial":false,"source":"            value: regex.literal,","missing":[{}]},"4409":{"partial":false,"source":"            range: [pos, index],","missing":[{}]},"4410":{"partial":false,"source":"            loc: loc","missing":[{}]},"4411":{"partial":false,"source":"        });","missing":[{}]},"4413":{"partial":false,"source":"        return regex;","missing":[{"startCol":8,"endCol":21}]},"4417":{"partial":false,"source":"        var i, entry, token, tokens = [];","missing":[{"startCol":8,"endCol":41}]},"4419":{"partial":false,"source":"        for (i = 0; i < extra.tokens.length; ++i) {","missing":[{"startCol":20,"endCol":43},{"startCol":45,"endCol":48}]},"4420":{"partial":false,"source":"            entry = extra.tokens[i];","missing":[{"startCol":12,"endCol":36}]},"4421":{"partial":false,"source":"            token = {","missing":[{}]},"4422":{"partial":false,"source":"                type: entry.type,","missing":[{}]},"4423":{"partial":false,"source":"                value: entry.value","missing":[{}]},"4424":{"partial":false,"source":"            };","missing":[{}]},"4426":{"partial":false,"source":"                token.range = entry.range;","missing":[{"startCol":16,"endCol":42}]},"4429":{"partial":false,"source":"                token.loc = entry.loc;","missing":[{"startCol":16,"endCol":38}]},"4431":{"partial":false,"source":"            tokens.push(token);","missing":[{"startCol":12,"endCol":30}]},"4434":{"partial":false,"source":"        extra.tokens = tokens;","missing":[{"startCol":8,"endCol":30}]},"4438":{"partial":false,"source":"        return {","missing":[{}]},"4439":{"partial":false,"source":"            type: Syntax.Literal,","missing":[{}]},"4440":{"partial":false,"source":"            value: token.value","missing":[{}]},"4441":{"partial":false,"source":"        };","missing":[{}]},"4445":{"partial":false,"source":"        return {","missing":[{}]},"4446":{"partial":false,"source":"            type: Syntax.Literal,","missing":[{}]},"4447":{"partial":false,"source":"            value: token.value,","missing":[{}]},"4448":{"partial":false,"source":"            raw: sliceSource(token.range[0], token.range[1])","missing":[{},{"startCol":17,"endCol":60}]},"4449":{"partial":false,"source":"        };","missing":[{}]},"4454":{"partial":false,"source":"        return function (parseFunction) {","missing":[{}]},"4455":{"partial":false,"source":"","missing":[{}]},"4456":{"partial":false,"source":"            function isBinary(node) {","missing":[{}]},"4457":{"partial":false,"source":"                return node.type === Syntax.LogicalExpression ||","missing":[{},{"startCol":23,"endCol":61}]},"4458":{"partial":false,"source":"                    node.type === Syntax.BinaryExpression;","missing":[{},{"startCol":20,"endCol":57}]},"4459":{"partial":false,"source":"            }","missing":[{}]},"4460":{"partial":false,"source":"","missing":[{}]},"4461":{"partial":false,"source":"            function visit(node) {","missing":[{}]},"4462":{"partial":false,"source":"                if (isBinary(node.left)) {","missing":[{"startCol":20,"endCol":39},{}]},"4463":{"partial":false,"source":"                    visit(node.left);","missing":[{"startCol":20,"endCol":36},{}]},"4464":{"partial":false,"source":"                }","missing":[{}]},"4465":{"partial":false,"source":"                if (isBinary(node.right)) {","missing":[{},{"startCol":20,"endCol":40}]},"4466":{"partial":false,"source":"                    visit(node.right);","missing":[{"startCol":20,"endCol":37},{}]},"4467":{"partial":false,"source":"                }","missing":[{}]},"4468":{"partial":false,"source":"","missing":[{}]},"4469":{"partial":false,"source":"                if (range && typeof node.range === 'undefined') {","missing":[{},{"startCol":20,"endCol":62},{"startCol":29,"endCol":62}]},"4470":{"partial":false,"source":"                    node.range = [node.left.range[0], node.right.range[1]];","missing":[{},{"startCol":20,"endCol":75}]},"4471":{"partial":false,"source":"                }","missing":[{}]},"4472":{"partial":false,"source":"                if (loc && typeof node.loc === 'undefined') {","missing":[{"startCol":20,"endCol":58},{"startCol":27,"endCol":58},{}]},"4473":{"partial":false,"source":"                    node.loc = {","missing":[{}]},"4474":{"partial":false,"source":"                        start: node.left.loc.start,","missing":[{}]},"4475":{"partial":false,"source":"                        end: node.right.loc.end","missing":[{}]},"4476":{"partial":false,"source":"                    };","missing":[{}]},"4477":{"partial":false,"source":"                }","missing":[{}]},"4478":{"partial":false,"source":"            }","missing":[{}]},"4479":{"partial":false,"source":"","missing":[{}]},"4480":{"partial":false,"source":"            return function () {","missing":[{}]},"4481":{"partial":false,"source":"                var node, rangeInfo, locInfo;","missing":[{},{"startCol":16,"endCol":45}]},"4482":{"partial":false,"source":"","missing":[{}]},"4483":{"partial":false,"source":"                skipComment();","missing":[{"startCol":16,"endCol":29},{}]},"4484":{"partial":false,"source":"                rangeInfo = [index, 0];","missing":[{},{"startCol":16,"endCol":39}]},"4485":{"partial":false,"source":"                locInfo = {","missing":[{}]},"4486":{"partial":false,"source":"                    start: {","missing":[{}]},"4487":{"partial":false,"source":"                        line: lineNumber,","missing":[{}]},"4488":{"partial":false,"source":"                        column: index - lineStart","missing":[{},{"startCol":32,"endCol":49}]},"4489":{"partial":false,"source":"                    }","missing":[{}]},"4490":{"partial":false,"source":"                };","missing":[{}]},"4491":{"partial":false,"source":"","missing":[{}]},"4492":{"partial":false,"source":"                node = parseFunction.apply(null, arguments);","missing":[{"startCol":16,"endCol":60},{},{"startCol":23,"endCol":59}]},"4493":{"partial":false,"source":"                if (typeof node !== 'undefined') {","missing":[{"startCol":20,"endCol":47},{}]},"4494":{"partial":false,"source":"","missing":[{}]},"4495":{"partial":false,"source":"                    if (range) {","missing":[{}]},"4496":{"partial":false,"source":"                        rangeInfo[1] = index;","missing":[{"startCol":24,"endCol":45},{}]},"4497":{"partial":false,"source":"                        node.range = rangeInfo;","missing":[{},{"startCol":24,"endCol":47}]},"4498":{"partial":false,"source":"                    }","missing":[{}]},"4499":{"partial":false,"source":"","missing":[{}]},"4500":{"partial":false,"source":"                    if (loc) {","missing":[{}]},"4501":{"partial":false,"source":"                        locInfo.end = {","missing":[{}]},"4502":{"partial":false,"source":"                            line: lineNumber,","missing":[{}]},"4503":{"partial":false,"source":"                            column: index - lineStart","missing":[{},{"startCol":36,"endCol":53}]},"4504":{"partial":false,"source":"                        };","missing":[{}]},"4505":{"partial":false,"source":"                        node.loc = locInfo;","missing":[{},{"startCol":24,"endCol":43}]},"4506":{"partial":false,"source":"                    }","missing":[{}]},"4507":{"partial":false,"source":"","missing":[{}]},"4508":{"partial":false,"source":"                    if (isBinary(node)) {","missing":[{},{"startCol":24,"endCol":38}]},"4509":{"partial":false,"source":"                        visit(node);","missing":[{},{"startCol":24,"endCol":35}]},"4510":{"partial":false,"source":"                    }","missing":[{}]},"4511":{"partial":false,"source":"","missing":[{}]},"4512":{"partial":false,"source":"                    if (node.type === Syntax.MemberExpression) {","missing":[{},{"startCol":24,"endCol":61}]},"4513":{"partial":false,"source":"                        if (typeof node.object.range !== 'undefined') {","missing":[{},{"startCol":28,"endCol":68}]},"4514":{"partial":false,"source":"                            node.range[0] = node.object.range[0];","missing":[{},{"startCol":28,"endCol":65}]},"4515":{"partial":false,"source":"                        }","missing":[{}]},"4516":{"partial":false,"source":"                        if (typeof node.object.loc !== 'undefined') {","missing":[{},{"startCol":28,"endCol":66}]},"4517":{"partial":false,"source":"                            node.loc.start = node.object.loc.start;","missing":[{},{"startCol":28,"endCol":67}]},"4518":{"partial":false,"source":"                        }","missing":[{}]},"4519":{"partial":false,"source":"                    }","missing":[{}]},"4520":{"partial":false,"source":"","missing":[{}]},"4521":{"partial":false,"source":"                    if (node.type === Syntax.CallExpression) {","missing":[{"startCol":24,"endCol":59},{}]},"4522":{"partial":false,"source":"                        if (typeof node.callee.range !== 'undefined') {","missing":[{},{"startCol":28,"endCol":68}]},"4523":{"partial":false,"source":"                            node.range[0] = node.callee.range[0];","missing":[{},{"startCol":28,"endCol":65}]},"4524":{"partial":false,"source":"                        }","missing":[{}]},"4525":{"partial":false,"source":"                        if (typeof node.callee.loc !== 'undefined') {","missing":[{},{"startCol":28,"endCol":66}]},"4526":{"partial":false,"source":"                            node.loc.start = node.callee.loc.start;","missing":[{},{"startCol":28,"endCol":67}]},"4527":{"partial":false,"source":"                        }","missing":[{}]},"4528":{"partial":false,"source":"                    }","missing":[{}]},"4529":{"partial":false,"source":"                    return node;","missing":[{},{"startCol":20,"endCol":32}]},"4530":{"partial":false,"source":"                }","missing":[{}]},"4531":{"partial":false,"source":"            };","missing":[{}]},"4532":{"partial":false,"source":"","missing":[{}]},"4533":{"partial":false,"source":"        };","missing":[{}]},"4538":{"partial":false,"source":"        var wrapTracking;","missing":[{"startCol":8,"endCol":25}]},"4541":{"partial":false,"source":"            extra.skipComment = skipComment;","missing":[{"startCol":12,"endCol":44}]},"4542":{"partial":false,"source":"            skipComment = scanComment;","missing":[{"startCol":12,"endCol":38}]},"4546":{"partial":false,"source":"            extra.createLiteral = createLiteral;","missing":[{"startCol":12,"endCol":48}]},"4547":{"partial":false,"source":"            createLiteral = createRawLiteral;","missing":[{"startCol":12,"endCol":45}]},"4550":{"partial":false,"source":"        if (extra.range || extra.loc) {","missing":[{"startCol":12,"endCol":36}]},"4552":{"partial":false,"source":"            wrapTracking = wrapTrackingFunction(extra.range, extra.loc);","missing":[{"startCol":12,"endCol":72},{"startCol":27,"endCol":71}]},"4554":{"partial":false,"source":"            extra.parseAdditiveExpression = parseAdditiveExpression;","missing":[{"startCol":12,"endCol":68}]},"4555":{"partial":false,"source":"            extra.parseAssignmentExpression = parseAssignmentExpression;","missing":[{"startCol":12,"endCol":72}]},"4556":{"partial":false,"source":"            extra.parseBitwiseANDExpression = parseBitwiseANDExpression;","missing":[{"startCol":12,"endCol":72}]},"4557":{"partial":false,"source":"            extra.parseBitwiseORExpression = parseBitwiseORExpression;","missing":[{"startCol":12,"endCol":70}]},"4558":{"partial":false,"source":"            extra.parseBitwiseXORExpression = parseBitwiseXORExpression;","missing":[{"startCol":12,"endCol":72}]},"4559":{"partial":false,"source":"            extra.parseBlock = parseBlock;","missing":[{"startCol":12,"endCol":42}]},"4560":{"partial":false,"source":"            extra.parseFunctionSourceElements = parseFunctionSourceElements;","missing":[{"startCol":12,"endCol":76}]},"4561":{"partial":false,"source":"            extra.parseCallMember = parseCallMember;","missing":[{"startCol":12,"endCol":52}]},"4562":{"partial":false,"source":"            extra.parseCatchClause = parseCatchClause;","missing":[{"startCol":12,"endCol":54}]},"4563":{"partial":false,"source":"            extra.parseComputedMember = parseComputedMember;","missing":[{"startCol":12,"endCol":60}]},"4564":{"partial":false,"source":"            extra.parseConditionalExpression = parseConditionalExpression;","missing":[{"startCol":12,"endCol":74}]},"4565":{"partial":false,"source":"            extra.parseConstLetDeclaration = parseConstLetDeclaration;","missing":[{"startCol":12,"endCol":70}]},"4566":{"partial":false,"source":"            extra.parseEqualityExpression = parseEqualityExpression;","missing":[{"startCol":12,"endCol":68}]},"4567":{"partial":false,"source":"            extra.parseExportDeclaration = parseExportDeclaration;","missing":[{"startCol":12,"endCol":66}]},"4568":{"partial":false,"source":"            extra.parseExportSpecifier = parseExportSpecifier;","missing":[{"startCol":12,"endCol":62}]},"4569":{"partial":false,"source":"            extra.parseExportSpecifierSetProperty = parseExportSpecifierSetProperty;","missing":[{"startCol":12,"endCol":84}]},"4570":{"partial":false,"source":"            extra.parseExpression = parseExpression;","missing":[{"startCol":12,"endCol":52}]},"4571":{"partial":false,"source":"            extra.parseForVariableDeclaration = parseForVariableDeclaration;","missing":[{"startCol":12,"endCol":76}]},"4572":{"partial":false,"source":"            extra.parseFunctionDeclaration = parseFunctionDeclaration;","missing":[{"startCol":12,"endCol":70}]},"4573":{"partial":false,"source":"            extra.parseFunctionExpression = parseFunctionExpression;","missing":[{"startCol":12,"endCol":68}]},"4574":{"partial":false,"source":"            extra.parseGlob = parseGlob;","missing":[{"startCol":12,"endCol":40}]},"4575":{"partial":false,"source":"            extra.parseImportDeclaration = parseImportDeclaration;","missing":[{"startCol":12,"endCol":66}]},"4576":{"partial":false,"source":"            extra.parseImportSpecifier = parseImportSpecifier;","missing":[{"startCol":12,"endCol":62}]},"4577":{"partial":false,"source":"            extra.parseLogicalANDExpression = parseLogicalANDExpression;","missing":[{"startCol":12,"endCol":72}]},"4578":{"partial":false,"source":"            extra.parseLogicalORExpression = parseLogicalORExpression;","missing":[{"startCol":12,"endCol":70}]},"4579":{"partial":false,"source":"            extra.parseMultiplicativeExpression = parseMultiplicativeExpression;","missing":[{"startCol":12,"endCol":80}]},"4580":{"partial":false,"source":"            extra.parseModuleDeclaration = parseModuleDeclaration;","missing":[{"startCol":12,"endCol":66}]},"4581":{"partial":false,"source":"            extra.parseModuleBlock = parseModuleBlock;","missing":[{"startCol":12,"endCol":54}]},"4582":{"partial":false,"source":"            extra.parseNewExpression = parseNewExpression;","missing":[{"startCol":12,"endCol":58}]},"4583":{"partial":false,"source":"            extra.parseNonComputedMember = parseNonComputedMember;","missing":[{"startCol":12,"endCol":66}]},"4584":{"partial":false,"source":"            extra.parseNonComputedProperty = parseNonComputedProperty;","missing":[{"startCol":12,"endCol":70}]},"4585":{"partial":false,"source":"            extra.parseObjectProperty = parseObjectProperty;","missing":[{"startCol":12,"endCol":60}]},"4586":{"partial":false,"source":"            extra.parseObjectPropertyKey = parseObjectPropertyKey;","missing":[{"startCol":12,"endCol":66}]},"4587":{"partial":false,"source":"            extra.parsePath = parsePath;","missing":[{"startCol":12,"endCol":40}]},"4588":{"partial":false,"source":"            extra.parsePostfixExpression = parsePostfixExpression;","missing":[{"startCol":12,"endCol":66}]},"4589":{"partial":false,"source":"            extra.parsePrimaryExpression = parsePrimaryExpression;","missing":[{"startCol":12,"endCol":66}]},"4590":{"partial":false,"source":"            extra.parseProgram = parseProgram;","missing":[{"startCol":12,"endCol":46}]},"4591":{"partial":false,"source":"            extra.parsePropertyFunction = parsePropertyFunction;","missing":[{"startCol":12,"endCol":64}]},"4592":{"partial":false,"source":"            extra.parseRelationalExpression = parseRelationalExpression;","missing":[{"startCol":12,"endCol":72}]},"4593":{"partial":false,"source":"            extra.parseQuasiElement = parseQuasiElement;","missing":[{"startCol":12,"endCol":56}]},"4594":{"partial":false,"source":"            extra.parseQuasiLiteral = parseQuasiLiteral;","missing":[{"startCol":12,"endCol":56}]},"4595":{"partial":false,"source":"            extra.parseStatement = parseStatement;","missing":[{"startCol":12,"endCol":50}]},"4596":{"partial":false,"source":"            extra.parseShiftExpression = parseShiftExpression;","missing":[{"startCol":12,"endCol":62}]},"4597":{"partial":false,"source":"            extra.parseSwitchCase = parseSwitchCase;","missing":[{"startCol":12,"endCol":52}]},"4598":{"partial":false,"source":"            extra.parseTaggedQuasi = parseTaggedQuasi;","missing":[{"startCol":12,"endCol":54}]},"4599":{"partial":false,"source":"            extra.parseUnaryExpression = parseUnaryExpression;","missing":[{"startCol":12,"endCol":62}]},"4600":{"partial":false,"source":"            extra.parseVariableDeclaration = parseVariableDeclaration;","missing":[{"startCol":12,"endCol":70}]},"4601":{"partial":false,"source":"            extra.parseVariableIdentifier = parseVariableIdentifier;","missing":[{"startCol":12,"endCol":68}]},"4602":{"partial":false,"source":"            extra.parseMethodDefinition = parseMethodDefinition;","missing":[{"startCol":12,"endCol":64}]},"4603":{"partial":false,"source":"            extra.parseClassDeclaration = parseClassDeclaration;","missing":[{"startCol":12,"endCol":64}]},"4604":{"partial":false,"source":"            extra.parseClassExpression = parseClassExpression;","missing":[{"startCol":12,"endCol":62}]},"4605":{"partial":false,"source":"            extra.parseClassBody = parseClassBody;","missing":[{"startCol":12,"endCol":50}]},"4607":{"partial":false,"source":"            parseAdditiveExpression = wrapTracking(extra.parseAdditiveExpression);","missing":[{"startCol":12,"endCol":82},{"startCol":38,"endCol":81}]},"4608":{"partial":false,"source":"            parseAssignmentExpression = wrapTracking(extra.parseAssignmentExpression);","missing":[{"startCol":12,"endCol":86},{"startCol":40,"endCol":85}]},"4609":{"partial":false,"source":"            parseBitwiseANDExpression = wrapTracking(extra.parseBitwiseANDExpression);","missing":[{"startCol":12,"endCol":86},{"startCol":40,"endCol":85}]},"4610":{"partial":false,"source":"            parseBitwiseORExpression = wrapTracking(extra.parseBitwiseORExpression);","missing":[{"startCol":12,"endCol":84},{"startCol":39,"endCol":83}]},"4611":{"partial":false,"source":"            parseBitwiseXORExpression = wrapTracking(extra.parseBitwiseXORExpression);","missing":[{"startCol":12,"endCol":86},{"startCol":40,"endCol":85}]},"4612":{"partial":false,"source":"            parseBlock = wrapTracking(extra.parseBlock);","missing":[{"startCol":12,"endCol":56},{"startCol":25,"endCol":55}]},"4613":{"partial":false,"source":"            parseFunctionSourceElements = wrapTracking(extra.parseFunctionSourceElements);","missing":[{"startCol":12,"endCol":90},{"startCol":42,"endCol":89}]},"4614":{"partial":false,"source":"            parseCallMember = wrapTracking(extra.parseCallMember);","missing":[{"startCol":12,"endCol":66},{"startCol":30,"endCol":65}]},"4615":{"partial":false,"source":"            parseCatchClause = wrapTracking(extra.parseCatchClause);","missing":[{"startCol":12,"endCol":68},{"startCol":31,"endCol":67}]},"4616":{"partial":false,"source":"            parseComputedMember = wrapTracking(extra.parseComputedMember);","missing":[{"startCol":12,"endCol":74},{"startCol":34,"endCol":73}]},"4617":{"partial":false,"source":"            parseConditionalExpression = wrapTracking(extra.parseConditionalExpression);","missing":[{"startCol":12,"endCol":88},{"startCol":41,"endCol":87}]},"4618":{"partial":false,"source":"            parseConstLetDeclaration = wrapTracking(extra.parseConstLetDeclaration);","missing":[{"startCol":12,"endCol":84},{"startCol":39,"endCol":83}]},"4619":{"partial":false,"source":"            parseExportDeclaration = wrapTracking(parseExportDeclaration);","missing":[{"startCol":12,"endCol":74},{"startCol":37,"endCol":73}]},"4620":{"partial":false,"source":"            parseExportSpecifier = wrapTracking(parseExportSpecifier);","missing":[{"startCol":12,"endCol":70},{"startCol":35,"endCol":69}]},"4621":{"partial":false,"source":"            parseExportSpecifierSetProperty = wrapTracking(parseExportSpecifierSetProperty);","missing":[{"startCol":12,"endCol":92},{"startCol":46,"endCol":91}]},"4622":{"partial":false,"source":"            parseEqualityExpression = wrapTracking(extra.parseEqualityExpression);","missing":[{"startCol":12,"endCol":82},{"startCol":38,"endCol":81}]},"4623":{"partial":false,"source":"            parseExpression = wrapTracking(extra.parseExpression);","missing":[{"startCol":12,"endCol":66},{"startCol":30,"endCol":65}]},"4624":{"partial":false,"source":"            parseForVariableDeclaration = wrapTracking(extra.parseForVariableDeclaration);","missing":[{"startCol":12,"endCol":90},{"startCol":42,"endCol":89}]},"4625":{"partial":false,"source":"            parseFunctionDeclaration = wrapTracking(extra.parseFunctionDeclaration);","missing":[{"startCol":12,"endCol":84},{"startCol":39,"endCol":83}]},"4626":{"partial":false,"source":"            parseFunctionExpression = wrapTracking(extra.parseFunctionExpression);","missing":[{"startCol":12,"endCol":82},{"startCol":38,"endCol":81}]},"4627":{"partial":false,"source":"            parseGlob = wrapTracking(extra.parseGlob);","missing":[{"startCol":12,"endCol":54},{"startCol":24,"endCol":53}]},"4628":{"partial":false,"source":"            parseImportDeclaration = wrapTracking(extra.parseImportDeclaration);","missing":[{"startCol":12,"endCol":80},{"startCol":37,"endCol":79}]},"4629":{"partial":false,"source":"            parseImportSpecifier = wrapTracking(extra.parseImportSpecifier);","missing":[{"startCol":12,"endCol":76},{"startCol":35,"endCol":75}]},"4630":{"partial":false,"source":"            parseLogicalANDExpression = wrapTracking(extra.parseLogicalANDExpression);","missing":[{"startCol":12,"endCol":86},{"startCol":40,"endCol":85}]},"4631":{"partial":false,"source":"            parseLogicalORExpression = wrapTracking(extra.parseLogicalORExpression);","missing":[{"startCol":12,"endCol":84},{"startCol":39,"endCol":83}]},"4632":{"partial":false,"source":"            parseMultiplicativeExpression = wrapTracking(extra.parseMultiplicativeExpression);","missing":[{"startCol":12,"endCol":94},{"startCol":44,"endCol":93}]},"4633":{"partial":false,"source":"            parseModuleDeclaration = wrapTracking(extra.parseModuleDeclaration);","missing":[{"startCol":12,"endCol":80},{"startCol":37,"endCol":79}]},"4634":{"partial":false,"source":"            parseModuleBlock = wrapTracking(extra.parseModuleBlock);","missing":[{"startCol":12,"endCol":68},{"startCol":31,"endCol":67}]},"4635":{"partial":false,"source":"            parseNewExpression = wrapTracking(extra.parseNewExpression);","missing":[{"startCol":12,"endCol":72},{"startCol":33,"endCol":71}]},"4636":{"partial":false,"source":"            parseNonComputedMember = wrapTracking(extra.parseNonComputedMember);","missing":[{"startCol":12,"endCol":80},{"startCol":37,"endCol":79}]},"4637":{"partial":false,"source":"            parseNonComputedProperty = wrapTracking(extra.parseNonComputedProperty);","missing":[{"startCol":12,"endCol":84},{"startCol":39,"endCol":83}]},"4638":{"partial":false,"source":"            parseObjectProperty = wrapTracking(extra.parseObjectProperty);","missing":[{"startCol":12,"endCol":74},{"startCol":34,"endCol":73}]},"4639":{"partial":false,"source":"            parseObjectPropertyKey = wrapTracking(extra.parseObjectPropertyKey);","missing":[{"startCol":12,"endCol":80},{"startCol":37,"endCol":79}]},"4640":{"partial":false,"source":"            parsePath = wrapTracking(extra.parsePath);","missing":[{"startCol":12,"endCol":54},{"startCol":24,"endCol":53}]},"4641":{"partial":false,"source":"            parsePostfixExpression = wrapTracking(extra.parsePostfixExpression);","missing":[{"startCol":12,"endCol":80},{"startCol":37,"endCol":79}]},"4642":{"partial":false,"source":"            parsePrimaryExpression = wrapTracking(extra.parsePrimaryExpression);","missing":[{"startCol":12,"endCol":80},{"startCol":37,"endCol":79}]},"4643":{"partial":false,"source":"            parseProgram = wrapTracking(extra.parseProgram);","missing":[{"startCol":12,"endCol":60},{"startCol":27,"endCol":59}]},"4644":{"partial":false,"source":"            parsePropertyFunction = wrapTracking(extra.parsePropertyFunction);","missing":[{"startCol":12,"endCol":78},{"startCol":36,"endCol":77}]},"4645":{"partial":false,"source":"            parseQuasiElement = wrapTracking(extra.parseQuasiElement);","missing":[{"startCol":12,"endCol":70},{"startCol":32,"endCol":69}]},"4646":{"partial":false,"source":"            parseQuasiLiteral = wrapTracking(extra.parseQuasiLiteral);","missing":[{"startCol":12,"endCol":70},{"startCol":32,"endCol":69}]},"4647":{"partial":false,"source":"            parseRelationalExpression = wrapTracking(extra.parseRelationalExpression);","missing":[{"startCol":12,"endCol":86},{"startCol":40,"endCol":85}]},"4648":{"partial":false,"source":"            parseStatement = wrapTracking(extra.parseStatement);","missing":[{"startCol":12,"endCol":64},{"startCol":29,"endCol":63}]},"4649":{"partial":false,"source":"            parseShiftExpression = wrapTracking(extra.parseShiftExpression);","missing":[{"startCol":12,"endCol":76},{"startCol":35,"endCol":75}]},"4650":{"partial":false,"source":"            parseSwitchCase = wrapTracking(extra.parseSwitchCase);","missing":[{"startCol":12,"endCol":66},{"startCol":30,"endCol":65}]},"4651":{"partial":false,"source":"            parseTaggedQuasi = wrapTracking(extra.parseTaggedQuasi);","missing":[{"startCol":12,"endCol":68},{"startCol":31,"endCol":67}]},"4652":{"partial":false,"source":"            parseUnaryExpression = wrapTracking(extra.parseUnaryExpression);","missing":[{"startCol":12,"endCol":76},{"startCol":35,"endCol":75}]},"4653":{"partial":false,"source":"            parseVariableDeclaration = wrapTracking(extra.parseVariableDeclaration);","missing":[{"startCol":12,"endCol":84},{"startCol":39,"endCol":83}]},"4654":{"partial":false,"source":"            parseVariableIdentifier = wrapTracking(extra.parseVariableIdentifier);","missing":[{"startCol":12,"endCol":82},{"startCol":38,"endCol":81}]},"4655":{"partial":false,"source":"            parseMethodDefinition = wrapTracking(extra.parseMethodDefinition);","missing":[{"startCol":12,"endCol":78},{"startCol":36,"endCol":77}]},"4656":{"partial":false,"source":"            parseClassDeclaration = wrapTracking(extra.parseClassDeclaration);","missing":[{"startCol":12,"endCol":78},{"startCol":36,"endCol":77}]},"4657":{"partial":false,"source":"            parseClassExpression = wrapTracking(extra.parseClassExpression);","missing":[{"startCol":12,"endCol":76},{"startCol":35,"endCol":75}]},"4658":{"partial":false,"source":"            parseClassBody = wrapTracking(extra.parseClassBody);","missing":[{"startCol":12,"endCol":64},{"startCol":29,"endCol":63}]},"4661":{"partial":false,"source":"        if (typeof extra.tokens !== 'undefined') {","missing":[{"startCol":12,"endCol":47}]},"4662":{"partial":false,"source":"            extra.advance = advance;","missing":[{"startCol":12,"endCol":36}]},"4663":{"partial":false,"source":"            extra.scanRegExp = scanRegExp;","missing":[{"startCol":12,"endCol":42}]},"4665":{"partial":false,"source":"            advance = collectToken;","missing":[{"startCol":12,"endCol":35}]},"4666":{"partial":false,"source":"            scanRegExp = collectRegex;","missing":[{"startCol":12,"endCol":38}]},"4671":{"partial":false,"source":"        if (typeof extra.skipComment === 'function') {","missing":[{"startCol":12,"endCol":51}]},"4672":{"partial":false,"source":"            skipComment = extra.skipComment;","missing":[{"startCol":12,"endCol":44}]},"4676":{"partial":false,"source":"            createLiteral = extra.createLiteral;","missing":[{"startCol":12,"endCol":48}]},"4679":{"partial":false,"source":"        if (extra.range || extra.loc) {","missing":[{"startCol":12,"endCol":36}]},"4680":{"partial":false,"source":"            parseAdditiveExpression = extra.parseAdditiveExpression;","missing":[{"startCol":12,"endCol":68}]},"4681":{"partial":false,"source":"            parseAssignmentExpression = extra.parseAssignmentExpression;","missing":[{"startCol":12,"endCol":72}]},"4682":{"partial":false,"source":"            parseBitwiseANDExpression = extra.parseBitwiseANDExpression;","missing":[{"startCol":12,"endCol":72}]},"4683":{"partial":false,"source":"            parseBitwiseORExpression = extra.parseBitwiseORExpression;","missing":[{"startCol":12,"endCol":70}]},"4684":{"partial":false,"source":"            parseBitwiseXORExpression = extra.parseBitwiseXORExpression;","missing":[{"startCol":12,"endCol":72}]},"4685":{"partial":false,"source":"            parseBlock = extra.parseBlock;","missing":[{"startCol":12,"endCol":42}]},"4686":{"partial":false,"source":"            parseFunctionSourceElements = extra.parseFunctionSourceElements;","missing":[{"startCol":12,"endCol":76}]},"4687":{"partial":false,"source":"            parseCallMember = extra.parseCallMember;","missing":[{"startCol":12,"endCol":52}]},"4688":{"partial":false,"source":"            parseCatchClause = extra.parseCatchClause;","missing":[{"startCol":12,"endCol":54}]},"4689":{"partial":false,"source":"            parseComputedMember = extra.parseComputedMember;","missing":[{"startCol":12,"endCol":60}]},"4690":{"partial":false,"source":"            parseConditionalExpression = extra.parseConditionalExpression;","missing":[{"startCol":12,"endCol":74}]},"4691":{"partial":false,"source":"            parseConstLetDeclaration = extra.parseConstLetDeclaration;","missing":[{"startCol":12,"endCol":70}]},"4692":{"partial":false,"source":"            parseEqualityExpression = extra.parseEqualityExpression;","missing":[{"startCol":12,"endCol":68}]},"4693":{"partial":false,"source":"            parseExportDeclaration = extra.parseExportDeclaration;","missing":[{"startCol":12,"endCol":66}]},"4694":{"partial":false,"source":"            parseExportSpecifier = extra.parseExportSpecifier;","missing":[{"startCol":12,"endCol":62}]},"4695":{"partial":false,"source":"            parseExportSpecifierSetProperty = extra.parseExportSpecifierSetProperty;","missing":[{"startCol":12,"endCol":84}]},"4696":{"partial":false,"source":"            parseExpression = extra.parseExpression;","missing":[{"startCol":12,"endCol":52}]},"4697":{"partial":false,"source":"            parseForVariableDeclaration = extra.parseForVariableDeclaration;","missing":[{"startCol":12,"endCol":76}]},"4698":{"partial":false,"source":"            parseFunctionDeclaration = extra.parseFunctionDeclaration;","missing":[{"startCol":12,"endCol":70}]},"4699":{"partial":false,"source":"            parseFunctionExpression = extra.parseFunctionExpression;","missing":[{"startCol":12,"endCol":68}]},"4700":{"partial":false,"source":"            parseGlob = extra.parseGlob;","missing":[{"startCol":12,"endCol":40}]},"4701":{"partial":false,"source":"            parseImportDeclaration = extra.parseImportDeclaration;","missing":[{"startCol":12,"endCol":66}]},"4702":{"partial":false,"source":"            parseImportSpecifier = extra.parseImportSpecifier;","missing":[{"startCol":12,"endCol":62}]},"4703":{"partial":false,"source":"            parseLogicalANDExpression = extra.parseLogicalANDExpression;","missing":[{"startCol":12,"endCol":72}]},"4704":{"partial":false,"source":"            parseLogicalORExpression = extra.parseLogicalORExpression;","missing":[{"startCol":12,"endCol":70}]},"4705":{"partial":false,"source":"            parseMultiplicativeExpression = extra.parseMultiplicativeExpression;","missing":[{"startCol":12,"endCol":80}]},"4706":{"partial":false,"source":"            parseModuleDeclaration = extra.parseModuleDeclaration;","missing":[{"startCol":12,"endCol":66}]},"4707":{"partial":false,"source":"            parseModuleBlock = extra.parseModuleBlock;","missing":[{"startCol":12,"endCol":54}]},"4708":{"partial":false,"source":"            parseNewExpression = extra.parseNewExpression;","missing":[{"startCol":12,"endCol":58}]},"4709":{"partial":false,"source":"            parseNonComputedMember = extra.parseNonComputedMember;","missing":[{"startCol":12,"endCol":66}]},"4710":{"partial":false,"source":"            parseNonComputedProperty = extra.parseNonComputedProperty;","missing":[{"startCol":12,"endCol":70}]},"4711":{"partial":false,"source":"            parseObjectProperty = extra.parseObjectProperty;","missing":[{"startCol":12,"endCol":60}]},"4712":{"partial":false,"source":"            parseObjectPropertyKey = extra.parseObjectPropertyKey;","missing":[{"startCol":12,"endCol":66}]},"4713":{"partial":false,"source":"            parsePath = extra.parsePath;","missing":[{"startCol":12,"endCol":40}]},"4714":{"partial":false,"source":"            parsePostfixExpression = extra.parsePostfixExpression;","missing":[{"startCol":12,"endCol":66}]},"4715":{"partial":false,"source":"            parsePrimaryExpression = extra.parsePrimaryExpression;","missing":[{"startCol":12,"endCol":66}]},"4716":{"partial":false,"source":"            parseProgram = extra.parseProgram;","missing":[{"startCol":12,"endCol":46}]},"4717":{"partial":false,"source":"            parsePropertyFunction = extra.parsePropertyFunction;","missing":[{"startCol":12,"endCol":64}]},"4718":{"partial":false,"source":"            parseQuasiElement = extra.parseQuasiElement;","missing":[{"startCol":12,"endCol":56}]},"4719":{"partial":false,"source":"            parseQuasiLiteral = extra.parseQuasiLiteral;","missing":[{"startCol":12,"endCol":56}]},"4720":{"partial":false,"source":"            parseRelationalExpression = extra.parseRelationalExpression;","missing":[{"startCol":12,"endCol":72}]},"4721":{"partial":false,"source":"            parseStatement = extra.parseStatement;","missing":[{"startCol":12,"endCol":50}]},"4722":{"partial":false,"source":"            parseShiftExpression = extra.parseShiftExpression;","missing":[{"startCol":12,"endCol":62}]},"4723":{"partial":false,"source":"            parseSwitchCase = extra.parseSwitchCase;","missing":[{"startCol":12,"endCol":52}]},"4724":{"partial":false,"source":"            parseTaggedQuasi = extra.parseTaggedQuasi;","missing":[{"startCol":12,"endCol":54}]},"4725":{"partial":false,"source":"            parseUnaryExpression = extra.parseUnaryExpression;","missing":[{"startCol":12,"endCol":62}]},"4726":{"partial":false,"source":"            parseVariableDeclaration = extra.parseVariableDeclaration;","missing":[{"startCol":12,"endCol":70}]},"4727":{"partial":false,"source":"            parseVariableIdentifier = extra.parseVariableIdentifier;","missing":[{"startCol":12,"endCol":68}]},"4728":{"partial":false,"source":"            parseMethodDefinition = extra.parseMethodDefinition;","missing":[{"startCol":12,"endCol":64}]},"4729":{"partial":false,"source":"            parseClassDeclaration = extra.parseClassDeclaration;","missing":[{"startCol":12,"endCol":64}]},"4730":{"partial":false,"source":"            parseClassExpression = extra.parseClassExpression;","missing":[{"startCol":12,"endCol":62}]},"4731":{"partial":false,"source":"            parseClassBody = extra.parseClassBody;","missing":[{"startCol":12,"endCol":50}]},"4734":{"partial":false,"source":"        if (typeof extra.scanRegExp === 'function') {","missing":[{"startCol":12,"endCol":50}]},"4735":{"partial":false,"source":"            advance = extra.advance;","missing":[{"startCol":12,"endCol":36}]},"4736":{"partial":false,"source":"            scanRegExp = extra.scanRegExp;","missing":[{"startCol":12,"endCol":42}]},"4741":{"partial":false,"source":"        var length = str.length,","missing":[{}]},"4742":{"partial":false,"source":"            result = [],","missing":[{}]},"4743":{"partial":false,"source":"            i;","missing":[{}]},"4744":{"partial":false,"source":"        for (i = 0; i < length; ++i) {","missing":[{"startCol":20,"endCol":30},{"startCol":32,"endCol":35}]},"4745":{"partial":false,"source":"            result[i] = str.charAt(i);","missing":[{"startCol":12,"endCol":38},{"startCol":24,"endCol":37}]},"4747":{"partial":false,"source":"        return result;","missing":[{"startCol":8,"endCol":22}]},"4751":{"partial":false,"source":"        var program, toString;","missing":[{"startCol":8,"endCol":30}]},"4753":{"partial":false,"source":"        toString = String;","missing":[{"startCol":8,"endCol":26}]},"4754":{"partial":false,"source":"        if (typeof code !== 'string' && !(code instanceof String)) {","missing":[{"startCol":12,"endCol":36},{"startCol":41,"endCol":65}]},"4755":{"partial":false,"source":"            code = toString(code);","missing":[{"startCol":12,"endCol":34},{"startCol":19,"endCol":33}]},"4758":{"partial":false,"source":"        source = code;","missing":[{"startCol":8,"endCol":22}]},"4759":{"partial":false,"source":"        index = 0;","missing":[{"startCol":8,"endCol":18}]},"4760":{"partial":false,"source":"        lineNumber = (source.length > 0) ? 1 : 0;","missing":[{"startCol":8,"endCol":49},{"startCol":21,"endCol":40},{"startCol":43,"endCol":44},{"startCol":47,"endCol":48}]},"4761":{"partial":false,"source":"        lineStart = 0;","missing":[{"startCol":8,"endCol":22}]},"4762":{"partial":false,"source":"        length = source.length;","missing":[{"startCol":8,"endCol":31}]},"4763":{"partial":false,"source":"        buffer = null;","missing":[{"startCol":8,"endCol":22}]},"4764":{"partial":false,"source":"        state = {","missing":[{}]},"4765":{"partial":false,"source":"            allowIn: true,","missing":[{}]},"4766":{"partial":false,"source":"            labelSet: {},","missing":[{}]},"4767":{"partial":false,"source":"            parenthesizedCount: 0,","missing":[{}]},"4768":{"partial":false,"source":"            lastParenthesized: null,","missing":[{}]},"4769":{"partial":false,"source":"            inFunctionBody: false,","missing":[{}]},"4770":{"partial":false,"source":"            inIteration: false,","missing":[{}]},"4771":{"partial":false,"source":"            inSwitch: false","missing":[{}]},"4772":{"partial":false,"source":"        };","missing":[{}]},"4774":{"partial":false,"source":"        extra = {};","missing":[{"startCol":8,"endCol":19}]},"4775":{"partial":false,"source":"        if (typeof options !== 'undefined') {","missing":[{"startCol":12,"endCol":42}]},"4776":{"partial":false,"source":"            extra.range = (typeof options.range === 'boolean') && options.range;","missing":[{"startCol":12,"endCol":80},{"startCol":26,"endCol":62}]},"4777":{"partial":false,"source":"            extra.loc = (typeof options.loc === 'boolean') && options.loc;","missing":[{"startCol":12,"endCol":74},{"startCol":24,"endCol":58}]},"4778":{"partial":false,"source":"            extra.raw = (typeof options.raw === 'boolean') && options.raw;","missing":[{"startCol":12,"endCol":74},{"startCol":24,"endCol":58}]},"4779":{"partial":false,"source":"            if (typeof options.tokens === 'boolean' && options.tokens) {","missing":[{"startCol":16,"endCol":51}]},"4780":{"partial":false,"source":"                extra.tokens = [];","missing":[{"startCol":16,"endCol":34}]},"4782":{"partial":false,"source":"            if (typeof options.comment === 'boolean' && options.comment) {","missing":[{"startCol":16,"endCol":52}]},"4783":{"partial":false,"source":"                extra.comments = [];","missing":[{"startCol":16,"endCol":36}]},"4785":{"partial":false,"source":"            if (typeof options.tolerant === 'boolean' && options.tolerant) {","missing":[{"startCol":16,"endCol":53}]},"4786":{"partial":false,"source":"                extra.errors = [];","missing":[{"startCol":16,"endCol":34}]},"4790":{"partial":false,"source":"        if (length > 0) {","missing":[{"startCol":12,"endCol":22}]},"4791":{"partial":false,"source":"            if (typeof source[0] === 'undefined') {","missing":[{"startCol":16,"endCol":48}]},"4795":{"partial":false,"source":"                if (code instanceof String) {","missing":[{"startCol":20,"endCol":42}]},"4796":{"partial":false,"source":"                    source = code.valueOf();","missing":[{"startCol":20,"endCol":44},{"startCol":29,"endCol":43}]},"4800":{"partial":false,"source":"                if (typeof source[0] === 'undefined') {","missing":[{"startCol":20,"endCol":52}]},"4801":{"partial":false,"source":"                    source = stringToArray(code);","missing":[{"startCol":20,"endCol":49},{"startCol":29,"endCol":48}]},"4806":{"partial":false,"source":"        patch();","missing":[{"startCol":8,"endCol":15}]},"4808":{"partial":false,"source":"            program = parseProgram();","missing":[{"startCol":12,"endCol":37},{"startCol":22,"endCol":36}]},"4809":{"partial":false,"source":"            if (typeof extra.comments !== 'undefined') {","missing":[{"startCol":16,"endCol":53}]},"4810":{"partial":false,"source":"                filterCommentLocation();","missing":[{"startCol":16,"endCol":39}]},"4811":{"partial":false,"source":"                program.comments = extra.comments;","missing":[{"startCol":16,"endCol":50}]},"4813":{"partial":false,"source":"            if (typeof extra.tokens !== 'undefined') {","missing":[{"startCol":16,"endCol":51}]},"4814":{"partial":false,"source":"                filterTokenLocation();","missing":[{"startCol":16,"endCol":37}]},"4815":{"partial":false,"source":"                program.tokens = extra.tokens;","missing":[{"startCol":16,"endCol":46}]},"4817":{"partial":false,"source":"            if (typeof extra.errors !== 'undefined') {","missing":[{"startCol":16,"endCol":51}]},"4818":{"partial":false,"source":"                program.errors = extra.errors;","missing":[{"startCol":16,"endCol":46}]},"4821":{"partial":false,"source":"            throw e;","missing":[{"startCol":12,"endCol":20}]},"4823":{"partial":false,"source":"            unpatch();","missing":[{"startCol":12,"endCol":21}]},"4824":{"partial":false,"source":"            extra = {};","missing":[{"startCol":12,"endCol":23}]},"4827":{"partial":false,"source":"        return program;","missing":[{"startCol":8,"endCol":23}]}},"source":"/*\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*jslint bitwise:true plusplus:true */\n/*global esprima:true, define:true, exports:true, window: true,\nthrowError: true, createLiteral: true, generateStatement: true,\nparseAssignmentExpression: true, parseBlock: true,\nparseClassExpression: true, parseClassDeclaration: true, parseExpression: true,\nparseFunctionDeclaration: true, parseFunctionExpression: true,\nparseFunctionSourceElements: true, parseVariableIdentifier: true,\nparseImportSpecifier: true,\nparseLeftHandSideExpression: true,\nparseStatement: true, parseSourceElement: true, parseModuleBlock: true, parseConciseBody: true,\nparseYieldExpression: true\n*/\n\n(function (factory) {\n    'use strict';\n\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,\n    // and plain browser loading,\n    if (typeof define === 'function' && define.amd) {\n        define(['exports'], factory);\n    } else if (typeof exports !== 'undefined') {\n        factory(exports);\n    } else {\n        factory((window.esprima = {}));\n    }\n}(function (exports) {\n    'use strict';\n\n    var Token,\n        TokenName,\n        Syntax,\n        PropertyKind,\n        Messages,\n        Regex,\n        source,\n        strict,\n        yieldAllowed,\n        yieldFound,\n        index,\n        lineNumber,\n        lineStart,\n        length,\n        buffer,\n        state,\n        extra;\n\n    Token = {\n        BooleanLiteral: 1,\n        EOF: 2,\n        Identifier: 3,\n        Keyword: 4,\n        NullLiteral: 5,\n        NumericLiteral: 6,\n        Punctuator: 7,\n        StringLiteral: 8,\n        Quasi: 9\n    };\n\n    TokenName = {};\n    TokenName[Token.BooleanLiteral] = 'Boolean';\n    TokenName[Token.EOF] = '<end>';\n    TokenName[Token.Identifier] = 'Identifier';\n    TokenName[Token.Keyword] = 'Keyword';\n    TokenName[Token.NullLiteral] = 'Null';\n    TokenName[Token.NumericLiteral] = 'Numeric';\n    TokenName[Token.Punctuator] = 'Punctuator';\n    TokenName[Token.StringLiteral] = 'String';\n\n    Syntax = {\n        ArrayExpression: 'ArrayExpression',\n        ArrayPattern: 'ArrayPattern',\n        ArrowFunctionExpression: 'ArrowFunctionExpression',\n        AssignmentExpression: 'AssignmentExpression',\n        BinaryExpression: 'BinaryExpression',\n        BlockStatement: 'BlockStatement',\n        BreakStatement: 'BreakStatement',\n        CallExpression: 'CallExpression',\n        CatchClause: 'CatchClause',\n        ClassBody: 'ClassBody',\n        ClassDeclaration: 'ClassDeclaration',\n        ClassExpression: 'ClassExpression',\n        MethodDefinition: 'MethodDefinition',\n        ClassHeritage: 'ClassHeritage',\n        ConditionalExpression: 'ConditionalExpression',\n        ContinueStatement: 'ContinueStatement',\n        DebuggerStatement: 'DebuggerStatement',\n        DoWhileStatement: 'DoWhileStatement',\n        EmptyStatement: 'EmptyStatement',\n        ExportDeclaration: 'ExportDeclaration',\n        ExportSpecifier: 'ExportSpecifier',\n        ExportSpecifierSet: 'ExportSpecifierSet',\n        ExpressionStatement: 'ExpressionStatement',\n        ForInStatement: 'ForInStatement',\n        ForOfStatement: 'ForOfStatement',\n        ForStatement: 'ForStatement',\n        FunctionDeclaration: 'FunctionDeclaration',\n        FunctionExpression: 'FunctionExpression',\n        Glob: 'Glob',\n        Identifier: 'Identifier',\n        IfStatement: 'IfStatement',\n        ImportDeclaration: 'ImportDeclaration',\n        ImportSpecifier: 'ImportSpecifier',\n        LabeledStatement: 'LabeledStatement',\n        Literal: 'Literal',\n        LogicalExpression: 'LogicalExpression',\n        MemberExpression: 'MemberExpression',\n        ModuleDeclaration: 'ModuleDeclaration',\n        NewExpression: 'NewExpression',\n        ObjectExpression: 'ObjectExpression',\n        ObjectPattern: 'ObjectPattern',\n        Path:  'Path',\n        Program: 'Program',\n        Property: 'Property',\n        QuasiElement: 'QuasiElement',\n        QuasiLiteral: 'QuasiLiteral',\n        ReturnStatement: 'ReturnStatement',\n        SequenceExpression: 'SequenceExpression',\n        SwitchCase: 'SwitchCase',\n        SwitchStatement: 'SwitchStatement',\n        TaggedQuasiExpression: 'TaggedQuasiExpression',\n        ThisExpression: 'ThisExpression',\n        ThrowStatement: 'ThrowStatement',\n        TryStatement: 'TryStatement',\n        UnaryExpression: 'UnaryExpression',\n        UpdateExpression: 'UpdateExpression',\n        VariableDeclaration: 'VariableDeclaration',\n        VariableDeclarator: 'VariableDeclarator',\n        WhileStatement: 'WhileStatement',\n        WithStatement: 'WithStatement',\n        YieldExpression: 'YieldExpression'\n    };\n\n    PropertyKind = {\n        Data: 1,\n        Get: 2,\n        Set: 4\n    };\n\n    // Error messages should be identical to V8.\n    Messages = {\n        UnexpectedToken:  'Unexpected token %0',\n        UnexpectedNumber:  'Unexpected number',\n        UnexpectedString:  'Unexpected string',\n        UnexpectedIdentifier:  'Unexpected identifier',\n        UnexpectedReserved:  'Unexpected reserved word',\n        UnexpectedQuasi:  'Unexpected quasi %0',\n        UnexpectedEOS:  'Unexpected end of input',\n        NewlineAfterThrow:  'Illegal newline after throw',\n        InvalidRegExp: 'Invalid regular expression',\n        UnterminatedRegExp:  'Invalid regular expression: missing /',\n        InvalidLHSInAssignment:  'Invalid left-hand side in assignment',\n        InvalidLHSInForIn:  'Invalid left-hand side in for-in',\n        MultipleDefaultsInSwitch: 'More than one default clause in switch statement',\n        NoCatchOrFinally:  'Missing catch or finally after try',\n        UnknownLabel: 'Undefined label \\'%0\\'',\n        Redeclaration: '%0 \\'%1\\' has already been declared',\n        IllegalContinue: 'Illegal continue statement',\n        IllegalBreak: 'Illegal break statement',\n        IllegalReturn: 'Illegal return statement',\n        IllegalYield: 'Illegal yield expression',\n        StrictModeWith:  'Strict mode code may not include a with statement',\n        StrictCatchVariable:  'Catch variable may not be eval or arguments in strict mode',\n        StrictVarName:  'Variable name may not be eval or arguments in strict mode',\n        StrictParamName:  'Parameter name eval or arguments is not allowed in strict mode',\n        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',\n        StrictFunctionName:  'Function name may not be eval or arguments in strict mode',\n        StrictOctalLiteral:  'Octal literals are not allowed in strict mode.',\n        StrictDelete:  'Delete of an unqualified identifier in strict mode.',\n        StrictDuplicateProperty:  'Duplicate data property in object literal not allowed in strict mode',\n        AccessorDataProperty:  'Object literal may not have data and accessor property with the same name',\n        AccessorGetSet:  'Object literal may not have multiple get/set accessors with the same name',\n        StrictLHSAssignment:  'Assignment to eval or arguments is not allowed in strict mode',\n        StrictLHSPostfix:  'Postfix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictLHSPrefix:  'Prefix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictReservedWord:  'Use of future reserved word in strict mode',\n        NoFromAfterImport: 'Missing from after import',\n        NoYieldInGenerator: 'Missing yield in generator'\n    };\n\n    // See also tools/generate-unicode-regex.py.\n    Regex = {\n        NonAsciiIdentifierStart: new RegExp('[\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]'),\n        NonAsciiIdentifierPart: new RegExp('[\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0300-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u0483-\\u0487\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0610-\\u061a\\u0620-\\u0669\\u066e-\\u06d3\\u06d5-\\u06dc\\u06df-\\u06e8\\u06ea-\\u06fc\\u06ff\\u0710-\\u074a\\u074d-\\u07b1\\u07c0-\\u07f5\\u07fa\\u0800-\\u082d\\u0840-\\u085b\\u08a0\\u08a2-\\u08ac\\u08e4-\\u08fe\\u0900-\\u0963\\u0966-\\u096f\\u0971-\\u0977\\u0979-\\u097f\\u0981-\\u0983\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bc-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09ce\\u09d7\\u09dc\\u09dd\\u09df-\\u09e3\\u09e6-\\u09f1\\u0a01-\\u0a03\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a59-\\u0a5c\\u0a5e\\u0a66-\\u0a75\\u0a81-\\u0a83\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abc-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ad0\\u0ae0-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3c-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5c\\u0b5d\\u0b5f-\\u0b63\\u0b66-\\u0b6f\\u0b71\\u0b82\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd0\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c58\\u0c59\\u0c60-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbc-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0cde\\u0ce0-\\u0ce3\\u0ce6-\\u0cef\\u0cf1\\u0cf2\\u0d02\\u0d03\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4e\\u0d57\\u0d60-\\u0d63\\u0d66-\\u0d6f\\u0d7a-\\u0d7f\\u0d82\\u0d83\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e01-\\u0e3a\\u0e40-\\u0e4e\\u0e50-\\u0e59\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb9\\u0ebb-\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0edc-\\u0edf\\u0f00\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e-\\u0f47\\u0f49-\\u0f6c\\u0f71-\\u0f84\\u0f86-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1049\\u1050-\\u109d\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u135d-\\u135f\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176c\\u176e-\\u1770\\u1772\\u1773\\u1780-\\u17d3\\u17d7\\u17dc\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a1b\\u1a20-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1aa7\\u1b00-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1bf3\\u1c00-\\u1c37\\u1c40-\\u1c49\\u1c4d-\\u1c7d\\u1cd0-\\u1cd2\\u1cd4-\\u1cf6\\u1d00-\\u1de6\\u1dfc-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u200c\\u200d\\u203f\\u2040\\u2054\\u2071\\u207f\\u2090-\\u209c\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d7f-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2de0-\\u2dff\\u2e2f\\u3005-\\u3007\\u3021-\\u302f\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u3099\\u309a\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua62b\\ua640-\\ua66f\\ua674-\\ua67d\\ua67f-\\ua697\\ua69f-\\ua6f1\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua827\\ua840-\\ua873\\ua880-\\ua8c4\\ua8d0-\\ua8d9\\ua8e0-\\ua8f7\\ua8fb\\ua900-\\ua92d\\ua930-\\ua953\\ua960-\\ua97c\\ua980-\\ua9c0\\ua9cf-\\ua9d9\\uaa00-\\uaa36\\uaa40-\\uaa4d\\uaa50-\\uaa59\\uaa60-\\uaa76\\uaa7a\\uaa7b\\uaa80-\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaef\\uaaf2-\\uaaf6\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff10-\\uff19\\uff21-\\uff3a\\uff3f\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]')\n    };\n\n    // Ensure the condition is true, otherwise throw an error.\n    // This is only to have a better contract semantic, i.e. another safety net\n    // to catch a logic error. The condition shall be fulfilled in normal case.\n    // Do NOT use this to enforce a certain condition on any user input.\n\n    function assert(condition, message) {\n        if (!condition) {\n            throw new Error('ASSERT: ' + message);\n        }\n    }\n\n    function sliceSource(from, to) {\n        return source.slice(from, to);\n    }\n\n    if (typeof 'esprima'[0] === 'undefined') {\n        sliceSource = function sliceArraySource(from, to) {\n            return source.slice(from, to).join('');\n        };\n    }\n\n    function isDecimalDigit(ch) {\n        return '0123456789'.indexOf(ch) >= 0;\n    }\n\n    function isHexDigit(ch) {\n        return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;\n    }\n\n    function isOctalDigit(ch) {\n        return '01234567'.indexOf(ch) >= 0;\n    }\n\n\n    // 7.2 White Space\n\n    function isWhiteSpace(ch) {\n        return (ch === ' ') || (ch === '\\u0009') || (ch === '\\u000B') ||\n            (ch === '\\u000C') || (ch === '\\u00A0') ||\n            (ch.charCodeAt(0) >= 0x1680 &&\n             '\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\uFEFF'.indexOf(ch) >= 0);\n    }\n\n    // 7.3 Line Terminators\n\n    function isLineTerminator(ch) {\n        return (ch === '\\n' || ch === '\\r' || ch === '\\u2028' || ch === '\\u2029');\n    }\n\n    // 7.6 Identifier Names and Identifiers\n\n    function isIdentifierStart(ch) {\n        return (ch === '$') || (ch === '_') || (ch === '\\\\') ||\n            (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') ||\n            ((ch.charCodeAt(0) >= 0x80) && Regex.NonAsciiIdentifierStart.test(ch));\n    }\n\n    function isIdentifierPart(ch) {\n        return (ch === '$') || (ch === '_') || (ch === '\\\\') ||\n            (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') ||\n            ((ch >= '0') && (ch <= '9')) ||\n            ((ch.charCodeAt(0) >= 0x80) && Regex.NonAsciiIdentifierPart.test(ch));\n    }\n\n    // 7.6.1.2 Future Reserved Words\n\n    function isFutureReservedWord(id) {\n        switch (id) {\n\n        // Future reserved words.\n        case 'class':\n        case 'enum':\n        case 'export':\n        case 'extends':\n        case 'import':\n        case 'super':\n            return true;\n        }\n\n        return false;\n    }\n\n    function isStrictModeReservedWord(id) {\n        switch (id) {\n\n        // Strict Mode reserved words.\n        case 'implements':\n        case 'interface':\n        case 'package':\n        case 'private':\n        case 'protected':\n        case 'public':\n        case 'static':\n        case 'yield':\n        case 'let':\n            return true;\n        }\n\n        return false;\n    }\n\n    function isRestrictedWord(id) {\n        return id === 'eval' || id === 'arguments';\n    }\n\n    // 7.6.1.1 Keywords\n\n    function isKeyword(id) {\n        var keyword = false;\n        switch (id.length) {\n        case 2:\n            keyword = (id === 'if') || (id === 'in') || (id === 'do');\n            break;\n        case 3:\n            keyword = (id === 'var') || (id === 'for') || (id === 'new') || (id === 'try');\n            break;\n        case 4:\n            keyword = (id === 'this') || (id === 'else') || (id === 'case') || (id === 'void') || (id === 'with');\n            break;\n        case 5:\n            keyword = (id === 'while') || (id === 'break') || (id === 'catch') || (id === 'throw');\n            break;\n        case 6:\n            keyword = (id === 'return') || (id === 'typeof') || (id === 'delete') || (id === 'switch');\n            break;\n        case 7:\n            keyword = (id === 'default') || (id === 'finally');\n            break;\n        case 8:\n            keyword = (id === 'function') || (id === 'continue') || (id === 'debugger');\n            break;\n        case 10:\n            keyword = (id === 'instanceof');\n            break;\n        }\n\n        if (keyword) {\n            return true;\n        }\n\n        switch (id) {\n        // Future reserved words.\n        // 'const' is specialized as Keyword in V8.\n        case 'const':\n            return true;\n\n        // For compatiblity to SpiderMonkey and ES.next\n        case 'yield':\n        case 'let':\n            return true;\n        }\n\n        if (strict && isStrictModeReservedWord(id)) {\n            return true;\n        }\n\n        return isFutureReservedWord(id);\n    }\n\n    // Return the next character and move forward.\n\n    function nextChar() {\n        return source[index++];\n    }\n\n    // 7.4 Comments\n\n    function skipComment() {\n        var ch, blockComment, lineComment;\n\n        blockComment = false;\n        lineComment = false;\n\n        while (index < length) {\n            ch = source[index];\n\n            if (lineComment) {\n                ch = nextChar();\n                if (isLineTerminator(ch)) {\n                    lineComment = false;\n                    if (ch === '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                    ++lineNumber;\n                    lineStart = index;\n                }\n            } else if (blockComment) {\n                if (isLineTerminator(ch)) {\n                    if (ch === '\\r' && source[index + 1] === '\\n') {\n                        ++index;\n                    }\n                    ++lineNumber;\n                    ++index;\n                    lineStart = index;\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    ch = nextChar();\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                    if (ch === '*') {\n                        ch = source[index];\n                        if (ch === '/') {\n                            ++index;\n                            blockComment = false;\n                        }\n                    }\n                }\n            } else if (ch === '/') {\n                ch = source[index + 1];\n                if (ch === '/') {\n                    index += 2;\n                    lineComment = true;\n                } else if (ch === '*') {\n                    index += 2;\n                    blockComment = true;\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    break;\n                }\n            } else if (isWhiteSpace(ch)) {\n                ++index;\n            } else if (isLineTerminator(ch)) {\n                ++index;\n                if (ch ===  '\\r' && source[index] === '\\n') {\n                    ++index;\n                }\n                ++lineNumber;\n                lineStart = index;\n            } else {\n                break;\n            }\n        }\n    }\n\n    function scanHexEscape(prefix) {\n        var i, len, ch, code = 0;\n\n        len = (prefix === 'u') ? 4 : 2;\n        for (i = 0; i < len; ++i) {\n            if (index < length && isHexDigit(source[index])) {\n                ch = nextChar();\n                code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n            } else {\n                return '';\n            }\n        }\n        return String.fromCharCode(code);\n    }\n\n    function scanUnicodeCodePointEscape() {\n        var ch, code, cu1, cu2;\n\n        ch = source[index];\n        code = 0;\n\n        // At least, one hex digit is required.\n        if (ch === '}') {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        while (index < length) {\n            ch = nextChar();\n            if (!isHexDigit(ch)) {\n                break;\n            }\n            code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n        }\n\n        if (code > 0x10FFFF || ch !== '}') {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        // UTF-16 Encoding\n        if (code <= 0xFFFF) {\n            return String.fromCharCode(code);\n        }\n        cu1 = ((code - 0x10000) >> 10) + 0xD800;\n        cu2 = ((code - 0x10000) & 1023) + 0xDC00;\n        return String.fromCharCode(cu1, cu2);\n    }\n\n    function scanIdentifier() {\n        var ch, start, id, restore;\n\n        ch = source[index];\n        if (!isIdentifierStart(ch)) {\n            return;\n        }\n\n        start = index;\n        if (ch === '\\\\') {\n            ++index;\n            if (source[index] !== 'u') {\n                return;\n            }\n            ++index;\n            restore = index;\n            ch = scanHexEscape('u');\n            if (ch) {\n                if (ch === '\\\\' || !isIdentifierStart(ch)) {\n                    return;\n                }\n                id = ch;\n            } else {\n                index = restore;\n                id = 'u';\n            }\n        } else {\n            id = nextChar();\n        }\n\n        while (index < length) {\n            ch = source[index];\n            if (!isIdentifierPart(ch)) {\n                break;\n            }\n            if (ch === '\\\\') {\n                ++index;\n                if (source[index] !== 'u') {\n                    return;\n                }\n                ++index;\n                restore = index;\n                ch = scanHexEscape('u');\n                if (ch) {\n                    if (ch === '\\\\' || !isIdentifierPart(ch)) {\n                        return;\n                    }\n                    id += ch;\n                } else {\n                    index = restore;\n                    id += 'u';\n                }\n            } else {\n                id += nextChar();\n            }\n        }\n\n        // There is no keyword or literal with only one character.\n        // Thus, it must be an identifier.\n        if (id.length === 1) {\n            return {\n                type: Token.Identifier,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (isKeyword(id)) {\n            return {\n                type: Token.Keyword,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // 7.8.1 Null Literals\n\n        if (id === 'null') {\n            return {\n                type: Token.NullLiteral,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // 7.8.2 Boolean Literals\n\n        if (id === 'true' || id === 'false') {\n            return {\n                type: Token.BooleanLiteral,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        return {\n            type: Token.Identifier,\n            value: id,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    // 7.7 Punctuators\n\n    function scanPunctuator() {\n        var start = index,\n            ch1 = source[index],\n            ch2,\n            ch3,\n            ch4;\n\n        // Check for most common single-character punctuators.\n\n        if (ch1 === ';' || ch1 === '{' || ch1 === '}') {\n            ++index;\n            return {\n                type: Token.Punctuator,\n                value: ch1,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === ',' || ch1 === '(' || ch1 === ')') {\n            ++index;\n            return {\n                type: Token.Punctuator,\n                value: ch1,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // Dot (.) can also start a floating-point number, hence the need\n        // to check the next character.\n\n        ch2 = source[index + 1];\n        if (ch1 === '.' && !isDecimalDigit(ch2)) {\n            return {\n                type: Token.Punctuator,\n                value: nextChar(),\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // Peek more characters.\n\n        ch3 = source[index + 2];\n        ch4 = source[index + 3];\n\n        // 4-character punctuator: >>>=\n\n        if (ch1 === '>' && ch2 === '>' && ch3 === '>') {\n            if (ch4 === '=') {\n                index += 4;\n                return {\n                    type: Token.Punctuator,\n                    value: '>>>=',\n                    lineNumber: lineNumber,\n                    lineStart: lineStart,\n                    range: [start, index]\n                };\n            }\n        }\n\n        // 3-character punctuators: === !== >>> <<= >>=\n\n        if (ch1 === '=' && ch2 === '=' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '===',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '!' && ch2 === '=' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '!==',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '>' && ch2 === '>' && ch3 === '>') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '>>>',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '<' && ch2 === '<' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '<<=',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '>' && ch2 === '>' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '>>=',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // 2-character punctuators: <= >= == != ++ -- << >> && ||\n        // += -= *= %= &= |= ^= /=\n\n        if (ch2 === '=') {\n            if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {\n                index += 2;\n                return {\n                    type: Token.Punctuator,\n                    value: ch1 + ch2,\n                    lineNumber: lineNumber,\n                    lineStart: lineStart,\n                    range: [start, index]\n                };\n            }\n        }\n\n        if (ch1 === ch2 && ('+-<>&|'.indexOf(ch1) >= 0)) {\n            if ('+-<>&|'.indexOf(ch2) >= 0) {\n                index += 2;\n                return {\n                    type: Token.Punctuator,\n                    value: ch1 + ch2,\n                    lineNumber: lineNumber,\n                    lineStart: lineStart,\n                    range: [start, index]\n                };\n            }\n        }\n\n        if (ch1 === '=' && ch2 === '>') {\n            index += 2;\n            return {\n                type: Token.Punctuator,\n                value: '=>',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // The remaining 1-character punctuators.\n\n        if ('[]<>+-*%&|^!~?:=/'.indexOf(ch1) >= 0) {\n            return {\n                type: Token.Punctuator,\n                value: nextChar(),\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n    }\n\n    // 7.8.3 Numeric Literals\n\n    function scanNumericLiteral() {\n        var number, start, ch, octal;\n\n        ch = source[index];\n        assert(isDecimalDigit(ch) || (ch === '.'),\n            'Numeric literal must start with a decimal digit or a decimal point');\n\n        start = index;\n        number = '';\n        if (ch !== '.') {\n            number = nextChar();\n            ch = source[index];\n\n            // Hex number starts with '0x'.\n            // Octal number starts with '0'.\n            // Octal number in ES6 starts with '0o'.\n            // Binary number in ES6 starts with '0b'.\n            if (number === '0') {\n                if (ch === 'x' || ch === 'X') {\n                    number += nextChar();\n                    while (index < length) {\n                        ch = source[index];\n                        if (!isHexDigit(ch)) {\n                            break;\n                        }\n                        number += nextChar();\n                    }\n\n                    if (number.length <= 2) {\n                        // only 0x\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n\n                    if (index < length) {\n                        ch = source[index];\n                        if (isIdentifierStart(ch)) {\n                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                        }\n                    }\n                    return {\n                        type: Token.NumericLiteral,\n                        value: parseInt(number, 16),\n                        lineNumber: lineNumber,\n                        lineStart: lineStart,\n                        range: [start, index]\n                    };\n                } else if (ch === 'b' || ch === 'B') {\n                    nextChar();\n                    number = '';\n\n                    while (index < length) {\n                        ch = source[index];\n                        if (ch !== '0' && ch !== '1') {\n                            break;\n                        }\n                        number += nextChar();\n                    }\n\n                    if (number.length === 0) {\n                        // only 0b or 0B\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n\n                    if (index < length) {\n                        ch = source[index];\n                        if (isIdentifierStart(ch) || isDecimalDigit(ch)) {\n                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                        }\n                    }\n                    return {\n                        type: Token.NumericLiteral,\n                        value: parseInt(number, 2),\n                        lineNumber: lineNumber,\n                        lineStart: lineStart,\n                        range: [start, index]\n                    };\n                } else if (ch === 'o' || ch === 'O' || isOctalDigit(ch)) {\n                    if (isOctalDigit(ch)) {\n                        octal = true;\n                        number = nextChar();\n                    } else {\n                        octal = false;\n                        nextChar();\n                        number = '';\n                    }\n\n                    while (index < length) {\n                        ch = source[index];\n                        if (!isOctalDigit(ch)) {\n                            break;\n                        }\n                        number += nextChar();\n                    }\n\n                    if (number.length === 0) {\n                        // only 0o or 0O\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n\n                    if (index < length) {\n                        ch = source[index];\n                        if (isIdentifierStart(ch) || isDecimalDigit(ch)) {\n                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                        }\n                    }\n\n                    return {\n                        type: Token.NumericLiteral,\n                        value: parseInt(number, 8),\n                        octal: octal,\n                        lineNumber: lineNumber,\n                        lineStart: lineStart,\n                        range: [start, index]\n                    };\n                }\n\n                // decimal number starts with '0' such as '09' is illegal.\n                if (isDecimalDigit(ch)) {\n                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                }\n            }\n\n            while (index < length) {\n                ch = source[index];\n                if (!isDecimalDigit(ch)) {\n                    break;\n                }\n                number += nextChar();\n            }\n        }\n\n        if (ch === '.') {\n            number += nextChar();\n            while (index < length) {\n                ch = source[index];\n                if (!isDecimalDigit(ch)) {\n                    break;\n                }\n                number += nextChar();\n            }\n        }\n\n        if (ch === 'e' || ch === 'E') {\n            number += nextChar();\n\n            ch = source[index];\n            if (ch === '+' || ch === '-') {\n                number += nextChar();\n            }\n\n            ch = source[index];\n            if (isDecimalDigit(ch)) {\n                number += nextChar();\n                while (index < length) {\n                    ch = source[index];\n                    if (!isDecimalDigit(ch)) {\n                        break;\n                    }\n                    number += nextChar();\n                }\n            } else {\n                ch = 'character ' + ch;\n                if (index >= length) {\n                    ch = '<end>';\n                }\n                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n            }\n        }\n\n        if (index < length) {\n            ch = source[index];\n            if (isIdentifierStart(ch)) {\n                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n            }\n        }\n\n        return {\n            type: Token.NumericLiteral,\n            value: parseFloat(number),\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    // 7.8.4 String Literals\n\n    function scanStringLiteral() {\n        var str = '', quote, start, ch, code, unescaped, restore, octal = false;\n\n        quote = source[index];\n        assert((quote === '\\'' || quote === '\"'),\n            'String literal must starts with a quote');\n\n        start = index;\n        ++index;\n\n        while (index < length) {\n            ch = nextChar();\n\n            if (ch === quote) {\n                quote = '';\n                break;\n            } else if (ch === '\\\\') {\n                ch = nextChar();\n                if (!isLineTerminator(ch)) {\n                    switch (ch) {\n                    case 'n':\n                        str += '\\n';\n                        break;\n                    case 'r':\n                        str += '\\r';\n                        break;\n                    case 't':\n                        str += '\\t';\n                        break;\n                    case 'u':\n                    case 'x':\n                        if (source[index] === '{') {\n                            ++index;\n                            str += scanUnicodeCodePointEscape();\n                        } else {\n                            restore = index;\n                            unescaped = scanHexEscape(ch);\n                            if (unescaped) {\n                                str += unescaped;\n                            } else {\n                                index = restore;\n                                str += ch;\n                            }\n                        }\n                        break;\n                    case 'b':\n                        str += '\\b';\n                        break;\n                    case 'f':\n                        str += '\\f';\n                        break;\n                    case 'v':\n                        str += '\\v';\n                        break;\n\n                    default:\n                        if (isOctalDigit(ch)) {\n                            code = '01234567'.indexOf(ch);\n\n                            // \\0 is not octal escape sequence\n                            if (code !== 0) {\n                                octal = true;\n                            }\n\n                            if (index < length && isOctalDigit(source[index])) {\n                                octal = true;\n                                code = code * 8 + '01234567'.indexOf(nextChar());\n\n                                // 3 digits are only allowed when string starts\n                                // with 0, 1, 2, 3\n                                if ('0123'.indexOf(ch) >= 0 &&\n                                        index < length &&\n                                        isOctalDigit(source[index])) {\n                                    code = code * 8 + '01234567'.indexOf(nextChar());\n                                }\n                            }\n                            str += String.fromCharCode(code);\n                        } else {\n                            str += ch;\n                        }\n                        break;\n                    }\n                } else {\n                    ++lineNumber;\n                    if (ch ===  '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                }\n            } else if (isLineTerminator(ch)) {\n                break;\n            } else {\n                str += ch;\n            }\n        }\n\n        if (quote !== '') {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        return {\n            type: Token.StringLiteral,\n            value: str,\n            octal: octal,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    function scanQuasi() {\n        var cooked = '', ch, start, terminated, tail, restore, unescaped, code, octal;\n\n        terminated = false;\n        tail = false;\n        start = index;\n\n        ++index;\n\n        while (index < length) {\n            ch = nextChar();\n            if (ch === '`') {\n                tail = true;\n                terminated = true;\n                break;\n            } else if (ch === '$') {\n                if (source[index] === '{') {\n                    ++index;\n                    terminated = true;\n                    break;\n                }\n                cooked += ch;\n            } else if (ch === '\\\\') {\n                ch = nextChar();\n                if (!isLineTerminator(ch)) {\n                    switch (ch) {\n                    case 'n':\n                        cooked += '\\n';\n                        break;\n                    case 'r':\n                        cooked += '\\r';\n                        break;\n                    case 't':\n                        cooked += '\\t';\n                        break;\n                    case 'u':\n                    case 'x':\n                        if (source[index] === '{') {\n                            ++index;\n                            cooked += scanUnicodeCodePointEscape();\n                        } else {\n                            restore = index;\n                            unescaped = scanHexEscape(ch);\n                            if (unescaped) {\n                                cooked += unescaped;\n                            } else {\n                                index = restore;\n                                cooked += ch;\n                            }\n                        }\n                        break;\n                    case 'b':\n                        cooked += '\\b';\n                        break;\n                    case 'f':\n                        cooked += '\\f';\n                        break;\n                    case 'v':\n                        cooked += '\\v';\n                        break;\n\n                    default:\n                        if (isOctalDigit(ch)) {\n                            code = '01234567'.indexOf(ch);\n\n                            // \\0 is not octal escape sequence\n                            if (code !== 0) {\n                                octal = true;\n                            }\n\n                            if (index < length && isOctalDigit(source[index])) {\n                                octal = true;\n                                code = code * 8 + '01234567'.indexOf(nextChar());\n\n                                // 3 digits are only allowed when string starts\n                                // with 0, 1, 2, 3\n                                if ('0123'.indexOf(ch) >= 0 &&\n                                        index < length &&\n                                        isOctalDigit(source[index])) {\n                                    code = code * 8 + '01234567'.indexOf(nextChar());\n                                }\n                            }\n                            cooked += String.fromCharCode(code);\n                        } else {\n                            cooked += ch;\n                        }\n                        break;\n                    }\n                } else {\n                    ++lineNumber;\n                    if (ch ===  '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                }\n            } else if (isLineTerminator(ch)) {\n                ++lineNumber;\n                if (ch ===  '\\r' && source[index] === '\\n') {\n                    ++index;\n                }\n            } else {\n                cooked += ch;\n            }\n        }\n\n        if (!terminated) {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        return {\n            type: Token.Quasi,\n            value: {\n                cooked: cooked,\n                raw: sliceSource(start + 1, index - ((tail) ? 1 : 2))\n            },\n            tail: tail,\n            octal: octal,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    function scanQuasiElement(option) {\n        var startsWith;\n\n        buffer = null;\n        skipComment();\n\n        startsWith = (option.head) ? '`' : '}';\n\n        if (source[index] !== startsWith) {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        return scanQuasi();\n    }\n\n    function scanRegExp() {\n        var str = '', ch, start, pattern, flags, value, classMarker = false, restore, terminated = false;\n\n        buffer = null;\n        skipComment();\n\n        start = index;\n        ch = source[index];\n        assert(ch === '/', 'Regular expression literal must start with a slash');\n        str = nextChar();\n\n        while (index < length) {\n            ch = nextChar();\n            str += ch;\n            if (classMarker) {\n                if (ch === ']') {\n                    classMarker = false;\n                }\n            } else {\n                if (ch === '\\\\') {\n                    ch = nextChar();\n                    // ECMA-262 7.8.5\n                    if (isLineTerminator(ch)) {\n                        throwError({}, Messages.UnterminatedRegExp);\n                    }\n                    str += ch;\n                } else if (ch === '/') {\n                    terminated = true;\n                    break;\n                } else if (ch === '[') {\n                    classMarker = true;\n                } else if (isLineTerminator(ch)) {\n                    throwError({}, Messages.UnterminatedRegExp);\n                }\n            }\n        }\n\n        if (!terminated) {\n            throwError({}, Messages.UnterminatedRegExp);\n        }\n\n        // Exclude leading and trailing slash.\n        pattern = str.substr(1, str.length - 2);\n\n        flags = '';\n        while (index < length) {\n            ch = source[index];\n            if (!isIdentifierPart(ch)) {\n                break;\n            }\n\n            ++index;\n            if (ch === '\\\\' && index < length) {\n                ch = source[index];\n                if (ch === 'u') {\n                    ++index;\n                    restore = index;\n                    ch = scanHexEscape('u');\n                    if (ch) {\n                        flags += ch;\n                        str += '\\\\u';\n                        for (; restore < index; ++restore) {\n                            str += source[restore];\n                        }\n                    } else {\n                        index = restore;\n                        flags += 'u';\n                        str += '\\\\u';\n                    }\n                } else {\n                    str += '\\\\';\n                }\n            } else {\n                flags += ch;\n                str += ch;\n            }\n        }\n\n        try {\n            value = new RegExp(pattern, flags);\n        } catch (e) {\n            throwError({}, Messages.InvalidRegExp);\n        }\n\n        return {\n            literal: str,\n            value: value,\n            range: [start, index]\n        };\n    }\n\n    function isIdentifierName(token) {\n        return token.type === Token.Identifier ||\n            token.type === Token.Keyword ||\n            token.type === Token.BooleanLiteral ||\n            token.type === Token.NullLiteral;\n    }\n\n    function advance() {\n        var ch, token;\n\n        skipComment();\n\n        if (index >= length) {\n            return {\n                type: Token.EOF,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [index, index]\n            };\n        }\n\n        token = scanPunctuator();\n        if (typeof token !== 'undefined') {\n            return token;\n        }\n\n        ch = source[index];\n\n        if (ch === '\\'' || ch === '\"') {\n            return scanStringLiteral();\n        }\n\n        if (ch === '.' || isDecimalDigit(ch)) {\n            return scanNumericLiteral();\n        }\n\n        if (ch === '`') {\n            return scanQuasi();\n        }\n\n        token = scanIdentifier();\n        if (typeof token !== 'undefined') {\n            return token;\n        }\n\n        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n    }\n\n    function lex() {\n        var token;\n\n        if (buffer) {\n            index = buffer.range[1];\n            lineNumber = buffer.lineNumber;\n            lineStart = buffer.lineStart;\n            token = buffer;\n            buffer = null;\n            return token;\n        }\n\n        buffer = null;\n        return advance();\n    }\n\n    function lookahead() {\n        var pos, line, start;\n\n        if (buffer !== null) {\n            return buffer;\n        }\n\n        pos = index;\n        line = lineNumber;\n        start = lineStart;\n        buffer = advance();\n        index = pos;\n        lineNumber = line;\n        lineStart = start;\n\n        return buffer;\n    }\n\n    function lookahead2() {\n        var adv, pos, line, start, result;\n\n        // If we are collecting the tokens, don't grab the next one yet.\n        adv = (typeof extra.advance === 'function') ? extra.advance : advance;\n\n        pos = index;\n        line = lineNumber;\n        start = lineStart;\n\n        // Scan for the next immediate token.\n        if (buffer === null) {\n            buffer = adv();\n        }\n        index = buffer.range[1];\n        lineNumber = buffer.lineNumber;\n        lineStart = buffer.lineStart;\n\n        // Grab the token right after.\n        result = adv();\n        index = pos;\n        lineNumber = line;\n        lineStart = start;\n\n        return result;\n    }\n\n    // Return true if there is a line terminator before the next token.\n\n    function peekLineTerminator() {\n        var pos, line, start, found;\n\n        pos = index;\n        line = lineNumber;\n        start = lineStart;\n        skipComment();\n        found = lineNumber !== line;\n        index = pos;\n        lineNumber = line;\n        lineStart = start;\n\n        return found;\n    }\n\n    // Throw an exception\n\n    function throwError(token, messageFormat) {\n        var error,\n            args = Array.prototype.slice.call(arguments, 2),\n            msg = messageFormat.replace(\n                /%(\\d)/g,\n                function (whole, index) {\n                    return args[index] || '';\n                }\n            );\n\n        if (typeof token.lineNumber === 'number') {\n            error = new Error('Line ' + token.lineNumber + ': ' + msg);\n            error.index = token.range[0];\n            error.lineNumber = token.lineNumber;\n            error.column = token.range[0] - lineStart + 1;\n        } else {\n            error = new Error('Line ' + lineNumber + ': ' + msg);\n            error.index = index;\n            error.lineNumber = lineNumber;\n            error.column = index - lineStart + 1;\n        }\n\n        throw error;\n    }\n\n    function throwErrorTolerant() {\n        try {\n            throwError.apply(null, arguments);\n        } catch (e) {\n            if (extra.errors) {\n                extra.errors.push(e);\n            } else {\n                throw e;\n            }\n        }\n    }\n\n\n    // Throw an exception because of the token.\n\n    function throwUnexpected(token) {\n        if (token.type === Token.EOF) {\n            throwError(token, Messages.UnexpectedEOS);\n        }\n\n        if (token.type === Token.NumericLiteral) {\n            throwError(token, Messages.UnexpectedNumber);\n        }\n\n        if (token.type === Token.StringLiteral) {\n            throwError(token, Messages.UnexpectedString);\n        }\n\n        if (token.type === Token.Identifier) {\n            throwError(token, Messages.UnexpectedIdentifier);\n        }\n\n        if (token.type === Token.Keyword) {\n            if (isFutureReservedWord(token.value)) {\n                throwError(token, Messages.UnexpectedReserved);\n            } else if (strict && isStrictModeReservedWord(token.value)) {\n                throwError(token, Messages.StrictReservedWord);\n            }\n            throwError(token, Messages.UnexpectedToken, token.value);\n        }\n\n        if (token.type === Token.Quasi) {\n            throwError(token, Messages.UnexpectedQuasi, token.value.raw);\n        }\n\n        // BooleanLiteral, NullLiteral, or Punctuator.\n        throwError(token, Messages.UnexpectedToken, token.value);\n    }\n\n    // Expect the next token to match the specified punctuator.\n    // If not, an exception will be thrown.\n\n    function expect(value) {\n        var token = lex();\n        if (token.type !== Token.Punctuator || token.value !== value) {\n            throwUnexpected(token);\n        }\n    }\n\n    // Expect the next token to match the specified keyword.\n    // If not, an exception will be thrown.\n\n    function expectKeyword(keyword) {\n        var token = lex();\n        if (token.type !== Token.Keyword || token.value !== keyword) {\n            throwUnexpected(token);\n        }\n    }\n\n    // Return true if the next token matches the specified punctuator.\n\n    function match(value) {\n        var token = lookahead();\n        return token.type === Token.Punctuator && token.value === value;\n    }\n\n    // Return true if the next token matches the specified keyword\n\n    function matchKeyword(keyword) {\n        var token = lookahead();\n        return token.type === Token.Keyword && token.value === keyword;\n    }\n\n\n    // Return true if the next token matches the specified contextual keyword\n\n    function matchContextualKeyword(keyword) {\n        var token = lookahead();\n        return token.type === Token.Identifier && token.value === keyword;\n    }\n\n    // Return true if the next token is an assignment operator\n\n    function matchAssign() {\n        var token = lookahead(),\n            op = token.value;\n\n        if (token.type !== Token.Punctuator) {\n            return false;\n        }\n        return op === '=' ||\n            op === '*=' ||\n            op === '/=' ||\n            op === '%=' ||\n            op === '+=' ||\n            op === '-=' ||\n            op === '<<=' ||\n            op === '>>=' ||\n            op === '>>>=' ||\n            op === '&=' ||\n            op === '^=' ||\n            op === '|=';\n    }\n\n    function consumeSemicolon() {\n        var token, line;\n\n        // Catch the very common case first.\n        if (source[index] === ';') {\n            lex();\n            return;\n        }\n\n        line = lineNumber;\n        skipComment();\n        if (lineNumber !== line) {\n            return;\n        }\n\n        if (match(';')) {\n            lex();\n            return;\n        }\n\n        token = lookahead();\n        if (token.type !== Token.EOF && !match('}')) {\n            throwUnexpected(token);\n        }\n        return;\n    }\n\n    // Return true if provided expression is LeftHandSideExpression\n\n    function isLeftHandSide(expr) {\n        return expr.type === Syntax.Identifier || expr.type === Syntax.MemberExpression;\n    }\n\n    function isAssignableLeftHandSide(expr) {\n        return isLeftHandSide(expr) || expr.type === Syntax.ObjectPattern || expr.type === Syntax.ArrayPattern;\n    }\n\n    // 11.1.4 Array Initialiser\n\n    function parseArrayInitialiser() {\n        var elements = [];\n\n        expect('[');\n\n        while (!match(']')) {\n            if (match(',')) {\n                lex();\n                elements.push(null);\n            } else {\n                elements.push(parseAssignmentExpression());\n\n                if (!match(']')) {\n                    expect(',');\n                }\n            }\n        }\n\n        expect(']');\n\n        return {\n            type: Syntax.ArrayExpression,\n            elements: elements\n        };\n    }\n\n    // 11.1.5 Object Initialiser\n\n    function parsePropertyFunction(param, options) {\n        var previousStrict, previousYieldAllowed, body;\n\n        previousStrict = strict;\n        previousYieldAllowed = yieldAllowed;\n        yieldAllowed = options.generator;\n        body = parseConciseBody();\n        if (options.name && strict && isRestrictedWord(param[0].name)) {\n            throwError(options.name, Messages.StrictParamName);\n        }\n        if (yieldAllowed && !yieldFound) {\n            throwError({}, Messages.NoYieldInGenerator);\n        }\n        strict = previousStrict;\n        yieldAllowed = previousYieldAllowed;\n\n        return {\n            type: Syntax.FunctionExpression,\n            id: null,\n            params: param,\n            defaults: [],\n            body: body,\n            rest: null,\n            generator: options.generator,\n            expression: body.type !== Syntax.BlockStatement\n        };\n    }\n\n    function parsePropertyMethodFunction(options) {\n        var token, previousStrict, param, params, paramSet, method;\n\n        previousStrict = strict;\n        strict = true;\n        params = [];\n\n        expect('(');\n\n        if (!match(')')) {\n            paramSet = {};\n            while (index < length) {\n                token = lookahead();\n                param = parseVariableIdentifier();\n                if (isRestrictedWord(token.value)) {\n                    throwError(token, Messages.StrictParamName);\n                }\n                if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                    throwError(token, Messages.StrictParamDupe);\n                }\n                params.push(param);\n                paramSet[param.name] = true;\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        method = parsePropertyFunction(params, { generator: options.generator });\n\n        strict = previousStrict;\n\n        return method;\n    }\n\n    function parseObjectPropertyKey() {\n        var token = lex();\n\n        // Note: This function is called only from parseObjectProperty(), where\n        // EOF and Punctuator tokens are already filtered out.\n\n        if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {\n            if (strict && token.octal) {\n                throwError(token, Messages.StrictOctalLiteral);\n            }\n            return createLiteral(token);\n        }\n\n        return {\n            type: Syntax.Identifier,\n            name: token.value\n        };\n    }\n\n    function parseObjectProperty() {\n        var token, key, id, param;\n\n        token = lookahead();\n\n        if (token.type === Token.Identifier) {\n\n            id = parseObjectPropertyKey();\n\n            // Property Assignment: Getter and Setter.\n\n            if (token.value === 'get' && !(match(':') || match('('))) {\n                key = parseObjectPropertyKey();\n                expect('(');\n                expect(')');\n                return {\n                    type: Syntax.Property,\n                    key: key,\n                    value: parsePropertyFunction([], { generator: false }),\n                    kind: 'get'\n                };\n            } else if (token.value === 'set' && !(match(':') || match('('))) {\n                key = parseObjectPropertyKey();\n                expect('(');\n                token = lookahead();\n                param = [ parseVariableIdentifier() ];\n                expect(')');\n                return {\n                    type: Syntax.Property,\n                    key: key,\n                    value: parsePropertyFunction(param, { generator: false, name: token }),\n                    kind: 'set'\n                };\n            } else {\n                if (match(':')) {\n                    lex();\n                    return {\n                        type: Syntax.Property,\n                        key: id,\n                        value: parseAssignmentExpression(),\n                        kind: 'init'\n                    };\n                } else if (match('(')) {\n                    return {\n                        type: Syntax.Property,\n                        key: id,\n                        value: parsePropertyMethodFunction({ generator: false }),\n                        kind: 'init',\n                        method: true\n                    };\n                } else {\n                    return {\n                        type: Syntax.Property,\n                        key: id,\n                        value: id,\n                        kind: 'init',\n                        shorthand: true\n                    };\n                }\n            }\n        } else if (token.type === Token.EOF || token.type === Token.Punctuator) {\n            if (!match('*')) {\n                throwUnexpected(token);\n            }\n            lex();\n\n            id = parseObjectPropertyKey();\n\n            if (!match('(')) {\n                throwUnexpected(lex());\n            }\n\n            return {\n                type: Syntax.Property,\n                key: id,\n                value: parsePropertyMethodFunction({ generator: true }),\n                kind: 'init',\n                method: true\n            };\n        } else {\n            key = parseObjectPropertyKey();\n            if (match(':')) {\n                lex();\n                return {\n                    type: Syntax.Property,\n                    key: key,\n                    value: parseAssignmentExpression(),\n                    kind: 'init'\n                };\n            } else if (match('(')) {\n                return {\n                    type: Syntax.Property,\n                    key: key,\n                    value: parsePropertyMethodFunction({ generator: false }),\n                    kind: 'init',\n                    method: true\n                };\n            } else {\n                return {\n                    type: Syntax.Property,\n                    key: key,\n                    value: key,\n                    kind: 'init',\n                    shorthand: true\n                };\n            }\n        }\n    }\n\n    function parseObjectInitialiser() {\n        var properties = [], property, name, kind, map = {}, toString = String;\n\n        expect('{');\n\n        while (!match('}')) {\n            property = parseObjectProperty();\n\n            if (property.key.type === Syntax.Identifier) {\n                name = property.key.name;\n            } else {\n                name = toString(property.key.value);\n            }\n            kind = (property.kind === 'init') ? PropertyKind.Data : (property.kind === 'get') ? PropertyKind.Get : PropertyKind.Set;\n            if (Object.prototype.hasOwnProperty.call(map, name)) {\n                if (map[name] === PropertyKind.Data) {\n                    if (strict && kind === PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.StrictDuplicateProperty);\n                    } else if (kind !== PropertyKind.Data) {\n                        throwError({}, Messages.AccessorDataProperty);\n                    }\n                } else {\n                    if (kind === PropertyKind.Data) {\n                        throwError({}, Messages.AccessorDataProperty);\n                    } else if (map[name] & kind) {\n                        throwError({}, Messages.AccessorGetSet);\n                    }\n                }\n                map[name] |= kind;\n            } else {\n                map[name] = kind;\n            }\n\n            properties.push(property);\n\n            if (!match('}')) {\n                expect(',');\n            }\n        }\n\n        expect('}');\n\n        return {\n            type: Syntax.ObjectExpression,\n            properties: properties\n        };\n    }\n\n    function parseQuasiElement(option) {\n        var token = scanQuasiElement(option);\n        if (strict && token.octal) {\n            throwError(token, Messages.StrictOctalLiteral);\n        }\n        return {\n            type: Syntax.QuasiElement,\n            value: {\n                raw: token.value.raw,\n                cooked: token.value.cooked\n            },\n            tail: token.tail\n        };\n    }\n\n    function parseQuasiLiteral() {\n        var quasi, quasis, expressions;\n\n        quasi = parseQuasiElement({ head: true });\n        quasis = [ quasi ];\n        expressions = [];\n\n        while (!quasi.tail) {\n            expressions.push(parseExpression());\n            quasi = parseQuasiElement({ head: false });\n            quasis.push(quasi);\n        }\n\n        return {\n            type: Syntax.QuasiLiteral,\n            quasis: quasis,\n            expressions: expressions\n        };\n    }\n\n    // 11.1 Primary Expressions\n\n    function parsePrimaryExpression() {\n        var expr,\n            token = lookahead(),\n            type = token.type;\n\n        if (type === Token.Identifier) {\n            return {\n                type: Syntax.Identifier,\n                name: lex().value\n            };\n        }\n\n        if (type === Token.StringLiteral || type === Token.NumericLiteral) {\n            if (strict && token.octal) {\n                throwErrorTolerant(token, Messages.StrictOctalLiteral);\n            }\n            return createLiteral(lex());\n        }\n\n        if (type === Token.Keyword) {\n            if (matchKeyword('this')) {\n                lex();\n                return {\n                    type: Syntax.ThisExpression\n                };\n            }\n\n            if (matchKeyword('function')) {\n                return parseFunctionExpression();\n            }\n\n            if (matchKeyword('class')) {\n                return parseClassExpression();\n            }\n\n            if (matchKeyword('super')) {\n                lex();\n                return {\n                    type: Syntax.Identifier,\n                    name: 'super'\n                };\n            }\n        }\n\n        if (type === Token.BooleanLiteral) {\n            lex();\n            token.value = (token.value === 'true');\n            return createLiteral(token);\n        }\n\n        if (type === Token.NullLiteral) {\n            lex();\n            token.value = null;\n            return createLiteral(token);\n        }\n\n        if (match('[')) {\n            return parseArrayInitialiser();\n        }\n\n        if (match('{')) {\n            return parseObjectInitialiser();\n        }\n\n        if (match('(')) {\n            lex();\n            state.lastParenthesized = expr = parseExpression();\n            state.parenthesizedCount += 1;\n            expect(')');\n            return expr;\n        }\n\n        if (match('/') || match('/=')) {\n            return createLiteral(scanRegExp());\n        }\n\n        if (type === Token.Quasi) {\n            return parseQuasiLiteral();\n        }\n\n        return throwUnexpected(lex());\n    }\n\n    // 11.2 Left-Hand-Side Expressions\n\n    function parseArguments() {\n        var args = [];\n\n        expect('(');\n\n        if (!match(')')) {\n            while (index < length) {\n                args.push(parseAssignmentExpression());\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        return args;\n    }\n\n    function parseNonComputedProperty() {\n        var token = lex();\n\n        if (!isIdentifierName(token)) {\n            throwUnexpected(token);\n        }\n\n        return {\n            type: Syntax.Identifier,\n            name: token.value\n        };\n    }\n\n    function parseNonComputedMember(object) {\n        return {\n            type: Syntax.MemberExpression,\n            computed: false,\n            object: object,\n            property: parseNonComputedProperty()\n        };\n    }\n\n    function parseComputedMember(object) {\n        var property, expr;\n\n        expect('[');\n        property = parseExpression();\n        expr = {\n            type: Syntax.MemberExpression,\n            computed: true,\n            object: object,\n            property: property\n        };\n        expect(']');\n        return expr;\n    }\n\n    function parseTaggedQuasi(tag) {\n        return {\n            type: Syntax.TaggedQuasiExpression,\n            tag: tag,\n            quasi: parseQuasiLiteral()\n        };\n    }\n\n    function parseCallMember(object) {\n        return {\n            type: Syntax.CallExpression,\n            callee: object,\n            'arguments': parseArguments()\n        };\n    }\n\n    function parseNewExpression() {\n        var expr;\n\n        expectKeyword('new');\n\n        expr = {\n            type: Syntax.NewExpression,\n            callee: parseLeftHandSideExpression(),\n            'arguments': []\n        };\n\n        if (match('(')) {\n            expr['arguments'] = parseArguments();\n        }\n\n        return expr;\n    }\n\n    function parseLeftHandSideExpressionAllowCall() {\n        var useNew, expr;\n\n        useNew = matchKeyword('new');\n        expr = useNew ? parseNewExpression() : parsePrimaryExpression();\n\n        while (index < length) {\n            if (match('.')) {\n                lex();\n                expr = parseNonComputedMember(expr);\n            } else if (match('[')) {\n                expr = parseComputedMember(expr);\n            } else if (match('(')) {\n                expr = parseCallMember(expr);\n            } else if (lookahead().type === Token.Quasi) {\n                expr = parseTaggedQuasi(expr);\n            } else {\n                break;\n            }\n        }\n\n        return expr;\n    }\n\n    function parseLeftHandSideExpression() {\n        var useNew, expr;\n\n        useNew = matchKeyword('new');\n        expr = useNew ? parseNewExpression() : parsePrimaryExpression();\n\n        while (index < length) {\n            if (match('.')) {\n                lex();\n                expr = parseNonComputedMember(expr);\n            } else if (match('[')) {\n                expr = parseComputedMember(expr);\n            } else if (lookahead().type === Token.Quasi) {\n                expr = parseTaggedQuasi(expr);\n            } else {\n                break;\n            }\n        }\n\n        return expr;\n    }\n\n    // 11.3 Postfix Expressions\n\n    function parsePostfixExpression() {\n        var expr = parseLeftHandSideExpressionAllowCall();\n\n        if ((match('++') || match('--')) && !peekLineTerminator()) {\n            // 11.3.1, 11.3.2\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwError({}, Messages.StrictLHSPostfix);\n            }\n\n            if (!isLeftHandSide(expr)) {\n                throwError({}, Messages.InvalidLHSInAssignment);\n            }\n\n            expr = {\n                type: Syntax.UpdateExpression,\n                operator: lex().value,\n                argument: expr,\n                prefix: false\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.4 Unary Operators\n\n    function parseUnaryExpression() {\n        var token, expr;\n\n        if (match('++') || match('--')) {\n            token = lex();\n            expr = parseUnaryExpression();\n            // 11.4.4, 11.4.5\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwError({}, Messages.StrictLHSPrefix);\n            }\n\n            if (!isLeftHandSide(expr)) {\n                throwError({}, Messages.InvalidLHSInAssignment);\n            }\n\n            expr = {\n                type: Syntax.UpdateExpression,\n                operator: token.value,\n                argument: expr,\n                prefix: true\n            };\n            return expr;\n        }\n\n        if (match('+') || match('-') || match('~') || match('!')) {\n            expr = {\n                type: Syntax.UnaryExpression,\n                operator: lex().value,\n                argument: parseUnaryExpression()\n            };\n            return expr;\n        }\n\n        if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {\n            expr = {\n                type: Syntax.UnaryExpression,\n                operator: lex().value,\n                argument: parseUnaryExpression()\n            };\n            if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {\n                throwErrorTolerant({}, Messages.StrictDelete);\n            }\n            return expr;\n        }\n\n        return parsePostfixExpression();\n    }\n\n    // 11.5 Multiplicative Operators\n\n    function parseMultiplicativeExpression() {\n        var expr = parseUnaryExpression();\n\n        while (match('*') || match('/') || match('%')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseUnaryExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.6 Additive Operators\n\n    function parseAdditiveExpression() {\n        var expr = parseMultiplicativeExpression();\n\n        while (match('+') || match('-')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseMultiplicativeExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.7 Bitwise Shift Operators\n\n    function parseShiftExpression() {\n        var expr = parseAdditiveExpression();\n\n        while (match('<<') || match('>>') || match('>>>')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseAdditiveExpression()\n            };\n        }\n\n        return expr;\n    }\n    // 11.8 Relational Operators\n\n    function parseRelationalExpression() {\n        var expr, previousAllowIn;\n\n        previousAllowIn = state.allowIn;\n        state.allowIn = true;\n\n        expr = parseShiftExpression();\n\n        while (match('<') || match('>') || match('<=') || match('>=') || (previousAllowIn && matchKeyword('in')) || matchKeyword('instanceof')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseShiftExpression()\n            };\n        }\n\n        state.allowIn = previousAllowIn;\n        return expr;\n    }\n\n    // 11.9 Equality Operators\n\n    function parseEqualityExpression() {\n        var expr = parseRelationalExpression();\n\n        while ((!peekLineTerminator() && (matchContextualKeyword('is') || matchContextualKeyword('isnt'))) || match('==') || match('!=') || match('===') || match('!==')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseRelationalExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.10 Binary Bitwise Operators\n\n    function parseBitwiseANDExpression() {\n        var expr = parseEqualityExpression();\n\n        while (match('&')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: '&',\n                left: expr,\n                right: parseEqualityExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    function parseBitwiseXORExpression() {\n        var expr = parseBitwiseANDExpression();\n\n        while (match('^')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: '^',\n                left: expr,\n                right: parseBitwiseANDExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    function parseBitwiseORExpression() {\n        var expr = parseBitwiseXORExpression();\n\n        while (match('|')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: '|',\n                left: expr,\n                right: parseBitwiseXORExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.11 Binary Logical Operators\n\n    function parseLogicalANDExpression() {\n        var expr = parseBitwiseORExpression();\n\n        while (match('&&')) {\n            lex();\n            expr = {\n                type: Syntax.LogicalExpression,\n                operator: '&&',\n                left: expr,\n                right: parseBitwiseORExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    function parseLogicalORExpression() {\n        var expr = parseLogicalANDExpression();\n\n        while (match('||')) {\n            lex();\n            expr = {\n                type: Syntax.LogicalExpression,\n                operator: '||',\n                left: expr,\n                right: parseLogicalANDExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.12 Conditional Operator\n\n    function parseConditionalExpression() {\n        var expr, previousAllowIn, consequent;\n\n        expr = parseLogicalORExpression();\n\n        if (match('?')) {\n            lex();\n            previousAllowIn = state.allowIn;\n            state.allowIn = true;\n            consequent = parseAssignmentExpression();\n            state.allowIn = previousAllowIn;\n            expect(':');\n\n            expr = {\n                type: Syntax.ConditionalExpression,\n                test: expr,\n                consequent: consequent,\n                alternate: parseAssignmentExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.13 Assignment Operators\n\n    function reinterpretAsAssignmentBindingPattern(expr) {\n        var i, len, property, element;\n\n        if (expr.type === Syntax.ObjectExpression) {\n            expr.type = Syntax.ObjectPattern;\n            for (i = 0, len = expr.properties.length; i < len; i += 1) {\n                property = expr.properties[i];\n                if (property.kind !== 'init') {\n                    throwError({}, Messages.InvalidLHSInAssignment);\n                }\n                reinterpretAsAssignmentBindingPattern(property.value);\n            }\n        } else if (expr.type === Syntax.ArrayExpression) {\n            expr.type = Syntax.ArrayPattern;\n            for (i = 0, len = expr.elements.length; i < len; i += 1) {\n                element = expr.elements[i];\n                if (element) {\n                    reinterpretAsAssignmentBindingPattern(element);\n                }\n            }\n        } else if (expr.type === Syntax.Identifier) {\n            if (isRestrictedWord(expr.name)) {\n                throwError({}, Messages.InvalidLHSInAssignment);\n            }\n        } else {\n            if (expr.type !== Syntax.MemberExpression && expr.type !== Syntax.CallExpression && expr.type !== Syntax.NewExpression) {\n                throwError({}, Messages.InvalidLHSInAssignment);\n            }\n        }\n    }\n\n    function reinterpretAsCoverFormalsList(expr) {\n        var i, len, param, paramSet;\n        assert(expr.type === Syntax.SequenceExpression);\n\n        paramSet = {};\n\n        for (i = 0, len = expr.expressions.length; i < len; i += 1) {\n            param = expr.expressions[i];\n            if (param.type !== Syntax.Identifier) {\n                return null;\n            }\n            if (isRestrictedWord(param.name)) {\n                throwError({}, Messages.StrictParamName);\n            }\n            if (Object.prototype.hasOwnProperty.call(paramSet, param.name)) {\n                throwError({}, Messages.StrictParamDupe);\n            }\n            paramSet[param.name] = true;\n        }\n        return expr.expressions;\n    }\n\n    function parseArrowFunctionExpression(param) {\n        var previousStrict, previousYieldAllowed, body;\n\n        expect('=>');\n\n        previousStrict = strict;\n        previousYieldAllowed = yieldAllowed;\n        strict = true;\n        yieldAllowed = false;\n        body = parseConciseBody();\n        strict = previousStrict;\n        yieldAllowed = previousYieldAllowed;\n\n        return {\n            type: Syntax.ArrowFunctionExpression,\n            id: null,\n            params: param,\n            defaults: [],\n            body: body,\n            rest: null,\n            generator: false,\n            expression: body.type !== Syntax.BlockStatement\n        };\n    }\n\n    function parseAssignmentExpression() {\n        var expr, token, oldParenthesizedCount, coverFormalsList;\n\n        if (matchKeyword('yield')) {\n            return parseYieldExpression();\n        }\n\n        oldParenthesizedCount = state.parenthesizedCount;\n\n        if (match('(')) {\n            token = lookahead2();\n            if (token.type === Token.Punctuator && token.value === ')') {\n                lex();\n                lex();\n                if (!match('=>')) {\n                    throwUnexpected(lex());\n                }\n                return parseArrowFunctionExpression([]);\n            }\n        }\n\n        expr = parseConditionalExpression();\n\n        if (match('=>')) {\n            if (expr.type === Syntax.Identifier) {\n                if (state.parenthesizedCount === oldParenthesizedCount || state.parenthesizedCount === (oldParenthesizedCount + 1)) {\n                    if (isRestrictedWord(expr.name)) {\n                        throwError({}, Messages.StrictParamName);\n                    }\n                    return parseArrowFunctionExpression([ expr ]);\n                }\n            } else if (expr.type === Syntax.SequenceExpression) {\n                if (state.parenthesizedCount === (oldParenthesizedCount + 1)) {\n                    coverFormalsList = reinterpretAsCoverFormalsList(expr);\n                    if (coverFormalsList) {\n                        return parseArrowFunctionExpression(coverFormalsList);\n                    }\n                }\n            }\n        }\n\n        if (matchAssign()) {\n            // 11.13.1\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwError({}, Messages.StrictLHSAssignment);\n            }\n\n            // ES.next draf 11.13 Runtime Semantics step 1\n            if (match('=') && (expr.type === Syntax.ObjectExpression || expr.type === Syntax.ArrayExpression)) {\n                reinterpretAsAssignmentBindingPattern(expr);\n            } else if (!isLeftHandSide(expr)) {\n                throwError({}, Messages.InvalidLHSInAssignment);\n            }\n\n            expr = {\n                type: Syntax.AssignmentExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseAssignmentExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.14 Comma Operator\n\n    function parseExpression() {\n        var expr = parseAssignmentExpression();\n\n        if (match(',')) {\n            expr = {\n                type: Syntax.SequenceExpression,\n                expressions: [ expr ]\n            };\n\n            while (index < length) {\n                if (!match(',')) {\n                    break;\n                }\n                lex();\n                expr.expressions.push(parseAssignmentExpression());\n            }\n\n        }\n        return expr;\n    }\n\n    // 12.1 Block\n\n    function parseStatementList() {\n        var list = [],\n            statement;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            statement = parseSourceElement();\n            if (typeof statement === 'undefined') {\n                break;\n            }\n            list.push(statement);\n        }\n\n        return list;\n    }\n\n    function parseBlock() {\n        var block;\n\n        expect('{');\n\n        block = parseStatementList();\n\n        expect('}');\n\n        return {\n            type: Syntax.BlockStatement,\n            body: block\n        };\n    }\n\n    // 12.2 Variable Statement\n\n    function parseVariableIdentifier() {\n        var token = lex();\n\n        if (token.type !== Token.Identifier) {\n            throwUnexpected(token);\n        }\n\n        return {\n            type: Syntax.Identifier,\n            name: token.value\n        };\n    }\n\n    function parseVariableDeclaration(kind) {\n        var id,\n            init = null;\n        if (lookahead().value === '{') {\n            id = parseObjectInitialiser();\n            reinterpretAsAssignmentBindingPattern(id);\n        } else {\n            id = parseVariableIdentifier();\n            // 12.2.1\n            if (strict && isRestrictedWord(id.name)) {\n                throwErrorTolerant({}, Messages.StrictVarName);\n            }\n        }\n\n        if (kind === 'const') {\n            expect('=');\n            init = parseAssignmentExpression();\n        } else if (match('=')) {\n            lex();\n            init = parseAssignmentExpression();\n        }\n\n        return {\n            type: Syntax.VariableDeclarator,\n            id: id,\n            init: init\n        };\n    }\n\n    function parseVariableDeclarationList(kind) {\n        var list = [];\n\n        while (index < length) {\n            list.push(parseVariableDeclaration(kind));\n            if (!match(',')) {\n                break;\n            }\n            lex();\n        }\n\n        return list;\n    }\n\n    function parseVariableStatement() {\n        var declarations;\n\n        expectKeyword('var');\n\n        declarations = parseVariableDeclarationList();\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.VariableDeclaration,\n            declarations: declarations,\n            kind: 'var'\n        };\n    }\n\n    // kind may be `const` or `let`\n    // Both are experimental and not in the specification yet.\n    // see http://wiki.ecmascript.org/doku.php?id=harmony:const\n    // and http://wiki.ecmascript.org/doku.php?id=harmony:let\n    function parseConstLetDeclaration(kind) {\n        var declarations;\n\n        expectKeyword(kind);\n\n        declarations = parseVariableDeclarationList(kind);\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.VariableDeclaration,\n            declarations: declarations,\n            kind: kind\n        };\n    }\n\n    // http://wiki.ecmascript.org/doku.php?id=harmony:modules\n\n    function parsePath() {\n        var result, id;\n\n        result = {\n            type: Syntax.Path,\n            body: []\n        };\n\n        while (true) {\n            id = parseVariableIdentifier();\n            result.body.push(id);\n            if (!match('.')) {\n                break;\n            }\n            lex();\n        }\n\n        return result;\n    }\n\n    function parseGlob() {\n        expect('*');\n        return {\n            type: Syntax.Glob\n        };\n    }\n\n    function parseModuleDeclaration() {\n        var id, token, declaration;\n\n        lex();\n\n        id = parseVariableIdentifier();\n\n        if (match('{')) {\n            return {\n                type: Syntax.ModuleDeclaration,\n                id: id,\n                body: parseModuleBlock()\n            };\n        }\n\n        expect('=');\n\n        token = lookahead();\n        if (token.type === Token.StringLiteral) {\n            declaration = {\n                type: Syntax.ModuleDeclaration,\n                id: id,\n                from: parsePrimaryExpression()\n            };\n        } else {\n            declaration = {\n                type: Syntax.ModuleDeclaration,\n                id: id,\n                from: parsePath()\n            };\n        }\n\n        consumeSemicolon();\n\n        return declaration;\n    }\n\n    function parseExportSpecifierSetProperty() {\n        var specifier;\n\n        specifier = {\n            type: Syntax.ExportSpecifier,\n            id: parseVariableIdentifier(),\n            from: null\n        };\n\n        if (match(':')) {\n            lex();\n            specifier.from = parsePath();\n        }\n\n        return specifier;\n    }\n\n    function parseExportSpecifier() {\n        var specifier, specifiers;\n\n        if (match('{')) {\n            lex();\n            specifiers = [];\n\n            do {\n                specifiers.push(parseExportSpecifierSetProperty());\n            } while (match(',') && lex());\n\n            expect('}');\n\n            return {\n                type: Syntax.ExportSpecifierSet,\n                specifiers: specifiers\n            };\n        }\n\n        if (match('*')) {\n            specifier = {\n                type: Syntax.ExportSpecifier,\n                id: parseGlob(),\n                from: null\n            };\n\n            if (matchContextualKeyword('from')) {\n                lex();\n                specifier.from = parsePath();\n            }\n        } else {\n            specifier = {\n                type: Syntax.ExportSpecifier,\n                id: parseVariableIdentifier(),\n                from: null\n            };\n        }\n        return specifier;\n    }\n\n    function parseExportDeclaration() {\n        var token, specifiers;\n\n        expectKeyword('export');\n\n        token = lookahead();\n\n        if (token.type === Token.Keyword || (token.type === Token.Identifier && token.value === 'module')) {\n            switch (token.value) {\n            case 'function':\n                return {\n                    type: Syntax.ExportDeclaration,\n                    declaration: parseFunctionDeclaration()\n                };\n            case 'module':\n                return {\n                    type: Syntax.ExportDeclaration,\n                    declaration: parseModuleDeclaration()\n                };\n            case 'let':\n            case 'const':\n                return {\n                    type: Syntax.ExportDeclaration,\n                    declaration: parseConstLetDeclaration(token.value)\n                };\n            case 'var':\n                return {\n                    type: Syntax.ExportDeclaration,\n                    declaration: parseStatement()\n                };\n            }\n            throwUnexpected(lex());\n        }\n\n        specifiers = [ parseExportSpecifier() ];\n        if (match(',')) {\n            while (index < length) {\n                if (!match(',')) {\n                    break;\n                }\n                lex();\n                specifiers.push(parseExportSpecifier());\n            }\n        }\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ExportDeclaration,\n            specifiers: specifiers\n        };\n    }\n\n    function parseImportDeclaration() {\n        var specifiers, from;\n\n        expectKeyword('import');\n\n        if (match('*')) {\n            specifiers = [parseGlob()];\n        } else if (match('{')) {\n            lex();\n            specifiers = [];\n\n            do {\n                specifiers.push(parseImportSpecifier());\n            } while (match(',') && lex());\n\n            expect('}');\n        } else {\n            specifiers = [parseVariableIdentifier()];\n        }\n\n        if (!matchContextualKeyword('from')) {\n            throwError({}, Messages.NoFromAfterImport);\n        }\n\n        lex();\n\n        if (lookahead().type === Token.StringLiteral) {\n            from = parsePrimaryExpression();\n        } else {\n            from = parsePath();\n        }\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ImportDeclaration,\n            specifiers: specifiers,\n            from: from\n        };\n    }\n\n    function parseImportSpecifier() {\n        var specifier;\n\n        specifier = {\n            type: Syntax.ImportSpecifier,\n            id: parseVariableIdentifier(),\n            from: null\n        };\n\n        if (match(':')) {\n            lex();\n            specifier.from = parsePath();\n        }\n\n        return specifier;\n    }\n\n    // 12.3 Empty Statement\n\n    function parseEmptyStatement() {\n        expect(';');\n\n        return {\n            type: Syntax.EmptyStatement\n        };\n    }\n\n    // 12.4 Expression Statement\n\n    function parseExpressionStatement() {\n        var expr = parseExpression();\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ExpressionStatement,\n            expression: expr\n        };\n    }\n\n    // 12.5 If statement\n\n    function parseIfStatement() {\n        var test, consequent, alternate;\n\n        expectKeyword('if');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        consequent = parseStatement();\n\n        if (matchKeyword('else')) {\n            lex();\n            alternate = parseStatement();\n        } else {\n            alternate = null;\n        }\n\n        return {\n            type: Syntax.IfStatement,\n            test: test,\n            consequent: consequent,\n            alternate: alternate\n        };\n    }\n\n    // 12.6 Iteration Statements\n\n    function parseDoWhileStatement() {\n        var body, test, oldInIteration;\n\n        expectKeyword('do');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        expectKeyword('while');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        if (match(';')) {\n            lex();\n        }\n\n        return {\n            type: Syntax.DoWhileStatement,\n            body: body,\n            test: test\n        };\n    }\n\n    function parseWhileStatement() {\n        var test, body, oldInIteration;\n\n        expectKeyword('while');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        return {\n            type: Syntax.WhileStatement,\n            test: test,\n            body: body\n        };\n    }\n\n    function parseForVariableDeclaration() {\n        var token = lex();\n\n        return {\n            type: Syntax.VariableDeclaration,\n            declarations: parseVariableDeclarationList(),\n            kind: token.value\n        };\n    }\n\n    function parseForStatement() {\n        var init, test, update, left, right, body, operator, oldInIteration;\n\n        init = test = update = null;\n\n        expectKeyword('for');\n\n        expect('(');\n\n        if (match(';')) {\n            lex();\n        } else {\n            if (matchKeyword('var') || matchKeyword('let') || matchKeyword('const')) {\n                state.allowIn = false;\n                init = parseForVariableDeclaration();\n                state.allowIn = true;\n\n                if (init.declarations.length === 1) {\n                    if (matchKeyword('in') || matchContextualKeyword('of')) {\n                        operator = lookahead();\n                        if (!((operator.value === 'in' || init.kind !== 'var') && init.declarations[0].init)) {\n                            lex();\n                            left = init;\n                            right = parseExpression();\n                            init = null;\n                        }\n                    }\n                }\n            } else {\n                state.allowIn = false;\n                init = parseExpression();\n                state.allowIn = true;\n\n                if (matchContextualKeyword('of')) {\n                    operator = lex();\n                    left = init;\n                    right = parseExpression();\n                    init = null;\n                } else if (matchKeyword('in')) {\n                    // LeftHandSideExpression\n                    if (!isAssignableLeftHandSide(init)) {\n                        throwError({}, Messages.InvalidLHSInForIn);\n                    }\n                    operator = lex();\n                    left = init;\n                    right = parseExpression();\n                    init = null;\n                }\n            }\n\n            if (typeof left === 'undefined') {\n                expect(';');\n            }\n        }\n\n        if (typeof left === 'undefined') {\n\n            if (!match(';')) {\n                test = parseExpression();\n            }\n            expect(';');\n\n            if (!match(')')) {\n                update = parseExpression();\n            }\n        }\n\n        expect(')');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        if (typeof left === 'undefined') {\n            return {\n                type: Syntax.ForStatement,\n                init: init,\n                test: test,\n                update: update,\n                body: body\n            };\n        }\n\n        if (operator.value === 'in') {\n            return {\n                type: Syntax.ForInStatement,\n                left: left,\n                right: right,\n                body: body,\n                each: false\n            };\n        } else {\n            return {\n                type: Syntax.ForOfStatement,\n                left: left,\n                right: right,\n                body: body\n            };\n        }\n    }\n\n    // 12.7 The continue statement\n\n    function parseContinueStatement() {\n        var token, label = null;\n\n        expectKeyword('continue');\n\n        // Optimize the most common form: 'continue;'.\n        if (source[index] === ';') {\n            lex();\n\n            if (!state.inIteration) {\n                throwError({}, Messages.IllegalContinue);\n            }\n\n            return {\n                type: Syntax.ContinueStatement,\n                label: null\n            };\n        }\n\n        if (peekLineTerminator()) {\n            if (!state.inIteration) {\n                throwError({}, Messages.IllegalContinue);\n            }\n\n            return {\n                type: Syntax.ContinueStatement,\n                label: null\n            };\n        }\n\n        token = lookahead();\n        if (token.type === Token.Identifier) {\n            label = parseVariableIdentifier();\n\n            if (!Object.prototype.hasOwnProperty.call(state.labelSet, label.name)) {\n                throwError({}, Messages.UnknownLabel, label.name);\n            }\n        }\n\n        consumeSemicolon();\n\n        if (label === null && !state.inIteration) {\n            throwError({}, Messages.IllegalContinue);\n        }\n\n        return {\n            type: Syntax.ContinueStatement,\n            label: label\n        };\n    }\n\n    // 12.8 The break statement\n\n    function parseBreakStatement() {\n        var token, label = null;\n\n        expectKeyword('break');\n\n        // Optimize the most common form: 'break;'.\n        if (source[index] === ';') {\n            lex();\n\n            if (!(state.inIteration || state.inSwitch)) {\n                throwError({}, Messages.IllegalBreak);\n            }\n\n            return {\n                type: Syntax.BreakStatement,\n                label: null\n            };\n        }\n\n        if (peekLineTerminator()) {\n            if (!(state.inIteration || state.inSwitch)) {\n                throwError({}, Messages.IllegalBreak);\n            }\n\n            return {\n                type: Syntax.BreakStatement,\n                label: null\n            };\n        }\n\n        token = lookahead();\n        if (token.type === Token.Identifier) {\n            label = parseVariableIdentifier();\n\n            if (!Object.prototype.hasOwnProperty.call(state.labelSet, label.name)) {\n                throwError({}, Messages.UnknownLabel, label.name);\n            }\n        }\n\n        consumeSemicolon();\n\n        if (label === null && !(state.inIteration || state.inSwitch)) {\n            throwError({}, Messages.IllegalBreak);\n        }\n\n        return {\n            type: Syntax.BreakStatement,\n            label: label\n        };\n    }\n\n    // 12.9 The return statement\n\n    function parseReturnStatement() {\n        var token, argument = null;\n\n        expectKeyword('return');\n\n        if (!state.inFunctionBody) {\n            throwErrorTolerant({}, Messages.IllegalReturn);\n        }\n\n        // 'return' followed by a space and an identifier is very common.\n        if (source[index] === ' ') {\n            if (isIdentifierStart(source[index + 1])) {\n                argument = parseExpression();\n                consumeSemicolon();\n                return {\n                    type: Syntax.ReturnStatement,\n                    argument: argument\n                };\n            }\n        }\n\n        if (peekLineTerminator()) {\n            return {\n                type: Syntax.ReturnStatement,\n                argument: null\n            };\n        }\n\n        if (!match(';')) {\n            token = lookahead();\n            if (!match('}') && token.type !== Token.EOF) {\n                argument = parseExpression();\n            }\n        }\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ReturnStatement,\n            argument: argument\n        };\n    }\n\n    // 12.10 The with statement\n\n    function parseWithStatement() {\n        var object, body;\n\n        if (strict) {\n            throwErrorTolerant({}, Messages.StrictModeWith);\n        }\n\n        expectKeyword('with');\n\n        expect('(');\n\n        object = parseExpression();\n\n        expect(')');\n\n        body = parseStatement();\n\n        return {\n            type: Syntax.WithStatement,\n            object: object,\n            body: body\n        };\n    }\n\n    // 12.10 The swith statement\n\n    function parseSwitchCase() {\n        var test,\n            consequent = [],\n            statement;\n\n        if (matchKeyword('default')) {\n            lex();\n            test = null;\n        } else {\n            expectKeyword('case');\n            test = parseExpression();\n        }\n        expect(':');\n\n        while (index < length) {\n            if (match('}') || matchKeyword('default') || matchKeyword('case')) {\n                break;\n            }\n            statement = parseSourceElement();\n            if (typeof statement === 'undefined') {\n                break;\n            }\n            consequent.push(statement);\n        }\n\n        return {\n            type: Syntax.SwitchCase,\n            test: test,\n            consequent: consequent\n        };\n    }\n\n    function parseSwitchStatement() {\n        var discriminant, cases, clause, oldInSwitch, defaultFound;\n\n        expectKeyword('switch');\n\n        expect('(');\n\n        discriminant = parseExpression();\n\n        expect(')');\n\n        expect('{');\n\n        if (match('}')) {\n            lex();\n            return {\n                type: Syntax.SwitchStatement,\n                discriminant: discriminant\n            };\n        }\n\n        cases = [];\n\n        oldInSwitch = state.inSwitch;\n        state.inSwitch = true;\n        defaultFound = false;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            clause = parseSwitchCase();\n            if (clause.test === null) {\n                if (defaultFound) {\n                    throwError({}, Messages.MultipleDefaultsInSwitch);\n                }\n                defaultFound = true;\n            }\n            cases.push(clause);\n        }\n\n        state.inSwitch = oldInSwitch;\n\n        expect('}');\n\n        return {\n            type: Syntax.SwitchStatement,\n            discriminant: discriminant,\n            cases: cases\n        };\n    }\n\n    // 12.13 The throw statement\n\n    function parseThrowStatement() {\n        var argument;\n\n        expectKeyword('throw');\n\n        if (peekLineTerminator()) {\n            throwError({}, Messages.NewlineAfterThrow);\n        }\n\n        argument = parseExpression();\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ThrowStatement,\n            argument: argument\n        };\n    }\n\n    // 12.14 The try statement\n\n    function parseCatchClause() {\n        var param;\n\n        expectKeyword('catch');\n\n        expect('(');\n        if (!match(')')) {\n            param = parseExpression();\n            // 12.14.1\n            if (strict && param.type === Syntax.Identifier && isRestrictedWord(param.name)) {\n                throwErrorTolerant({}, Messages.StrictCatchVariable);\n            }\n        }\n        expect(')');\n\n        return {\n            type: Syntax.CatchClause,\n            param: param,\n            guard: null,\n            body: parseBlock()\n        };\n    }\n\n    function parseTryStatement() {\n        var block, handlers = [], finalizer = null;\n\n        expectKeyword('try');\n\n        block = parseBlock();\n\n        if (matchKeyword('catch')) {\n            handlers.push(parseCatchClause());\n        }\n\n        if (matchKeyword('finally')) {\n            lex();\n            finalizer = parseBlock();\n        }\n\n        if (handlers.length === 0 && !finalizer) {\n            throwError({}, Messages.NoCatchOrFinally);\n        }\n\n        return {\n            type: Syntax.TryStatement,\n            block: block,\n            handlers: handlers,\n            finalizer: finalizer\n        };\n    }\n\n    // 12.15 The debugger statement\n\n    function parseDebuggerStatement() {\n        expectKeyword('debugger');\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.DebuggerStatement\n        };\n    }\n\n    // 12 Statements\n\n    function parseStatement() {\n        var token = lookahead(),\n            expr,\n            labeledBody;\n\n        if (token.type === Token.EOF) {\n            throwUnexpected(token);\n        }\n\n        if (token.type === Token.Punctuator) {\n            switch (token.value) {\n            case ';':\n                return parseEmptyStatement();\n            case '{':\n                return parseBlock();\n            case '(':\n                return parseExpressionStatement();\n            default:\n                break;\n            }\n        }\n\n        if (token.type === Token.Keyword) {\n            switch (token.value) {\n            case 'break':\n                return parseBreakStatement();\n            case 'continue':\n                return parseContinueStatement();\n            case 'debugger':\n                return parseDebuggerStatement();\n            case 'do':\n                return parseDoWhileStatement();\n            case 'for':\n                return parseForStatement();\n            case 'function':\n                return parseFunctionDeclaration();\n            case 'class':\n                return parseClassDeclaration();\n            case 'if':\n                return parseIfStatement();\n            case 'return':\n                return parseReturnStatement();\n            case 'switch':\n                return parseSwitchStatement();\n            case 'throw':\n                return parseThrowStatement();\n            case 'try':\n                return parseTryStatement();\n            case 'var':\n                return parseVariableStatement();\n            case 'while':\n                return parseWhileStatement();\n            case 'with':\n                return parseWithStatement();\n            default:\n                break;\n            }\n        }\n\n        expr = parseExpression();\n\n        // 12.12 Labelled Statements\n        if ((expr.type === Syntax.Identifier) && match(':')) {\n            lex();\n\n            if (Object.prototype.hasOwnProperty.call(state.labelSet, expr.name)) {\n                throwError({}, Messages.Redeclaration, 'Label', expr.name);\n            }\n\n            state.labelSet[expr.name] = true;\n            labeledBody = parseStatement();\n            delete state.labelSet[expr.name];\n\n            return {\n                type: Syntax.LabeledStatement,\n                label: expr,\n                body: labeledBody\n            };\n        }\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ExpressionStatement,\n            expression: expr\n        };\n    }\n\n    // 13 Function Definition\n\n    function parseConciseBody() {\n        if (match('{')) {\n            return parseFunctionSourceElements();\n        } else {\n            return parseAssignmentExpression();\n        }\n    }\n\n    function parseFunctionSourceElements() {\n        var sourceElement, sourceElements = [], token, directive, firstRestricted,\n            oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody, oldParenthesizedCount;\n\n        expect('{');\n\n        while (index < length) {\n            token = lookahead();\n            if (token.type !== Token.StringLiteral) {\n                break;\n            }\n\n            sourceElement = parseSourceElement();\n            sourceElements.push(sourceElement);\n            if (sourceElement.expression.type !== Syntax.Literal) {\n                // this is not directive\n                break;\n            }\n            directive = sliceSource(token.range[0] + 1, token.range[1] - 1);\n            if (directive === 'use strict') {\n                strict = true;\n                if (firstRestricted) {\n                    throwError(firstRestricted, Messages.StrictOctalLiteral);\n                }\n            } else {\n                if (!firstRestricted && token.octal) {\n                    firstRestricted = token;\n                }\n            }\n        }\n\n        oldLabelSet = state.labelSet;\n        oldInIteration = state.inIteration;\n        oldInSwitch = state.inSwitch;\n        oldInFunctionBody = state.inFunctionBody;\n        oldParenthesizedCount = state.parenthesizedCount;\n\n        state.labelSet = {};\n        state.inIteration = false;\n        state.inSwitch = false;\n        state.inFunctionBody = true;\n        state.parenthesizedCount = 0;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            sourceElement = parseSourceElement();\n            if (typeof sourceElement === 'undefined') {\n                break;\n            }\n            sourceElements.push(sourceElement);\n        }\n\n        expect('}');\n\n        state.labelSet = oldLabelSet;\n        state.inIteration = oldInIteration;\n        state.inSwitch = oldInSwitch;\n        state.inFunctionBody = oldInFunctionBody;\n        state.parenthesizedCount = oldParenthesizedCount;\n\n        return {\n            type: Syntax.BlockStatement,\n            body: sourceElements\n        };\n    }\n\n    function parseFunctionDeclaration() {\n        var id, param, params = [], body, token, firstRestricted, message, previousStrict, previousYieldAllowed, paramSet, generator;\n\n        expectKeyword('function');\n\n        generator = false;\n        if (match('*')) {\n            lex();\n            generator = true;\n        }\n\n        token = lookahead();\n\n        id = parseVariableIdentifier();\n        if (strict) {\n            if (isRestrictedWord(token.value)) {\n                throwError(token, Messages.StrictFunctionName);\n            }\n        } else {\n            if (isRestrictedWord(token.value)) {\n                firstRestricted = token;\n                message = Messages.StrictFunctionName;\n            } else if (isStrictModeReservedWord(token.value)) {\n                firstRestricted = token;\n                message = Messages.StrictReservedWord;\n            }\n        }\n\n        expect('(');\n\n        if (!match(')')) {\n            paramSet = {};\n            while (index < length) {\n                token = lookahead();\n                param = parseVariableIdentifier();\n                if (strict) {\n                    if (isRestrictedWord(token.value)) {\n                        throwError(token, Messages.StrictParamName);\n                    }\n                    if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        throwError(token, Messages.StrictParamDupe);\n                    }\n                } else if (!firstRestricted) {\n                    if (isRestrictedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamName;\n                    } else if (isStrictModeReservedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictReservedWord;\n                    } else if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                }\n                params.push(param);\n                paramSet[param.name] = true;\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        previousStrict = strict;\n        previousYieldAllowed = yieldAllowed;\n        yieldAllowed = generator;\n        body = parseFunctionSourceElements();\n        if (strict && firstRestricted) {\n            throwError(firstRestricted, message);\n        }\n        if (yieldAllowed && !yieldFound) {\n            throwError({}, Messages.NoYieldInGenerator);\n        }\n        strict = previousStrict;\n        yieldAllowed = previousYieldAllowed;\n\n        return {\n            type: Syntax.FunctionDeclaration,\n            id: id,\n            params: params,\n            defaults: [],\n            body: body,\n            rest: null,\n            generator: generator,\n            expression: false\n        };\n    }\n\n    function parseFunctionExpression() {\n        var token, id = null, firstRestricted, message, param, params = [], body, previousStrict, previousYieldAllowed, paramSet, generator;\n\n        expectKeyword('function');\n\n        generator = false;\n\n        if (match('*')) {\n            lex();\n            generator = true;\n        }\n\n        if (!match('(')) {\n            token = lookahead();\n            id = parseVariableIdentifier();\n            if (strict) {\n                if (isRestrictedWord(token.value)) {\n                    throwError(token, Messages.StrictFunctionName);\n                }\n            } else {\n                if (isRestrictedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictFunctionName;\n                } else if (isStrictModeReservedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictReservedWord;\n                }\n            }\n        }\n\n        expect('(');\n\n        if (!match(')')) {\n            paramSet = {};\n            while (index < length) {\n                token = lookahead();\n                param = parseVariableIdentifier();\n                if (strict) {\n                    if (isRestrictedWord(token.value)) {\n                        throwError(token, Messages.StrictParamName);\n                    }\n                    if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        throwError(token, Messages.StrictParamDupe);\n                    }\n                } else if (!firstRestricted) {\n                    if (isRestrictedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamName;\n                    } else if (isStrictModeReservedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictReservedWord;\n                    } else if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                }\n                params.push(param);\n                paramSet[param.name] = true;\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        previousStrict = strict;\n        previousYieldAllowed = yieldAllowed;\n        yieldAllowed = generator;\n        body = parseFunctionSourceElements();\n        if (strict && firstRestricted) {\n            throwError(firstRestricted, message);\n        }\n        if (yieldAllowed && !yieldFound) {\n            throwError({}, Messages.NoYieldInGenerator);\n        }\n        strict = previousStrict;\n        yieldAllowed = previousYieldAllowed;\n\n\n        return {\n            type: Syntax.FunctionExpression,\n            id: id,\n            params: params,\n            defaults: [],\n            body: body,\n            rest: null,\n            generator: generator,\n            expression: false\n        };\n    }\n\n    function parseYieldExpression() {\n        var delegate, expr, previousYieldAllowed;\n\n        expectKeyword('yield');\n\n        if (!yieldAllowed) {\n            throwErrorTolerant({}, Messages.IllegalYield);\n        }\n\n        delegate = false;\n        if (match('*')) {\n            lex();\n            delegate = true;\n        }\n\n        // It is a Syntax Error if any AssignmentExpression Contains YieldExpression.\n        previousYieldAllowed = yieldAllowed;\n        yieldAllowed = false;\n        expr = parseAssignmentExpression();\n        yieldAllowed = previousYieldAllowed;\n        yieldFound = true;\n\n        return {\n            type: Syntax.YieldExpression,\n            argument: expr,\n            delegate: delegate\n        };\n    }\n\n    // 14 Classes\n\n    function parseMethodDefinition() {\n        var token, key, param;\n\n        if (match('*')) {\n            lex();\n            return {\n                type: Syntax.MethodDefinition,\n                key: parseObjectPropertyKey(),\n                value: parsePropertyMethodFunction({ generator: true }),\n                kind: ''\n            };\n        }\n\n        token = lookahead();\n        key = parseObjectPropertyKey();\n\n        if (token.value === 'get' && !match('(')) {\n            key = parseObjectPropertyKey();\n            expect('(');\n            expect(')');\n            return {\n                type: Syntax.MethodDefinition,\n                key: key,\n                value: parsePropertyFunction([], { generator: false }),\n                kind: 'get'\n            };\n        } else if (token.value === 'set' && !match('(')) {\n            key = parseObjectPropertyKey();\n            expect('(');\n            token = lookahead();\n            param = [ parseVariableIdentifier() ];\n            expect(')');\n            return {\n                type: Syntax.MethodDefinition,\n                key: key,\n                value: parsePropertyFunction(param, { generator: false, name: token }),\n                kind: 'set'\n            };\n        } else {\n            return {\n                type: Syntax.MethodDefinition,\n                key: key,\n                value: parsePropertyMethodFunction({ generator: false }),\n                kind: ''\n            };\n        }\n    }\n\n    function parseClassElement() {\n        if (match(';')) {\n            lex();\n            return;\n        } else {\n            return parseMethodDefinition();\n        }\n    }\n\n    function parseClassBody() {\n        var classElement, classElements = [];\n\n        expect('{');\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            classElement = parseClassElement();\n            if (typeof classElement !== 'undefined') {\n                classElements.push(classElement);\n            }\n        }\n\n        expect('}');\n\n        return {\n            type: Syntax.ClassBody,\n            body: classElements\n        };\n    }\n\n    function parseClassExpression() {\n        var id, body, previousYieldAllowed, superClass;\n\n        expectKeyword('class');\n\n        if (!matchKeyword('extends') && !match('{')) {\n            id = parseVariableIdentifier();\n        }\n\n        if (matchKeyword('extends')) {\n            expectKeyword('extends');\n            previousYieldAllowed = yieldAllowed;\n            yieldAllowed = false;\n            superClass = parseAssignmentExpression();\n            yieldAllowed = previousYieldAllowed;\n        }\n\n        body = parseClassBody();\n        return {\n            id: id,\n            type: Syntax.ClassExpression,\n            body: body,\n            superClass: superClass\n        };\n    }\n\n    function parseClassDeclaration() {\n        var token, id, body, previousYieldAllowed, superClass;\n\n        expectKeyword('class');\n\n        token = lookahead();\n        id = parseVariableIdentifier();\n\n        if (matchKeyword('extends')) {\n            expectKeyword('extends');\n            previousYieldAllowed = yieldAllowed;\n            yieldAllowed = false;\n            superClass = parseAssignmentExpression();\n            yieldAllowed = previousYieldAllowed;\n        }\n\n        body = parseClassBody();\n        return {\n            id: id,\n            type: Syntax.ClassDeclaration,\n            body: body,\n            superClass: superClass\n        };\n    }\n\n    // 15 Program\n\n    function parseSourceElement() {\n        var token = lookahead();\n\n        if (token.type === Token.Keyword) {\n            switch (token.value) {\n            case 'const':\n            case 'let':\n                return parseConstLetDeclaration(token.value);\n            case 'function':\n                return parseFunctionDeclaration();\n            default:\n                return parseStatement();\n            }\n        }\n\n        if (token.type !== Token.EOF) {\n            return parseStatement();\n        }\n    }\n\n    function parseProgramElement() {\n        var token = lookahead(), lineNumber;\n\n        if (token.type === Token.Keyword) {\n            switch (token.value) {\n            case 'export':\n                return parseExportDeclaration();\n            case 'import':\n                return parseImportDeclaration();\n            }\n        }\n\n        if (token.value === 'module' && token.type === Token.Identifier) {\n            lineNumber = token.lineNumber;\n            token = lookahead2();\n            if (token.type === Token.Identifier && token.lineNumber === lineNumber) {\n                return parseModuleDeclaration();\n            }\n        }\n\n        return parseSourceElement();\n    }\n\n    function parseProgramElements() {\n        var sourceElement, sourceElements = [], token, directive, firstRestricted;\n\n        while (index < length) {\n            token = lookahead();\n            if (token.type !== Token.StringLiteral) {\n                break;\n            }\n\n            sourceElement = parseProgramElement();\n            sourceElements.push(sourceElement);\n            if (sourceElement.expression.type !== Syntax.Literal) {\n                // this is not directive\n                break;\n            }\n            directive = sliceSource(token.range[0] + 1, token.range[1] - 1);\n            if (directive === 'use strict') {\n                strict = true;\n                if (firstRestricted) {\n                    throwError(firstRestricted, Messages.StrictOctalLiteral);\n                }\n            } else {\n                if (!firstRestricted && token.octal) {\n                    firstRestricted = token;\n                }\n            }\n        }\n\n        while (index < length) {\n            sourceElement = parseProgramElement();\n            if (typeof sourceElement === 'undefined') {\n                break;\n            }\n            sourceElements.push(sourceElement);\n        }\n        return sourceElements;\n    }\n\n    function parseModuleElement() {\n        return parseProgramElement();\n    }\n\n    function parseModuleElements() {\n        var list = [],\n            statement;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            statement = parseModuleElement();\n            if (typeof statement === 'undefined') {\n                break;\n            }\n            list.push(statement);\n        }\n\n        return list;\n    }\n\n    function parseModuleBlock() {\n        var block;\n\n        expect('{');\n\n        block = parseModuleElements();\n\n        expect('}');\n\n        return {\n            type: Syntax.BlockStatement,\n            body: block\n        };\n    }\n\n    function parseProgram() {\n        var program;\n        strict = false;\n        yieldAllowed = false;\n        yieldFound = false;\n        program = {\n            type: Syntax.Program,\n            body: parseProgramElements()\n        };\n        return program;\n    }\n\n    // The following functions are needed only when the option to preserve\n    // the comments is active.\n\n    function addComment(type, value, start, end, loc) {\n        assert(typeof start === 'number', 'Comment must have valid position');\n\n        // Because the way the actual token is scanned, often the comments\n        // (if any) are skipped twice during the lexical analysis.\n        // Thus, we need to skip adding a comment if the comment array already\n        // handled it.\n        if (extra.comments.length > 0) {\n            if (extra.comments[extra.comments.length - 1].range[1] > start) {\n                return;\n            }\n        }\n\n        extra.comments.push({\n            type: type,\n            value: value,\n            range: [start, end],\n            loc: loc\n        });\n    }\n\n    function scanComment() {\n        var comment, ch, loc, start, blockComment, lineComment;\n\n        comment = '';\n        blockComment = false;\n        lineComment = false;\n\n        while (index < length) {\n            ch = source[index];\n\n            if (lineComment) {\n                ch = nextChar();\n                if (isLineTerminator(ch)) {\n                    loc.end = {\n                        line: lineNumber,\n                        column: index - lineStart - 1\n                    };\n                    lineComment = false;\n                    addComment('Line', comment, start, index - 1, loc);\n                    if (ch === '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                    ++lineNumber;\n                    lineStart = index;\n                    comment = '';\n                } else if (index >= length) {\n                    lineComment = false;\n                    comment += ch;\n                    loc.end = {\n                        line: lineNumber,\n                        column: length - lineStart\n                    };\n                    addComment('Line', comment, start, length, loc);\n                } else {\n                    comment += ch;\n                }\n            } else if (blockComment) {\n                if (isLineTerminator(ch)) {\n                    if (ch === '\\r' && source[index + 1] === '\\n') {\n                        ++index;\n                        comment += '\\r\\n';\n                    } else {\n                        comment += ch;\n                    }\n                    ++lineNumber;\n                    ++index;\n                    lineStart = index;\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    ch = nextChar();\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                    comment += ch;\n                    if (ch === '*') {\n                        ch = source[index];\n                        if (ch === '/') {\n                            comment = comment.substr(0, comment.length - 1);\n                            blockComment = false;\n                            ++index;\n                            loc.end = {\n                                line: lineNumber,\n                                column: index - lineStart\n                            };\n                            addComment('Block', comment, start, index, loc);\n                            comment = '';\n                        }\n                    }\n                }\n            } else if (ch === '/') {\n                ch = source[index + 1];\n                if (ch === '/') {\n                    loc = {\n                        start: {\n                            line: lineNumber,\n                            column: index - lineStart\n                        }\n                    };\n                    start = index;\n                    index += 2;\n                    lineComment = true;\n                    if (index >= length) {\n                        loc.end = {\n                            line: lineNumber,\n                            column: index - lineStart\n                        };\n                        lineComment = false;\n                        addComment('Line', comment, start, index, loc);\n                    }\n                } else if (ch === '*') {\n                    start = index;\n                    index += 2;\n                    blockComment = true;\n                    loc = {\n                        start: {\n                            line: lineNumber,\n                            column: index - lineStart - 2\n                        }\n                    };\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    break;\n                }\n            } else if (isWhiteSpace(ch)) {\n                ++index;\n            } else if (isLineTerminator(ch)) {\n                ++index;\n                if (ch ===  '\\r' && source[index] === '\\n') {\n                    ++index;\n                }\n                ++lineNumber;\n                lineStart = index;\n            } else {\n                break;\n            }\n        }\n    }\n\n    function filterCommentLocation() {\n        var i, entry, comment, comments = [];\n\n        for (i = 0; i < extra.comments.length; ++i) {\n            entry = extra.comments[i];\n            comment = {\n                type: entry.type,\n                value: entry.value\n            };\n            if (extra.range) {\n                comment.range = entry.range;\n            }\n            if (extra.loc) {\n                comment.loc = entry.loc;\n            }\n            comments.push(comment);\n        }\n\n        extra.comments = comments;\n    }\n\n    function collectToken() {\n        var start, loc, token, range, value;\n\n        skipComment();\n        start = index;\n        loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart\n            }\n        };\n\n        token = extra.advance();\n        loc.end = {\n            line: lineNumber,\n            column: index - lineStart\n        };\n\n        if (token.type !== Token.EOF) {\n            range = [token.range[0], token.range[1]];\n            value = sliceSource(token.range[0], token.range[1]);\n            extra.tokens.push({\n                type: TokenName[token.type],\n                value: value,\n                range: range,\n                loc: loc\n            });\n        }\n\n        return token;\n    }\n\n    function collectRegex() {\n        var pos, loc, regex, token;\n\n        skipComment();\n\n        pos = index;\n        loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart\n            }\n        };\n\n        regex = extra.scanRegExp();\n        loc.end = {\n            line: lineNumber,\n            column: index - lineStart\n        };\n\n        // Pop the previous token, which is likely '/' or '/='\n        if (extra.tokens.length > 0) {\n            token = extra.tokens[extra.tokens.length - 1];\n            if (token.range[0] === pos && token.type === 'Punctuator') {\n                if (token.value === '/' || token.value === '/=') {\n                    extra.tokens.pop();\n                }\n            }\n        }\n\n        extra.tokens.push({\n            type: 'RegularExpression',\n            value: regex.literal,\n            range: [pos, index],\n            loc: loc\n        });\n\n        return regex;\n    }\n\n    function filterTokenLocation() {\n        var i, entry, token, tokens = [];\n\n        for (i = 0; i < extra.tokens.length; ++i) {\n            entry = extra.tokens[i];\n            token = {\n                type: entry.type,\n                value: entry.value\n            };\n            if (extra.range) {\n                token.range = entry.range;\n            }\n            if (extra.loc) {\n                token.loc = entry.loc;\n            }\n            tokens.push(token);\n        }\n\n        extra.tokens = tokens;\n    }\n\n    function createLiteral(token) {\n        return {\n            type: Syntax.Literal,\n            value: token.value\n        };\n    }\n\n    function createRawLiteral(token) {\n        return {\n            type: Syntax.Literal,\n            value: token.value,\n            raw: sliceSource(token.range[0], token.range[1])\n        };\n    }\n\n    function wrapTrackingFunction(range, loc) {\n\n        return function (parseFunction) {\n\n            function isBinary(node) {\n                return node.type === Syntax.LogicalExpression ||\n                    node.type === Syntax.BinaryExpression;\n            }\n\n            function visit(node) {\n                if (isBinary(node.left)) {\n                    visit(node.left);\n                }\n                if (isBinary(node.right)) {\n                    visit(node.right);\n                }\n\n                if (range && typeof node.range === 'undefined') {\n                    node.range = [node.left.range[0], node.right.range[1]];\n                }\n                if (loc && typeof node.loc === 'undefined') {\n                    node.loc = {\n                        start: node.left.loc.start,\n                        end: node.right.loc.end\n                    };\n                }\n            }\n\n            return function () {\n                var node, rangeInfo, locInfo;\n\n                skipComment();\n                rangeInfo = [index, 0];\n                locInfo = {\n                    start: {\n                        line: lineNumber,\n                        column: index - lineStart\n                    }\n                };\n\n                node = parseFunction.apply(null, arguments);\n                if (typeof node !== 'undefined') {\n\n                    if (range) {\n                        rangeInfo[1] = index;\n                        node.range = rangeInfo;\n                    }\n\n                    if (loc) {\n                        locInfo.end = {\n                            line: lineNumber,\n                            column: index - lineStart\n                        };\n                        node.loc = locInfo;\n                    }\n\n                    if (isBinary(node)) {\n                        visit(node);\n                    }\n\n                    if (node.type === Syntax.MemberExpression) {\n                        if (typeof node.object.range !== 'undefined') {\n                            node.range[0] = node.object.range[0];\n                        }\n                        if (typeof node.object.loc !== 'undefined') {\n                            node.loc.start = node.object.loc.start;\n                        }\n                    }\n\n                    if (node.type === Syntax.CallExpression) {\n                        if (typeof node.callee.range !== 'undefined') {\n                            node.range[0] = node.callee.range[0];\n                        }\n                        if (typeof node.callee.loc !== 'undefined') {\n                            node.loc.start = node.callee.loc.start;\n                        }\n                    }\n                    return node;\n                }\n            };\n\n        };\n    }\n\n    function patch() {\n\n        var wrapTracking;\n\n        if (extra.comments) {\n            extra.skipComment = skipComment;\n            skipComment = scanComment;\n        }\n\n        if (extra.raw) {\n            extra.createLiteral = createLiteral;\n            createLiteral = createRawLiteral;\n        }\n\n        if (extra.range || extra.loc) {\n\n            wrapTracking = wrapTrackingFunction(extra.range, extra.loc);\n\n            extra.parseAdditiveExpression = parseAdditiveExpression;\n            extra.parseAssignmentExpression = parseAssignmentExpression;\n            extra.parseBitwiseANDExpression = parseBitwiseANDExpression;\n            extra.parseBitwiseORExpression = parseBitwiseORExpression;\n            extra.parseBitwiseXORExpression = parseBitwiseXORExpression;\n            extra.parseBlock = parseBlock;\n            extra.parseFunctionSourceElements = parseFunctionSourceElements;\n            extra.parseCallMember = parseCallMember;\n            extra.parseCatchClause = parseCatchClause;\n            extra.parseComputedMember = parseComputedMember;\n            extra.parseConditionalExpression = parseConditionalExpression;\n            extra.parseConstLetDeclaration = parseConstLetDeclaration;\n            extra.parseEqualityExpression = parseEqualityExpression;\n            extra.parseExportDeclaration = parseExportDeclaration;\n            extra.parseExportSpecifier = parseExportSpecifier;\n            extra.parseExportSpecifierSetProperty = parseExportSpecifierSetProperty;\n            extra.parseExpression = parseExpression;\n            extra.parseForVariableDeclaration = parseForVariableDeclaration;\n            extra.parseFunctionDeclaration = parseFunctionDeclaration;\n            extra.parseFunctionExpression = parseFunctionExpression;\n            extra.parseGlob = parseGlob;\n            extra.parseImportDeclaration = parseImportDeclaration;\n            extra.parseImportSpecifier = parseImportSpecifier;\n            extra.parseLogicalANDExpression = parseLogicalANDExpression;\n            extra.parseLogicalORExpression = parseLogicalORExpression;\n            extra.parseMultiplicativeExpression = parseMultiplicativeExpression;\n            extra.parseModuleDeclaration = parseModuleDeclaration;\n            extra.parseModuleBlock = parseModuleBlock;\n            extra.parseNewExpression = parseNewExpression;\n            extra.parseNonComputedMember = parseNonComputedMember;\n            extra.parseNonComputedProperty = parseNonComputedProperty;\n            extra.parseObjectProperty = parseObjectProperty;\n            extra.parseObjectPropertyKey = parseObjectPropertyKey;\n            extra.parsePath = parsePath;\n            extra.parsePostfixExpression = parsePostfixExpression;\n            extra.parsePrimaryExpression = parsePrimaryExpression;\n            extra.parseProgram = parseProgram;\n            extra.parsePropertyFunction = parsePropertyFunction;\n            extra.parseRelationalExpression = parseRelationalExpression;\n            extra.parseQuasiElement = parseQuasiElement;\n            extra.parseQuasiLiteral = parseQuasiLiteral;\n            extra.parseStatement = parseStatement;\n            extra.parseShiftExpression = parseShiftExpression;\n            extra.parseSwitchCase = parseSwitchCase;\n            extra.parseTaggedQuasi = parseTaggedQuasi;\n            extra.parseUnaryExpression = parseUnaryExpression;\n            extra.parseVariableDeclaration = parseVariableDeclaration;\n            extra.parseVariableIdentifier = parseVariableIdentifier;\n            extra.parseMethodDefinition = parseMethodDefinition;\n            extra.parseClassDeclaration = parseClassDeclaration;\n            extra.parseClassExpression = parseClassExpression;\n            extra.parseClassBody = parseClassBody;\n\n            parseAdditiveExpression = wrapTracking(extra.parseAdditiveExpression);\n            parseAssignmentExpression = wrapTracking(extra.parseAssignmentExpression);\n            parseBitwiseANDExpression = wrapTracking(extra.parseBitwiseANDExpression);\n            parseBitwiseORExpression = wrapTracking(extra.parseBitwiseORExpression);\n            parseBitwiseXORExpression = wrapTracking(extra.parseBitwiseXORExpression);\n            parseBlock = wrapTracking(extra.parseBlock);\n            parseFunctionSourceElements = wrapTracking(extra.parseFunctionSourceElements);\n            parseCallMember = wrapTracking(extra.parseCallMember);\n            parseCatchClause = wrapTracking(extra.parseCatchClause);\n            parseComputedMember = wrapTracking(extra.parseComputedMember);\n            parseConditionalExpression = wrapTracking(extra.parseConditionalExpression);\n            parseConstLetDeclaration = wrapTracking(extra.parseConstLetDeclaration);\n            parseExportDeclaration = wrapTracking(parseExportDeclaration);\n            parseExportSpecifier = wrapTracking(parseExportSpecifier);\n            parseExportSpecifierSetProperty = wrapTracking(parseExportSpecifierSetProperty);\n            parseEqualityExpression = wrapTracking(extra.parseEqualityExpression);\n            parseExpression = wrapTracking(extra.parseExpression);\n            parseForVariableDeclaration = wrapTracking(extra.parseForVariableDeclaration);\n            parseFunctionDeclaration = wrapTracking(extra.parseFunctionDeclaration);\n            parseFunctionExpression = wrapTracking(extra.parseFunctionExpression);\n            parseGlob = wrapTracking(extra.parseGlob);\n            parseImportDeclaration = wrapTracking(extra.parseImportDeclaration);\n            parseImportSpecifier = wrapTracking(extra.parseImportSpecifier);\n            parseLogicalANDExpression = wrapTracking(extra.parseLogicalANDExpression);\n            parseLogicalORExpression = wrapTracking(extra.parseLogicalORExpression);\n            parseMultiplicativeExpression = wrapTracking(extra.parseMultiplicativeExpression);\n            parseModuleDeclaration = wrapTracking(extra.parseModuleDeclaration);\n            parseModuleBlock = wrapTracking(extra.parseModuleBlock);\n            parseNewExpression = wrapTracking(extra.parseNewExpression);\n            parseNonComputedMember = wrapTracking(extra.parseNonComputedMember);\n            parseNonComputedProperty = wrapTracking(extra.parseNonComputedProperty);\n            parseObjectProperty = wrapTracking(extra.parseObjectProperty);\n            parseObjectPropertyKey = wrapTracking(extra.parseObjectPropertyKey);\n            parsePath = wrapTracking(extra.parsePath);\n            parsePostfixExpression = wrapTracking(extra.parsePostfixExpression);\n            parsePrimaryExpression = wrapTracking(extra.parsePrimaryExpression);\n            parseProgram = wrapTracking(extra.parseProgram);\n            parsePropertyFunction = wrapTracking(extra.parsePropertyFunction);\n            parseQuasiElement = wrapTracking(extra.parseQuasiElement);\n            parseQuasiLiteral = wrapTracking(extra.parseQuasiLiteral);\n            parseRelationalExpression = wrapTracking(extra.parseRelationalExpression);\n            parseStatement = wrapTracking(extra.parseStatement);\n            parseShiftExpression = wrapTracking(extra.parseShiftExpression);\n            parseSwitchCase = wrapTracking(extra.parseSwitchCase);\n            parseTaggedQuasi = wrapTracking(extra.parseTaggedQuasi);\n            parseUnaryExpression = wrapTracking(extra.parseUnaryExpression);\n            parseVariableDeclaration = wrapTracking(extra.parseVariableDeclaration);\n            parseVariableIdentifier = wrapTracking(extra.parseVariableIdentifier);\n            parseMethodDefinition = wrapTracking(extra.parseMethodDefinition);\n            parseClassDeclaration = wrapTracking(extra.parseClassDeclaration);\n            parseClassExpression = wrapTracking(extra.parseClassExpression);\n            parseClassBody = wrapTracking(extra.parseClassBody);\n        }\n\n        if (typeof extra.tokens !== 'undefined') {\n            extra.advance = advance;\n            extra.scanRegExp = scanRegExp;\n\n            advance = collectToken;\n            scanRegExp = collectRegex;\n        }\n    }\n\n    function unpatch() {\n        if (typeof extra.skipComment === 'function') {\n            skipComment = extra.skipComment;\n        }\n\n        if (extra.raw) {\n            createLiteral = extra.createLiteral;\n        }\n\n        if (extra.range || extra.loc) {\n            parseAdditiveExpression = extra.parseAdditiveExpression;\n            parseAssignmentExpression = extra.parseAssignmentExpression;\n            parseBitwiseANDExpression = extra.parseBitwiseANDExpression;\n            parseBitwiseORExpression = extra.parseBitwiseORExpression;\n            parseBitwiseXORExpression = extra.parseBitwiseXORExpression;\n            parseBlock = extra.parseBlock;\n            parseFunctionSourceElements = extra.parseFunctionSourceElements;\n            parseCallMember = extra.parseCallMember;\n            parseCatchClause = extra.parseCatchClause;\n            parseComputedMember = extra.parseComputedMember;\n            parseConditionalExpression = extra.parseConditionalExpression;\n            parseConstLetDeclaration = extra.parseConstLetDeclaration;\n            parseEqualityExpression = extra.parseEqualityExpression;\n            parseExportDeclaration = extra.parseExportDeclaration;\n            parseExportSpecifier = extra.parseExportSpecifier;\n            parseExportSpecifierSetProperty = extra.parseExportSpecifierSetProperty;\n            parseExpression = extra.parseExpression;\n            parseForVariableDeclaration = extra.parseForVariableDeclaration;\n            parseFunctionDeclaration = extra.parseFunctionDeclaration;\n            parseFunctionExpression = extra.parseFunctionExpression;\n            parseGlob = extra.parseGlob;\n            parseImportDeclaration = extra.parseImportDeclaration;\n            parseImportSpecifier = extra.parseImportSpecifier;\n            parseLogicalANDExpression = extra.parseLogicalANDExpression;\n            parseLogicalORExpression = extra.parseLogicalORExpression;\n            parseMultiplicativeExpression = extra.parseMultiplicativeExpression;\n            parseModuleDeclaration = extra.parseModuleDeclaration;\n            parseModuleBlock = extra.parseModuleBlock;\n            parseNewExpression = extra.parseNewExpression;\n            parseNonComputedMember = extra.parseNonComputedMember;\n            parseNonComputedProperty = extra.parseNonComputedProperty;\n            parseObjectProperty = extra.parseObjectProperty;\n            parseObjectPropertyKey = extra.parseObjectPropertyKey;\n            parsePath = extra.parsePath;\n            parsePostfixExpression = extra.parsePostfixExpression;\n            parsePrimaryExpression = extra.parsePrimaryExpression;\n            parseProgram = extra.parseProgram;\n            parsePropertyFunction = extra.parsePropertyFunction;\n            parseQuasiElement = extra.parseQuasiElement;\n            parseQuasiLiteral = extra.parseQuasiLiteral;\n            parseRelationalExpression = extra.parseRelationalExpression;\n            parseStatement = extra.parseStatement;\n            parseShiftExpression = extra.parseShiftExpression;\n            parseSwitchCase = extra.parseSwitchCase;\n            parseTaggedQuasi = extra.parseTaggedQuasi;\n            parseUnaryExpression = extra.parseUnaryExpression;\n            parseVariableDeclaration = extra.parseVariableDeclaration;\n            parseVariableIdentifier = extra.parseVariableIdentifier;\n            parseMethodDefinition = extra.parseMethodDefinition;\n            parseClassDeclaration = extra.parseClassDeclaration;\n            parseClassExpression = extra.parseClassExpression;\n            parseClassBody = extra.parseClassBody;\n        }\n\n        if (typeof extra.scanRegExp === 'function') {\n            advance = extra.advance;\n            scanRegExp = extra.scanRegExp;\n        }\n    }\n\n    function stringToArray(str) {\n        var length = str.length,\n            result = [],\n            i;\n        for (i = 0; i < length; ++i) {\n            result[i] = str.charAt(i);\n        }\n        return result;\n    }\n\n    function parse(code, options) {\n        var program, toString;\n\n        toString = String;\n        if (typeof code !== 'string' && !(code instanceof String)) {\n            code = toString(code);\n        }\n\n        source = code;\n        index = 0;\n        lineNumber = (source.length > 0) ? 1 : 0;\n        lineStart = 0;\n        length = source.length;\n        buffer = null;\n        state = {\n            allowIn: true,\n            labelSet: {},\n            parenthesizedCount: 0,\n            lastParenthesized: null,\n            inFunctionBody: false,\n            inIteration: false,\n            inSwitch: false\n        };\n\n        extra = {};\n        if (typeof options !== 'undefined') {\n            extra.range = (typeof options.range === 'boolean') && options.range;\n            extra.loc = (typeof options.loc === 'boolean') && options.loc;\n            extra.raw = (typeof options.raw === 'boolean') && options.raw;\n            if (typeof options.tokens === 'boolean' && options.tokens) {\n                extra.tokens = [];\n            }\n            if (typeof options.comment === 'boolean' && options.comment) {\n                extra.comments = [];\n            }\n            if (typeof options.tolerant === 'boolean' && options.tolerant) {\n                extra.errors = [];\n            }\n        }\n\n        if (length > 0) {\n            if (typeof source[0] === 'undefined') {\n                // Try first to convert to a string. This is good as fast path\n                // for old IE which understands string indexing for string\n                // literals only and not for string object.\n                if (code instanceof String) {\n                    source = code.valueOf();\n                }\n\n                // Force accessing the characters via an array.\n                if (typeof source[0] === 'undefined') {\n                    source = stringToArray(code);\n                }\n            }\n        }\n\n        patch();\n        try {\n            program = parseProgram();\n            if (typeof extra.comments !== 'undefined') {\n                filterCommentLocation();\n                program.comments = extra.comments;\n            }\n            if (typeof extra.tokens !== 'undefined') {\n                filterTokenLocation();\n                program.tokens = extra.tokens;\n            }\n            if (typeof extra.errors !== 'undefined') {\n                program.errors = extra.errors;\n            }\n        } catch (e) {\n            throw e;\n        } finally {\n            unpatch();\n            extra = {};\n        }\n\n        return program;\n    }\n\n    // Sync with package.json.\n    exports.version = '1.0.0-dev-harmony';\n\n    exports.parse = parse;\n\n    // Deep copy.\n    exports.Syntax = (function () {\n        var name, types = {};\n\n        if (typeof Object.create === 'function') {\n            types = Object.create(null);\n        }\n\n        for (name in Syntax) {\n            if (Syntax.hasOwnProperty(name)) {\n                types[name] = Syntax[name];\n            }\n        }\n\n        if (typeof Object.freeze === 'function') {\n            Object.freeze(types);\n        }\n\n        return types;\n    }());\n\n}));\n/* vim: set sw=4 ts=4 et tw=80 : */","blocks":{"total":785,"seen":8,"missing":777,"percentage":0.01019108280254777}},"hash":"ffa74369de22b048b93d63de9bcfed08"}}}