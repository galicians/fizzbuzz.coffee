{"version":"0.2.8","files":{"/Users/glind/gits/esprima/test/runner.js":{"stats":{"percentage":0.7818696883852692,"lines":[{"lineno":48},{"lineno":49},{"lineno":50},{"lineno":51},{"lineno":61},{"lineno":62},{"lineno":121},{"lineno":124},{"lineno":163},{"lineno":164},{"lineno":165},{"lineno":169},{"lineno":188},{"lineno":191},{"lineno":208},{"lineno":209},{"lineno":210},{"lineno":221},{"lineno":222},{"lineno":224},{"lineno":229},{"lineno":230},{"lineno":231},{"lineno":232},{"lineno":233},{"lineno":237},{"lineno":238},{"lineno":239},{"lineno":240},{"lineno":241},{"lineno":242},{"lineno":246},{"lineno":248},{"lineno":250},{"lineno":251},{"lineno":252},{"lineno":254},{"lineno":255},{"lineno":256},{"lineno":257},{"lineno":259},{"lineno":260},{"lineno":261},{"lineno":263},{"lineno":264},{"lineno":265},{"lineno":266},{"lineno":268},{"lineno":269},{"lineno":270},{"lineno":272},{"lineno":273},{"lineno":274},{"lineno":275},{"lineno":278},{"lineno":280},{"lineno":282},{"lineno":283},{"lineno":284},{"lineno":286},{"lineno":287},{"lineno":288},{"lineno":290},{"lineno":291},{"lineno":293},{"lineno":294},{"lineno":300},{"lineno":302},{"lineno":303},{"lineno":306},{"lineno":332},{"lineno":333},{"lineno":342},{"lineno":343},{"lineno":344},{"lineno":345},{"lineno":351}],"missing":77,"seen":276,"total":353,"coverage":{"48":{"partial":false,"source":"    'use strict';","missing":[{"startCol":4,"endCol":17}]},"49":{"partial":false,"source":"    Error.call(this, 'Expected ');","missing":[{"startCol":4,"endCol":33}]},"50":{"partial":false,"source":"    this.expected = expected;","missing":[{"startCol":4,"endCol":29}]},"51":{"partial":false,"source":"    this.actual = actual;","missing":[{"startCol":4,"endCol":25}]},"61":{"partial":false,"source":"        if (typeof e.message === 'string') {","missing":[{"startCol":12,"endCol":41}]},"62":{"partial":false,"source":"            msg = 'Error: ' + e.message;","missing":[{"startCol":12,"endCol":40},{"startCol":18,"endCol":39}]},"121":{"partial":false,"source":"        throw new NotMatchingError(expected, e.toString());","missing":[{"startCol":8,"endCol":59},{"startCol":45,"endCol":57}]},"124":{"partial":false,"source":"        throw new NotMatchingError(expected, actual);","missing":[{"startCol":8,"endCol":53}]},"163":{"partial":false,"source":"            if (exception.message.indexOf('Invalid regular expression') > 0) {","missing":[{"startCol":16,"endCol":71}]},"164":{"partial":false,"source":"                if (typeof actual === 'undefined' && !handleInvalidRegexFlag) {","missing":[{"startCol":20,"endCol":49}]},"165":{"partial":false,"source":"                    return;","missing":[{"startCol":20,"endCol":27}]},"169":{"partial":false,"source":"            throw new NotMatchingError(expected, actual);","missing":[{"startCol":12,"endCol":57}]},"188":{"partial":false,"source":"        throw new NotMatchingError(expected, e.toString());","missing":[{"startCol":8,"endCol":59},{"startCol":45,"endCol":57}]},"191":{"partial":false,"source":"        throw new NotMatchingError(expected, actual);","missing":[{"startCol":8,"endCol":53}]},"208":{"partial":false,"source":"    runTests = function () {","missing":[{}]},"209":{"partial":false,"source":"        'use strict';","missing":[{},{"startCol":8,"endCol":21}]},"210":{"partial":false,"source":"        var total = 0,","missing":[{}]},"211":{"partial":false,"source":"            failures = 0,","missing":[{}]},"212":{"partial":false,"source":"            category,","missing":[{}]},"213":{"partial":false,"source":"            fixture,","missing":[{}]},"214":{"partial":false,"source":"            source,","missing":[{}]},"215":{"partial":false,"source":"            tick,","missing":[{}]},"216":{"partial":false,"source":"            expected,","missing":[{}]},"217":{"partial":false,"source":"            index,","missing":[{}]},"218":{"partial":false,"source":"            len;","missing":[{}]},"219":{"partial":false,"source":"","missing":[{}]},"220":{"partial":false,"source":"        function setText(el, str) {","missing":[{}]},"221":{"partial":false,"source":"            if (typeof el.innerText === 'string') {","missing":[{"startCol":16,"endCol":48},{}]},"222":{"partial":false,"source":"                el.innerText = str;","missing":[{},{"startCol":16,"endCol":35}]},"223":{"partial":false,"source":"            } else {","missing":[{}]},"224":{"partial":false,"source":"                el.textContent = str;","missing":[{"startCol":16,"endCol":37},{}]},"225":{"partial":false,"source":"            }","missing":[{}]},"226":{"partial":false,"source":"        }","missing":[{}]},"227":{"partial":false,"source":"","missing":[{}]},"228":{"partial":false,"source":"        function startCategory(category) {","missing":[{}]},"229":{"partial":false,"source":"            var report, e;","missing":[{},{"startCol":12,"endCol":26}]},"230":{"partial":false,"source":"            report = document.getElementById('report');","missing":[{},{"startCol":12,"endCol":55},{"startCol":21,"endCol":54}]},"231":{"partial":false,"source":"            e = document.createElement('h4');","missing":[{"startCol":12,"endCol":45},{},{"startCol":16,"endCol":44}]},"232":{"partial":false,"source":"            setText(e, category);","missing":[{"startCol":12,"endCol":33},{}]},"233":{"partial":false,"source":"            report.appendChild(e);","missing":[{},{"startCol":12,"endCol":33}]},"234":{"partial":false,"source":"        }","missing":[{}]},"235":{"partial":false,"source":"","missing":[{}]},"236":{"partial":false,"source":"        function reportSuccess(code) {","missing":[{}]},"237":{"partial":false,"source":"            var report, e;","missing":[{},{"startCol":12,"endCol":26}]},"238":{"partial":false,"source":"            report = document.getElementById('report');","missing":[{"startCol":12,"endCol":55},{},{"startCol":21,"endCol":54}]},"239":{"partial":false,"source":"            e = document.createElement('pre');","missing":[{"startCol":16,"endCol":45},{},{"startCol":12,"endCol":46}]},"240":{"partial":false,"source":"            e.setAttribute('class', 'code');","missing":[{"startCol":12,"endCol":43},{}]},"241":{"partial":false,"source":"            setText(e, code);","missing":[{"startCol":12,"endCol":28},{}]},"242":{"partial":false,"source":"            report.appendChild(e);","missing":[{"startCol":12,"endCol":33},{}]},"243":{"partial":false,"source":"        }","missing":[{}]},"244":{"partial":false,"source":"","missing":[{}]},"245":{"partial":false,"source":"        function reportFailure(code, expected, actual) {","missing":[{}]},"246":{"partial":false,"source":"            var report, e;","missing":[{"startCol":12,"endCol":26},{}]},"247":{"partial":false,"source":"","missing":[{}]},"248":{"partial":false,"source":"            report = document.getElementById('report');","missing":[{"startCol":12,"endCol":55},{"startCol":21,"endCol":54},{}]},"249":{"partial":false,"source":"","missing":[{}]},"250":{"partial":false,"source":"            e = document.createElement('p');","missing":[{"startCol":12,"endCol":44},{"startCol":16,"endCol":43},{}]},"251":{"partial":false,"source":"            setText(e, 'Code:');","missing":[{"startCol":12,"endCol":31},{}]},"252":{"partial":false,"source":"            report.appendChild(e);","missing":[{},{"startCol":12,"endCol":33}]},"253":{"partial":false,"source":"","missing":[{}]},"254":{"partial":false,"source":"            e = document.createElement('pre');","missing":[{"startCol":12,"endCol":46},{},{"startCol":16,"endCol":45}]},"255":{"partial":false,"source":"            e.setAttribute('class', 'code');","missing":[{},{"startCol":12,"endCol":43}]},"256":{"partial":false,"source":"            setText(e, code);","missing":[{},{"startCol":12,"endCol":28}]},"257":{"partial":false,"source":"            report.appendChild(e);","missing":[{"startCol":12,"endCol":33},{}]},"258":{"partial":false,"source":"","missing":[{}]},"259":{"partial":false,"source":"            e = document.createElement('p');","missing":[{"startCol":12,"endCol":44},{"startCol":16,"endCol":43},{}]},"260":{"partial":false,"source":"            setText(e, 'Expected');","missing":[{"startCol":12,"endCol":34},{}]},"261":{"partial":false,"source":"            report.appendChild(e);","missing":[{},{"startCol":12,"endCol":33}]},"262":{"partial":false,"source":"","missing":[{}]},"263":{"partial":false,"source":"            e = document.createElement('pre');","missing":[{},{"startCol":12,"endCol":46},{"startCol":16,"endCol":45}]},"264":{"partial":false,"source":"            e.setAttribute('class', 'expected');","missing":[{"startCol":12,"endCol":47},{}]},"265":{"partial":false,"source":"            setText(e, expected);","missing":[{},{"startCol":12,"endCol":32}]},"266":{"partial":false,"source":"            report.appendChild(e);","missing":[{},{"startCol":12,"endCol":33}]},"267":{"partial":false,"source":"","missing":[{}]},"268":{"partial":false,"source":"            e = document.createElement('p');","missing":[{"startCol":12,"endCol":44},{},{"startCol":16,"endCol":43}]},"269":{"partial":false,"source":"            setText(e, 'Actual');","missing":[{"startCol":12,"endCol":32},{}]},"270":{"partial":false,"source":"            report.appendChild(e);","missing":[{"startCol":12,"endCol":33},{}]},"271":{"partial":false,"source":"","missing":[{}]},"272":{"partial":false,"source":"            e = document.createElement('pre');","missing":[{"startCol":12,"endCol":46},{"startCol":16,"endCol":45},{}]},"273":{"partial":false,"source":"            e.setAttribute('class', 'actual');","missing":[{"startCol":12,"endCol":45},{}]},"274":{"partial":false,"source":"            setText(e, actual);","missing":[{"startCol":12,"endCol":30},{}]},"275":{"partial":false,"source":"            report.appendChild(e);","missing":[{"startCol":12,"endCol":33},{}]},"276":{"partial":false,"source":"        }","missing":[{}]},"277":{"partial":false,"source":"","missing":[{}]},"278":{"partial":false,"source":"        setText(document.getElementById('version'), esprima.version);","missing":[{},{"startCol":8,"endCol":68},{"startCol":16,"endCol":50}]},"279":{"partial":false,"source":"","missing":[{}]},"280":{"partial":false,"source":"        tick = new Date();","missing":[{},{"startCol":8,"endCol":26}]},"281":{"partial":false,"source":"        for (category in testFixture) {","missing":[{}]},"282":{"partial":false,"source":"            if (testFixture.hasOwnProperty(category)) {","missing":[{"startCol":16,"endCol":52},{}]},"283":{"partial":false,"source":"                startCategory(category);","missing":[{"startCol":16,"endCol":39},{}]},"284":{"partial":false,"source":"                fixture = testFixture[category];","missing":[{},{"startCol":16,"endCol":48}]},"285":{"partial":false,"source":"                for (source in fixture) {","missing":[{}]},"286":{"partial":false,"source":"                    if (fixture.hasOwnProperty(source)) {","missing":[{},{"startCol":24,"endCol":54}]},"287":{"partial":false,"source":"                        expected = fixture[source];","missing":[{},{"startCol":24,"endCol":51}]},"288":{"partial":false,"source":"                        total += 1;","missing":[{},{"startCol":24,"endCol":35}]},"289":{"partial":false,"source":"                        try {","missing":[{}]},"290":{"partial":false,"source":"                            runTest(esprima, source, expected);","missing":[{"startCol":28,"endCol":62},{}]},"291":{"partial":false,"source":"                            reportSuccess(source, JSON.stringify(expected, null, 4));","missing":[{},{"startCol":28,"endCol":84},{"startCol":50,"endCol":83}]},"292":{"partial":false,"source":"                        } catch (e) {","missing":[{}]},"293":{"partial":false,"source":"                            failures += 1;","missing":[{},{"startCol":28,"endCol":42}]},"294":{"partial":false,"source":"                            reportFailure(source, e.expected, e.actual);","missing":[{"startCol":28,"endCol":71},{}]},"295":{"partial":false,"source":"                        }","missing":[{}]},"296":{"partial":false,"source":"                    }","missing":[{}]},"297":{"partial":false,"source":"                }","missing":[{}]},"298":{"partial":false,"source":"            }","missing":[{}]},"299":{"partial":false,"source":"        }","missing":[{}]},"300":{"partial":false,"source":"        tick = (new Date()) - tick;","missing":[{},{"startCol":8,"endCol":35},{"startCol":15,"endCol":34}]},"301":{"partial":false,"source":"","missing":[{}]},"302":{"partial":false,"source":"        if (failures > 0) {","missing":[{},{"startCol":12,"endCol":24}]},"303":{"partial":false,"source":"            setText(document.getElementById('status'), total + ' tests. ' +","missing":[{},{"startCol":20,"endCol":53},{"startCol":55,"endCol":73}]},"304":{"partial":false,"source":"                'Failures: ' + failures + '. ' + tick + ' ms');","missing":[{}]},"305":{"partial":false,"source":"        } else {","missing":[{}]},"306":{"partial":false,"source":"            setText(document.getElementById('status'), total + ' tests. ' +","missing":[{"startCol":20,"endCol":53},{},{"startCol":55,"endCol":73}]},"307":{"partial":false,"source":"                'No failure. ' + tick + ' ms');","missing":[{}]},"308":{"partial":false,"source":"        }","missing":[{}]},"309":{"partial":false,"source":"    };","missing":[{}]},"332":{"partial":false,"source":"                    e.source = source;","missing":[{"startCol":20,"endCol":38}]},"333":{"partial":false,"source":"                    failures.push(e);","missing":[{"startCol":20,"endCol":36}]},"342":{"partial":false,"source":"            console.error(header);","missing":[{"startCol":12,"endCol":33}]},"343":{"partial":false,"source":"            failures.forEach(function (failure) {","missing":[{}]},"344":{"partial":false,"source":"                console.error(failure.source + ': Expected\\n    ' +","missing":[{},{"startCol":30,"endCol":65}]},"345":{"partial":false,"source":"                    failure.expected.split('\\n').join('\\n    ') +","missing":[{},{"startCol":20,"endCol":63},{"startCol":42,"endCol":48}]},"346":{"partial":false,"source":"                    '\\nto match\\n    ' + failure.actual);","missing":[{}]},"347":{"partial":false,"source":"            });","missing":[{}]},"351":{"partial":true,"source":"        process.exit(failures.length === 0 ? 0 : 1);","missing":[{"startCol":49,"endCol":50}]}},"source":"/*\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2011 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2011 Arpad Borsos <arpad.borsos@googlemail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*jslint browser:true node:true */\n/*global esprima:true, testFixture:true */\n\nvar runTests;\n\n// Special handling for regular expression literal since we need to\n// convert it to a string literal, otherwise it will be decoded\n// as object \"{}\" and the regular expression would be lost.\nfunction adjustRegexLiteral(key, value) {\n    'use strict';\n    if (key === 'value' && value instanceof RegExp) {\n        value = value.toString();\n    }\n    return value;\n}\n\nfunction NotMatchingError(expected, actual) {\n    'use strict';\n    Error.call(this, 'Expected ');\n    this.expected = expected;\n    this.actual = actual;\n}\nNotMatchingError.prototype = new Error();\n\nfunction errorToObject(e) {\n    'use strict';\n    var msg = e.toString();\n\n    // Opera 9.64 produces an non-standard string in toString().\n    if (msg.substr(0, 6) !== 'Error:') {\n        if (typeof e.message === 'string') {\n            msg = 'Error: ' + e.message;\n        }\n    }\n\n    return {\n        index: e.index,\n        lineNumber: e.lineNumber,\n        column: e.column,\n        message: msg\n    };\n}\n\nfunction testParse(esprima, code, syntax) {\n    'use strict';\n    var expected, tree, actual, options, StringObject, i, len, err;\n\n    // alias, so that JSLint does not complain.\n    StringObject = String;\n\n    options = {\n        comment: (typeof syntax.comments !== 'undefined'),\n        range: true,\n        loc: true,\n        tokens: (typeof syntax.tokens !== 'undefined'),\n        raw: true,\n        tolerant: (typeof syntax.errors !== 'undefined')\n    };\n\n    if (typeof syntax.tokens !== 'undefined') {\n        if (syntax.tokens.length > 0) {\n            options.range = (typeof syntax.tokens[0].range !== 'undefined');\n            options.loc = (typeof syntax.tokens[0].loc !== 'undefined');\n        }\n    }\n\n    if (typeof syntax.comments !== 'undefined') {\n        if (syntax.comments.length > 0) {\n            options.range = (typeof syntax.comments[0].range !== 'undefined');\n            options.loc = (typeof syntax.comments[0].loc !== 'undefined');\n        }\n    }\n\n    expected = JSON.stringify(syntax, null, 4);\n    try {\n        tree = esprima.parse(code, options);\n        tree = (options.comment || options.tokens || options.tolerant) ? tree : tree.body[0];\n\n        if (options.tolerant) {\n            for (i = 0, len = tree.errors.length; i < len; i += 1) {\n                tree.errors[i] = errorToObject(tree.errors[i]);\n            }\n        }\n\n        actual = JSON.stringify(tree, adjustRegexLiteral, 4);\n\n        // Only to ensure that there is no error when using string object.\n        esprima.parse(new StringObject(code), options);\n\n    } catch (e) {\n        throw new NotMatchingError(expected, e.toString());\n    }\n    if (expected !== actual) {\n        throw new NotMatchingError(expected, actual);\n    }\n}\n\nfunction testError(esprima, code, exception) {\n    'use strict';\n    var i, options, expected, actual, handleInvalidRegexFlag;\n\n    // Different parsing options should give the same error.\n    options = [\n        {},\n        { comment: true },\n        { raw: true },\n        { raw: true, comment: true }\n    ];\n\n    // If handleInvalidRegexFlag is true, an invalid flag in a regular expression\n    // will throw an exception. In some old version V8, this is not the case\n    // and hence handleInvalidRegexFlag is false.\n    handleInvalidRegexFlag = false;\n    try {\n        'test'.match(new RegExp('[a-z]', 'x'));\n    } catch (e) {\n        handleInvalidRegexFlag = true;\n    }\n\n    expected = JSON.stringify(exception);\n\n    for (i = 0; i < options.length; i += 1) {\n\n        try {\n            esprima.parse(code, options[i]);\n        } catch (e) {\n            actual = JSON.stringify(errorToObject(e));\n        }\n\n        if (expected !== actual) {\n\n            // Compensate for old V8 which does not handle invalid flag.\n            if (exception.message.indexOf('Invalid regular expression') > 0) {\n                if (typeof actual === 'undefined' && !handleInvalidRegexFlag) {\n                    return;\n                }\n            }\n\n            throw new NotMatchingError(expected, actual);\n        }\n\n    }\n}\n\nfunction testAPI(esprima, code, result) {\n    'use strict';\n    var expected, res, actual;\n\n    expected = JSON.stringify(result.result, null, 4);\n    try {\n        if (typeof result.property !== 'undefined') {\n            res = esprima[result.property];\n        } else {\n            res = esprima[result.call].apply(esprima, result.args);\n        }\n        actual = JSON.stringify(res, adjustRegexLiteral, 4);\n    } catch (e) {\n        throw new NotMatchingError(expected, e.toString());\n    }\n    if (expected !== actual) {\n        throw new NotMatchingError(expected, actual);\n    }\n}\n\nfunction runTest(esprima, code, result) {\n    'use strict';\n    if (result.hasOwnProperty('lineNumber')) {\n        testError(esprima, code, result);\n    } else if (result.hasOwnProperty('result')) {\n        testAPI(esprima, code, result);\n    } else {\n        testParse(esprima, code, result);\n    }\n}\n\nif (typeof window !== 'undefined') {\n    // Run all tests in a browser environment.\n    runTests = function () {\n        'use strict';\n        var total = 0,\n            failures = 0,\n            category,\n            fixture,\n            source,\n            tick,\n            expected,\n            index,\n            len;\n\n        function setText(el, str) {\n            if (typeof el.innerText === 'string') {\n                el.innerText = str;\n            } else {\n                el.textContent = str;\n            }\n        }\n\n        function startCategory(category) {\n            var report, e;\n            report = document.getElementById('report');\n            e = document.createElement('h4');\n            setText(e, category);\n            report.appendChild(e);\n        }\n\n        function reportSuccess(code) {\n            var report, e;\n            report = document.getElementById('report');\n            e = document.createElement('pre');\n            e.setAttribute('class', 'code');\n            setText(e, code);\n            report.appendChild(e);\n        }\n\n        function reportFailure(code, expected, actual) {\n            var report, e;\n\n            report = document.getElementById('report');\n\n            e = document.createElement('p');\n            setText(e, 'Code:');\n            report.appendChild(e);\n\n            e = document.createElement('pre');\n            e.setAttribute('class', 'code');\n            setText(e, code);\n            report.appendChild(e);\n\n            e = document.createElement('p');\n            setText(e, 'Expected');\n            report.appendChild(e);\n\n            e = document.createElement('pre');\n            e.setAttribute('class', 'expected');\n            setText(e, expected);\n            report.appendChild(e);\n\n            e = document.createElement('p');\n            setText(e, 'Actual');\n            report.appendChild(e);\n\n            e = document.createElement('pre');\n            e.setAttribute('class', 'actual');\n            setText(e, actual);\n            report.appendChild(e);\n        }\n\n        setText(document.getElementById('version'), esprima.version);\n\n        tick = new Date();\n        for (category in testFixture) {\n            if (testFixture.hasOwnProperty(category)) {\n                startCategory(category);\n                fixture = testFixture[category];\n                for (source in fixture) {\n                    if (fixture.hasOwnProperty(source)) {\n                        expected = fixture[source];\n                        total += 1;\n                        try {\n                            runTest(esprima, source, expected);\n                            reportSuccess(source, JSON.stringify(expected, null, 4));\n                        } catch (e) {\n                            failures += 1;\n                            reportFailure(source, e.expected, e.actual);\n                        }\n                    }\n                }\n            }\n        }\n        tick = (new Date()) - tick;\n\n        if (failures > 0) {\n            setText(document.getElementById('status'), total + ' tests. ' +\n                'Failures: ' + failures + '. ' + tick + ' ms');\n        } else {\n            setText(document.getElementById('status'), total + ' tests. ' +\n                'No failure. ' + tick + ' ms');\n        }\n    };\n} else {\n    (function () {\n        'use strict';\n\n        var esprima = require('../esprima'),\n            vm = require('vm'),\n            fs = require('fs'),\n            total = 0,\n            failures = [],\n            tick = new Date(),\n            expected,\n            header;\n\n        vm.runInThisContext(fs.readFileSync(__dirname + '/test.js', 'utf-8'));\n\n        Object.keys(testFixture).forEach(function (category) {\n            Object.keys(testFixture[category]).forEach(function (source) {\n                total += 1;\n                expected = testFixture[category][source];\n                try {\n                    runTest(esprima, source, expected);\n                } catch (e) {\n                    e.source = source;\n                    failures.push(e);\n                }\n            });\n        });\n        tick = (new Date()) - tick;\n\n        header = total + ' tests. ' + failures.length + ' failures. ' +\n            tick + ' ms';\n        if (failures.length) {\n            console.error(header);\n            failures.forEach(function (failure) {\n                console.error(failure.source + ': Expected\\n    ' +\n                    failure.expected.split('\\n').join('\\n    ') +\n                    '\\nto match\\n    ' + failure.actual);\n            });\n        } else {\n            console.log(header);\n        }\n        process.exit(failures.length === 0 ? 0 : 1);\n    }());\n}","blocks":{"total":60,"seen":31,"missing":29,"percentage":0.5166666666666667}},"hash":"858fc372235fc8e3a70d65c0bb00cc37"},"/Users/glind/gits/esprima/esprima.js":{"stats":{"percentage":0.9082233502538071,"lines":[{"lineno":50},{"lineno":54},{"lineno":228},{"lineno":237},{"lineno":238},{"lineno":476},{"lineno":478},{"lineno":479},{"lineno":482},{"lineno":483},{"lineno":486},{"lineno":487},{"lineno":488},{"lineno":491},{"lineno":494},{"lineno":495},{"lineno":499},{"lineno":500},{"lineno":502},{"lineno":503},{"lineno":504},{"lineno":773},{"lineno":774},{"lineno":845},{"lineno":846},{"lineno":848},{"lineno":849},{"lineno":850},{"lineno":853},{"lineno":856},{"lineno":858},{"lineno":861},{"lineno":862},{"lineno":863},{"lineno":864},{"lineno":867},{"lineno":869},{"lineno":879},{"lineno":880},{"lineno":881},{"lineno":894},{"lineno":1017},{"lineno":1018},{"lineno":1095},{"lineno":1097},{"lineno":1098},{"lineno":1099},{"lineno":1101},{"lineno":1103},{"lineno":1104},{"lineno":1105},{"lineno":1106},{"lineno":1107},{"lineno":1109},{"lineno":1110},{"lineno":1111},{"lineno":1112},{"lineno":1115},{"lineno":1116},{"lineno":1117},{"lineno":1118},{"lineno":1121},{"lineno":1124},{"lineno":1127},{"lineno":1131},{"lineno":1132},{"lineno":1133},{"lineno":1135},{"lineno":1136},{"lineno":1138},{"lineno":1140},{"lineno":1141},{"lineno":1146},{"lineno":1149},{"lineno":1152},{"lineno":1156},{"lineno":1157},{"lineno":1160},{"lineno":1161},{"lineno":1164},{"lineno":1165},{"lineno":1166},{"lineno":1170},{"lineno":1171},{"lineno":1172},{"lineno":1173},{"lineno":1176},{"lineno":1178},{"lineno":1183},{"lineno":1184},{"lineno":1185},{"lineno":1188},{"lineno":1189},{"lineno":1190},{"lineno":1191},{"lineno":1194},{"lineno":1199},{"lineno":1202},{"lineno":1206},{"lineno":1217},{"lineno":1219},{"lineno":1220},{"lineno":1222},{"lineno":1224},{"lineno":1225},{"lineno":1228},{"lineno":1359},{"lineno":1408},{"lineno":1416},{"lineno":1518},{"lineno":1644},{"lineno":1646},{"lineno":1647},{"lineno":1648},{"lineno":1650},{"lineno":1652},{"lineno":1656},{"lineno":1658},{"lineno":1659},{"lineno":1660},{"lineno":1661},{"lineno":1680},{"lineno":1684},{"lineno":1685},{"lineno":1687},{"lineno":1714},{"lineno":1732},{"lineno":1734},{"lineno":1735},{"lineno":1736},{"lineno":1738},{"lineno":1740},{"lineno":1741},{"lineno":1742},{"lineno":1743},{"lineno":1744},{"lineno":1745},{"lineno":1746},{"lineno":1748},{"lineno":1749},{"lineno":1751},{"lineno":1752},{"lineno":1753},{"lineno":1756},{"lineno":1760},{"lineno":1762},{"lineno":1764},{"lineno":1766},{"lineno":1830},{"lineno":1831},{"lineno":1834},{"lineno":1839},{"lineno":1852},{"lineno":1854},{"lineno":1856},{"lineno":1857},{"lineno":1860},{"lineno":1863},{"lineno":1877},{"lineno":1878},{"lineno":1881},{"lineno":1886},{"lineno":1946},{"lineno":1947},{"lineno":1948},{"lineno":1950},{"lineno":1961},{"lineno":1963},{"lineno":1964},{"lineno":1965},{"lineno":1968},{"lineno":1969},{"lineno":1970},{"lineno":1973},{"lineno":2014},{"lineno":2018},{"lineno":2019},{"lineno":2059},{"lineno":2125},{"lineno":2128},{"lineno":2173},{"lineno":2195},{"lineno":2483},{"lineno":2485},{"lineno":2486},{"lineno":2487},{"lineno":2488},{"lineno":2489},{"lineno":2490},{"lineno":2492},{"lineno":2494},{"lineno":2495},{"lineno":2496},{"lineno":2497},{"lineno":2499},{"lineno":2502},{"lineno":2503},{"lineno":2504},{"lineno":2507},{"lineno":2508},{"lineno":2514},{"lineno":2515},{"lineno":2517},{"lineno":2519},{"lineno":2520},{"lineno":2521},{"lineno":2522},{"lineno":2524},{"lineno":2525},{"lineno":2527},{"lineno":2528},{"lineno":2530},{"lineno":2532},{"lineno":2536},{"lineno":2538},{"lineno":2540},{"lineno":2541},{"lineno":2542},{"lineno":2543},{"lineno":2544},{"lineno":2545},{"lineno":2546},{"lineno":2548},{"lineno":2556},{"lineno":2564},{"lineno":2572},{"lineno":2573},{"lineno":2574},{"lineno":2575},{"lineno":2577},{"lineno":2585},{"lineno":2586},{"lineno":2587},{"lineno":2588},{"lineno":2590},{"lineno":2592},{"lineno":2593},{"lineno":2594},{"lineno":2596},{"lineno":2610},{"lineno":2703},{"lineno":2704},{"lineno":2784},{"lineno":2786},{"lineno":2792},{"lineno":2793},{"lineno":2794},{"lineno":2797},{"lineno":2800},{"lineno":2804},{"lineno":2805},{"lineno":2811},{"lineno":2813},{"lineno":2815},{"lineno":2817},{"lineno":2818},{"lineno":2821},{"lineno":2825},{"lineno":2827},{"lineno":2828},{"lineno":2829},{"lineno":2832},{"lineno":2835},{"lineno":2838},{"lineno":2842},{"lineno":2844},{"lineno":2848},{"lineno":2850},{"lineno":2852},{"lineno":2856},{"lineno":2857},{"lineno":2858},{"lineno":2861},{"lineno":2865},{"lineno":2867},{"lineno":2868},{"lineno":2869},{"lineno":2872},{"lineno":2873},{"lineno":2875},{"lineno":2877},{"lineno":2883},{"lineno":2884},{"lineno":2886},{"lineno":2890},{"lineno":2891},{"lineno":2892},{"lineno":2895},{"lineno":2897},{"lineno":2901},{"lineno":2905},{"lineno":2907},{"lineno":2909},{"lineno":2911},{"lineno":2914},{"lineno":2916},{"lineno":2919},{"lineno":2921},{"lineno":2925},{"lineno":2927},{"lineno":2930},{"lineno":2932},{"lineno":2935},{"lineno":2938},{"lineno":2939},{"lineno":2940},{"lineno":2941},{"lineno":2944},{"lineno":2945},{"lineno":2949},{"lineno":2951},{"lineno":2958},{"lineno":2960},{"lineno":2962},{"lineno":2963},{"lineno":2964},{"lineno":2965},{"lineno":2966},{"lineno":2969},{"lineno":2970},{"lineno":2972},{"lineno":2974},{"lineno":2977},{"lineno":2978},{"lineno":2981},{"lineno":2983},{"lineno":2984},{"lineno":2986},{"lineno":2989},{"lineno":2991},{"lineno":2999},{"lineno":3001},{"lineno":3003},{"lineno":3007},{"lineno":3008},{"lineno":3009},{"lineno":3012},{"lineno":3168},{"lineno":3169},{"lineno":3170},{"lineno":3171},{"lineno":3207},{"lineno":3630},{"lineno":3687},{"lineno":3766},{"lineno":3767},{"lineno":3837},{"lineno":3862},{"lineno":3863},{"lineno":3934},{"lineno":3953},{"lineno":3955},{"lineno":3958},{"lineno":3961},{"lineno":3962},{"lineno":3963},{"lineno":3964},{"lineno":3968},{"lineno":3969},{"lineno":3970},{"lineno":3971},{"lineno":3972},{"lineno":3974},{"lineno":3984},{"lineno":3986},{"lineno":3987},{"lineno":3988},{"lineno":3990},{"lineno":3991},{"lineno":3996},{"lineno":3997},{"lineno":3999},{"lineno":4000},{"lineno":4001},{"lineno":4002},{"lineno":4003},{"lineno":4006},{"lineno":4009},{"lineno":4010},{"lineno":4011},{"lineno":4012},{"lineno":4013},{"lineno":4014},{"lineno":4015},{"lineno":4018},{"lineno":4022},{"lineno":4025},{"lineno":4032},{"lineno":4033},{"lineno":4034},{"lineno":4036},{"lineno":4041},{"lineno":4043},{"lineno":4045},{"lineno":4046},{"lineno":4049},{"lineno":4050},{"lineno":4051},{"lineno":4055},{"lineno":4057},{"lineno":4064},{"lineno":4066},{"lineno":4068},{"lineno":4069},{"lineno":4072},{"lineno":4073},{"lineno":4074},{"lineno":4075},{"lineno":4076},{"lineno":4077},{"lineno":4080},{"lineno":4081},{"lineno":4090},{"lineno":4092},{"lineno":4094},{"lineno":4095},{"lineno":4097},{"lineno":4098},{"lineno":4099},{"lineno":4100},{"lineno":4101},{"lineno":4102},{"lineno":4105},{"lineno":4106},{"lineno":4142},{"lineno":4144},{"lineno":4148},{"lineno":4149},{"lineno":4150},{"lineno":4151},{"lineno":4152},{"lineno":4198},{"lineno":4202},{"lineno":4205},{"lineno":4206},{"lineno":4209},{"lineno":4210},{"lineno":4213},{"lineno":4216},{"lineno":4220},{"lineno":4222},{"lineno":4224},{"lineno":4226},{"lineno":4228},{"lineno":4809},{"lineno":4812},{"lineno":4813},{"lineno":4815},{"lineno":4863},{"lineno":4864},{"lineno":4868},{"lineno":4869}],"missing":452,"seen":4473,"total":4925,"coverage":{"50":{"partial":false,"source":"        define(['exports'], factory);","missing":[{"startCol":8,"endCol":36}]},"54":{"partial":false,"source":"        factory((window.esprima = {}));","missing":[{"startCol":8,"endCol":38}]},"228":{"partial":false,"source":"            throw new Error('ASSERT: ' + message);","missing":[{"startCol":12,"endCol":50},{"startCol":28,"endCol":48}]},"237":{"partial":false,"source":"        sliceSource = function sliceArraySource(from, to) {","missing":[{}]},"238":{"partial":false,"source":"            return source.slice(from, to).join('');","missing":[{"startCol":12,"endCol":51},{"startCol":19,"endCol":50},{"startCol":31,"endCol":41},{}]},"239":{"partial":false,"source":"        };","missing":[{}]},"476":{"partial":false,"source":"        var ch, code, cu1, cu2;","missing":[{"startCol":8,"endCol":31}]},"478":{"partial":false,"source":"        ch = source[index];","missing":[{"startCol":8,"endCol":27}]},"479":{"partial":false,"source":"        code = 0;","missing":[{"startCol":8,"endCol":17}]},"482":{"partial":false,"source":"        if (ch === '}') {","missing":[{"startCol":12,"endCol":22}]},"483":{"partial":false,"source":"            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');","missing":[{"startCol":12,"endCol":63}]},"486":{"partial":false,"source":"        while (index < length) {","missing":[{"startCol":15,"endCol":29}]},"487":{"partial":false,"source":"            ch = nextChar();","missing":[{"startCol":12,"endCol":28},{"startCol":17,"endCol":27}]},"488":{"partial":false,"source":"            if (!isHexDigit(ch)) {","missing":[{"startCol":17,"endCol":31}]},"491":{"partial":false,"source":"            code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());","missing":[{"startCol":12,"endCol":76},{"startCol":19,"endCol":28},{"startCol":31,"endCol":75},{"startCol":58,"endCol":74}]},"494":{"partial":false,"source":"        if (code > 0x10FFFF || ch !== '}') {","missing":[{"startCol":12,"endCol":27},{"startCol":31,"endCol":41}]},"495":{"partial":false,"source":"            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');","missing":[{"startCol":12,"endCol":63}]},"499":{"partial":false,"source":"        if (code <= 0xFFFF) {","missing":[{"startCol":12,"endCol":26}]},"500":{"partial":false,"source":"            return String.fromCharCode(code);","missing":[{"startCol":12,"endCol":45},{"startCol":19,"endCol":44}]},"502":{"partial":false,"source":"        cu1 = ((code - 0x10000) >> 10) + 0xD800;","missing":[{"startCol":8,"endCol":48},{"startCol":14,"endCol":38},{"startCol":15,"endCol":31}]},"503":{"partial":false,"source":"        cu2 = ((code - 0x10000) & 1023) + 0xDC00;","missing":[{"startCol":8,"endCol":49},{"startCol":14,"endCol":39},{"startCol":15,"endCol":31}]},"504":{"partial":false,"source":"        return String.fromCharCode(cu1, cu2);","missing":[{"startCol":8,"endCol":45},{"startCol":15,"endCol":44}]},"773":{"partial":false,"source":"            index += 2;","missing":[{"startCol":12,"endCol":23}]},"774":{"partial":false,"source":"            return {","missing":[{}]},"775":{"partial":false,"source":"                type: Token.Punctuator,","missing":[{}]},"776":{"partial":false,"source":"                value: '=>',","missing":[{}]},"777":{"partial":false,"source":"                lineNumber: lineNumber,","missing":[{}]},"778":{"partial":false,"source":"                lineStart: lineStart,","missing":[{}]},"779":{"partial":false,"source":"                range: [start, index]","missing":[{}]},"780":{"partial":false,"source":"            };","missing":[{}]},"845":{"partial":false,"source":"                    nextChar();","missing":[{"startCol":20,"endCol":30}]},"846":{"partial":false,"source":"                    number = '';","missing":[{"startCol":20,"endCol":32}]},"848":{"partial":false,"source":"                    while (index < length) {","missing":[{"startCol":27,"endCol":41}]},"849":{"partial":false,"source":"                        ch = source[index];","missing":[{"startCol":24,"endCol":43}]},"850":{"partial":false,"source":"                        if (ch !== '0' && ch !== '1') {","missing":[{"startCol":28,"endCol":38},{"startCol":42,"endCol":52}]},"853":{"partial":false,"source":"                        number += nextChar();","missing":[{"startCol":24,"endCol":45},{"startCol":34,"endCol":44}]},"856":{"partial":false,"source":"                    if (number.length === 0) {","missing":[{"startCol":24,"endCol":43}]},"858":{"partial":false,"source":"                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');","missing":[{"startCol":24,"endCol":75}]},"861":{"partial":false,"source":"                    if (index < length) {","missing":[{"startCol":24,"endCol":38}]},"862":{"partial":false,"source":"                        ch = source[index];","missing":[{"startCol":24,"endCol":43}]},"863":{"partial":false,"source":"                        if (isIdentifierStart(ch) || isDecimalDigit(ch)) {","missing":[{"startCol":28,"endCol":49},{"startCol":53,"endCol":71}]},"864":{"partial":false,"source":"                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');","missing":[{"startCol":28,"endCol":79}]},"867":{"partial":false,"source":"                    return {","missing":[{}]},"868":{"partial":false,"source":"                        type: Token.NumericLiteral,","missing":[{}]},"869":{"partial":false,"source":"                        value: parseInt(number, 2),","missing":[{"startCol":31,"endCol":50},{}]},"870":{"partial":false,"source":"                        lineNumber: lineNumber,","missing":[{}]},"871":{"partial":false,"source":"                        lineStart: lineStart,","missing":[{}]},"872":{"partial":false,"source":"                        range: [start, index]","missing":[{}]},"873":{"partial":false,"source":"                    };","missing":[{}]},"879":{"partial":false,"source":"                        octal = false;","missing":[{"startCol":24,"endCol":38}]},"880":{"partial":false,"source":"                        nextChar();","missing":[{"startCol":24,"endCol":34}]},"881":{"partial":false,"source":"                        number = '';","missing":[{"startCol":24,"endCol":36}]},"894":{"partial":false,"source":"                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');","missing":[{"startCol":24,"endCol":75}]},"1017":{"partial":false,"source":"                            ++index;","missing":[{"startCol":28,"endCol":35}]},"1018":{"partial":false,"source":"                            str += scanUnicodeCodePointEscape();","missing":[{"startCol":28,"endCol":64},{"startCol":35,"endCol":63}]},"1095":{"partial":false,"source":"        var cooked = '', ch, start, terminated, tail, restore, unescaped, code, octal;","missing":[{"startCol":8,"endCol":86}]},"1097":{"partial":false,"source":"        terminated = false;","missing":[{"startCol":8,"endCol":27}]},"1098":{"partial":false,"source":"        tail = false;","missing":[{"startCol":8,"endCol":21}]},"1099":{"partial":false,"source":"        start = index;","missing":[{"startCol":8,"endCol":22}]},"1101":{"partial":false,"source":"        ++index;","missing":[{"startCol":8,"endCol":15}]},"1103":{"partial":false,"source":"        while (index < length) {","missing":[{"startCol":15,"endCol":29}]},"1104":{"partial":false,"source":"            ch = nextChar();","missing":[{"startCol":12,"endCol":28},{"startCol":17,"endCol":27}]},"1105":{"partial":false,"source":"            if (ch === '`') {","missing":[{"startCol":16,"endCol":26}]},"1106":{"partial":false,"source":"                tail = true;","missing":[{"startCol":16,"endCol":28}]},"1107":{"partial":false,"source":"                terminated = true;","missing":[{"startCol":16,"endCol":34}]},"1109":{"partial":false,"source":"            } else if (ch === '$') {","missing":[{"startCol":23,"endCol":33}]},"1110":{"partial":false,"source":"                if (source[index] === '{') {","missing":[{"startCol":20,"endCol":41}]},"1111":{"partial":false,"source":"                    ++index;","missing":[{"startCol":20,"endCol":27}]},"1112":{"partial":false,"source":"                    terminated = true;","missing":[{"startCol":20,"endCol":38}]},"1115":{"partial":false,"source":"                cooked += ch;","missing":[{"startCol":16,"endCol":29}]},"1116":{"partial":false,"source":"            } else if (ch === '\\\\') {","missing":[{"startCol":23,"endCol":34}]},"1117":{"partial":false,"source":"                ch = nextChar();","missing":[{"startCol":16,"endCol":32},{"startCol":21,"endCol":31}]},"1118":{"partial":false,"source":"                if (!isLineTerminator(ch)) {","missing":[{"startCol":21,"endCol":41}]},"1121":{"partial":false,"source":"                        cooked += '\\n';","missing":[{"startCol":24,"endCol":39}]},"1124":{"partial":false,"source":"                        cooked += '\\r';","missing":[{"startCol":24,"endCol":39}]},"1127":{"partial":false,"source":"                        cooked += '\\t';","missing":[{"startCol":24,"endCol":39}]},"1131":{"partial":false,"source":"                        if (source[index] === '{') {","missing":[{"startCol":28,"endCol":49}]},"1132":{"partial":false,"source":"                            ++index;","missing":[{"startCol":28,"endCol":35}]},"1133":{"partial":false,"source":"                            cooked += scanUnicodeCodePointEscape();","missing":[{"startCol":28,"endCol":67},{"startCol":38,"endCol":66}]},"1135":{"partial":false,"source":"                            restore = index;","missing":[{"startCol":28,"endCol":44}]},"1136":{"partial":false,"source":"                            unescaped = scanHexEscape(ch);","missing":[{"startCol":28,"endCol":58},{"startCol":40,"endCol":57}]},"1138":{"partial":false,"source":"                                cooked += unescaped;","missing":[{"startCol":32,"endCol":52}]},"1140":{"partial":false,"source":"                                index = restore;","missing":[{"startCol":32,"endCol":48}]},"1141":{"partial":false,"source":"                                cooked += ch;","missing":[{"startCol":32,"endCol":45}]},"1146":{"partial":false,"source":"                        cooked += '\\b';","missing":[{"startCol":24,"endCol":39}]},"1149":{"partial":false,"source":"                        cooked += '\\f';","missing":[{"startCol":24,"endCol":39}]},"1152":{"partial":false,"source":"                        cooked += '\\v';","missing":[{"startCol":24,"endCol":39}]},"1156":{"partial":false,"source":"                        if (isOctalDigit(ch)) {","missing":[{"startCol":28,"endCol":44}]},"1157":{"partial":false,"source":"                            code = '01234567'.indexOf(ch);","missing":[{"startCol":28,"endCol":58},{"startCol":35,"endCol":57}]},"1160":{"partial":false,"source":"                            if (code !== 0) {","missing":[{"startCol":32,"endCol":42}]},"1161":{"partial":false,"source":"                                octal = true;","missing":[{"startCol":32,"endCol":45}]},"1164":{"partial":false,"source":"                            if (index < length && isOctalDigit(source[index])) {","missing":[{"startCol":32,"endCol":46},{"startCol":50,"endCol":77}]},"1165":{"partial":false,"source":"                                octal = true;","missing":[{"startCol":32,"endCol":45}]},"1166":{"partial":false,"source":"                                code = code * 8 + '01234567'.indexOf(nextChar());","missing":[{"startCol":32,"endCol":81},{"startCol":39,"endCol":47},{"startCol":50,"endCol":80},{"startCol":69,"endCol":79}]},"1170":{"partial":false,"source":"                                if ('0123'.indexOf(ch) >= 0 &&","missing":[{},{"startCol":36,"endCol":54}]},"1171":{"partial":false,"source":"                                        index < length &&","missing":[{"startCol":40,"endCol":54},{}]},"1172":{"partial":false,"source":"                                        isOctalDigit(source[index])) {","missing":[{"startCol":40,"endCol":67},{}]},"1173":{"partial":false,"source":"                                    code = code * 8 + '01234567'.indexOf(nextChar());","missing":[{"startCol":36,"endCol":85},{"startCol":43,"endCol":51},{"startCol":54,"endCol":84},{"startCol":73,"endCol":83}]},"1176":{"partial":false,"source":"                            cooked += String.fromCharCode(code);","missing":[{"startCol":28,"endCol":64},{"startCol":38,"endCol":63}]},"1178":{"partial":false,"source":"                            cooked += ch;","missing":[{"startCol":28,"endCol":41}]},"1183":{"partial":false,"source":"                    ++lineNumber;","missing":[{"startCol":20,"endCol":32}]},"1184":{"partial":false,"source":"                    if (ch ===  '\\r' && source[index] === '\\n') {","missing":[{"startCol":24,"endCol":36},{"startCol":40,"endCol":62}]},"1185":{"partial":false,"source":"                        ++index;","missing":[{"startCol":24,"endCol":31}]},"1188":{"partial":false,"source":"            } else if (isLineTerminator(ch)) {","missing":[{"startCol":23,"endCol":43}]},"1189":{"partial":false,"source":"                ++lineNumber;","missing":[{"startCol":16,"endCol":28}]},"1190":{"partial":false,"source":"                if (ch ===  '\\r' && source[index] === '\\n') {","missing":[{"startCol":20,"endCol":32},{"startCol":36,"endCol":58}]},"1191":{"partial":false,"source":"                    ++index;","missing":[{"startCol":20,"endCol":27}]},"1194":{"partial":false,"source":"                cooked += ch;","missing":[{"startCol":16,"endCol":29}]},"1199":{"partial":false,"source":"            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');","missing":[{"startCol":12,"endCol":63}]},"1202":{"partial":false,"source":"        return {","missing":[{}]},"1203":{"partial":false,"source":"            type: Token.Quasi,","missing":[{}]},"1204":{"partial":false,"source":"            value: {","missing":[{}]},"1205":{"partial":false,"source":"                cooked: cooked,","missing":[{}]},"1206":{"partial":false,"source":"                raw: sliceSource(start + 1, index - ((tail) ? 1 : 2))","missing":[{"startCol":21,"endCol":69},{"startCol":33,"endCol":42},{"startCol":44,"endCol":68},{"startCol":62,"endCol":63},{},{"startCol":66,"endCol":67}]},"1207":{"partial":false,"source":"            },","missing":[{}]},"1208":{"partial":false,"source":"            tail: tail,","missing":[{}]},"1209":{"partial":false,"source":"            octal: octal,","missing":[{}]},"1210":{"partial":false,"source":"            lineNumber: lineNumber,","missing":[{}]},"1211":{"partial":false,"source":"            lineStart: lineStart,","missing":[{}]},"1212":{"partial":false,"source":"            range: [start, index]","missing":[{}]},"1213":{"partial":false,"source":"        };","missing":[{}]},"1217":{"partial":false,"source":"        var startsWith;","missing":[{"startCol":8,"endCol":23}]},"1219":{"partial":false,"source":"        buffer = null;","missing":[{"startCol":8,"endCol":22}]},"1220":{"partial":false,"source":"        skipComment();","missing":[{"startCol":8,"endCol":21}]},"1222":{"partial":false,"source":"        startsWith = (option.head) ? '`' : '}';","missing":[{"startCol":8,"endCol":47},{"startCol":37,"endCol":40},{"startCol":43,"endCol":46}]},"1224":{"partial":false,"source":"        if (source[index] !== startsWith) {","missing":[{"startCol":12,"endCol":40}]},"1225":{"partial":false,"source":"            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');","missing":[{"startCol":12,"endCol":63}]},"1228":{"partial":false,"source":"        return scanQuasi();","missing":[{"startCol":8,"endCol":27},{"startCol":15,"endCol":26}]},"1359":{"partial":false,"source":"            return scanQuasi();","missing":[{"startCol":12,"endCol":31},{"startCol":19,"endCol":30}]},"1408":{"partial":true,"source":"        adv = (typeof extra.advance === 'function') ? extra.advance : advance;","missing":[{"startCol":54,"endCol":67}]},"1416":{"partial":false,"source":"            buffer = adv();","missing":[{"startCol":12,"endCol":27},{"startCol":21,"endCol":26}]},"1518":{"partial":false,"source":"            throwError(token, Messages.UnexpectedQuasi, token.value.raw);","missing":[{"startCol":12,"endCol":72}]},"1644":{"partial":false,"source":"                        throwError({},Messages.ComprehensionError);","missing":[{"startCol":24,"endCol":66}]},"1646":{"partial":false,"source":"                    matchKeyword('for');","missing":[{"startCol":20,"endCol":39}]},"1647":{"partial":false,"source":"                    tmp = parseForStatement({ignore_body: true});","missing":[{"startCol":20,"endCol":65},{"startCol":26,"endCol":64}]},"1648":{"partial":false,"source":"                    tmp.type = Syntax.ComprehensionBlock;","missing":[{"startCol":20,"endCol":57}]},"1650":{"partial":false,"source":"                        throwError({},Messages.ComprehensionError);","missing":[{"startCol":24,"endCol":66}]},"1652":{"partial":false,"source":"                    blocks.push(tmp);","missing":[{"startCol":20,"endCol":36}]},"1656":{"partial":false,"source":"                        throwError({},Messages.ComprehensionError);","missing":[{"startCol":24,"endCol":66}]},"1658":{"partial":false,"source":"                    expectKeyword('if');","missing":[{"startCol":20,"endCol":39}]},"1659":{"partial":false,"source":"                    expect('(');","missing":[{"startCol":20,"endCol":31}]},"1660":{"partial":false,"source":"                    filter = parseExpression();","missing":[{"startCol":20,"endCol":47},{"startCol":29,"endCol":46}]},"1661":{"partial":false,"source":"                    expect(')');","missing":[{"startCol":20,"endCol":31}]},"1680":{"partial":false,"source":"            throwError({},Messages.ComprehensionRequiresBlock)","missing":[{},{"startCol":12,"endCol":62}]},"1681":{"partial":false,"source":"        }","missing":[{}]},"1684":{"partial":false,"source":"            if (elements.length != 1) {","missing":[{"startCol":16,"endCol":36}]},"1685":{"partial":false,"source":"                throwError({},Messages.ComprehensionError)","missing":[{},{"startCol":16,"endCol":58}]},"1686":{"partial":false,"source":"            }","missing":[{}]},"1687":{"partial":false,"source":"            return {","missing":[{}]},"1688":{"partial":false,"source":"                type:  Syntax.ComprehensionExpression,","missing":[{}]},"1689":{"partial":false,"source":"                filter: filter,","missing":[{}]},"1690":{"partial":false,"source":"                blocks: blocks,","missing":[{}]},"1691":{"partial":false,"source":"                body: elements[0]","missing":[{}]},"1692":{"partial":false,"source":"            }","missing":[{}]},"1693":{"partial":false,"source":"        } else {","missing":[{}]},"1714":{"partial":false,"source":"            throwError({}, Messages.NoYieldInGenerator);","missing":[{"startCol":12,"endCol":55}]},"1732":{"partial":false,"source":"        var token, previousStrict, param, params, paramSet, method;","missing":[{"startCol":8,"endCol":67}]},"1734":{"partial":false,"source":"        previousStrict = strict;","missing":[{"startCol":8,"endCol":32}]},"1735":{"partial":false,"source":"        strict = true;","missing":[{"startCol":8,"endCol":22}]},"1736":{"partial":false,"source":"        params = [];","missing":[{"startCol":8,"endCol":20}]},"1738":{"partial":false,"source":"        expect('(');","missing":[{"startCol":8,"endCol":19}]},"1740":{"partial":false,"source":"        if (!match(')')) {","missing":[{"startCol":13,"endCol":23}]},"1741":{"partial":false,"source":"            paramSet = {};","missing":[{"startCol":12,"endCol":26}]},"1742":{"partial":false,"source":"            while (index < length) {","missing":[{"startCol":19,"endCol":33}]},"1743":{"partial":false,"source":"                token = lookahead();","missing":[{"startCol":16,"endCol":36},{"startCol":24,"endCol":35}]},"1744":{"partial":false,"source":"                param = parseVariableIdentifier();","missing":[{"startCol":16,"endCol":50},{"startCol":24,"endCol":49}]},"1745":{"partial":false,"source":"                if (isRestrictedWord(token.value)) {","missing":[{"startCol":20,"endCol":49}]},"1746":{"partial":false,"source":"                    throwError(token, Messages.StrictParamName);","missing":[{"startCol":20,"endCol":63}]},"1748":{"partial":false,"source":"                if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {","missing":[{"startCol":20,"endCol":79}]},"1749":{"partial":false,"source":"                    throwError(token, Messages.StrictParamDupe);","missing":[{"startCol":20,"endCol":63}]},"1751":{"partial":false,"source":"                params.push(param);","missing":[{"startCol":16,"endCol":34}]},"1752":{"partial":false,"source":"                paramSet[param.name] = true;","missing":[{"startCol":16,"endCol":44}]},"1753":{"partial":false,"source":"                if (match(')')) {","missing":[{"startCol":20,"endCol":30}]},"1756":{"partial":false,"source":"                expect(',');","missing":[{"startCol":16,"endCol":27}]},"1760":{"partial":false,"source":"        expect(')');","missing":[{"startCol":8,"endCol":19}]},"1762":{"partial":false,"source":"        method = parsePropertyFunction(params, { generator: options.generator });","missing":[{"startCol":8,"endCol":81},{"startCol":17,"endCol":80}]},"1764":{"partial":false,"source":"        strict = previousStrict;","missing":[{"startCol":8,"endCol":32}]},"1766":{"partial":false,"source":"        return method;","missing":[{"startCol":8,"endCol":22}]},"1830":{"partial":false,"source":"                } else if (match('(')) {","missing":[{"startCol":27,"endCol":37}]},"1831":{"partial":false,"source":"                    return {","missing":[{}]},"1832":{"partial":false,"source":"                        type: Syntax.Property,","missing":[{}]},"1833":{"partial":false,"source":"                        key: id,","missing":[{}]},"1834":{"partial":false,"source":"                        value: parsePropertyMethodFunction({ generator: false }),","missing":[{"startCol":31,"endCol":80},{}]},"1835":{"partial":false,"source":"                        kind: 'init',","missing":[{}]},"1836":{"partial":false,"source":"                        method: true","missing":[{}]},"1837":{"partial":false,"source":"                    };","missing":[{}]},"1839":{"partial":false,"source":"                    return {","missing":[{}]},"1840":{"partial":false,"source":"                        type: Syntax.Property,","missing":[{}]},"1841":{"partial":false,"source":"                        key: id,","missing":[{}]},"1842":{"partial":false,"source":"                        value: id,","missing":[{}]},"1843":{"partial":false,"source":"                        kind: 'init',","missing":[{}]},"1844":{"partial":false,"source":"                        shorthand: true","missing":[{}]},"1845":{"partial":false,"source":"                    };","missing":[{}]},"1852":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"1854":{"partial":false,"source":"            id = parseObjectPropertyKey();","missing":[{"startCol":12,"endCol":42},{"startCol":17,"endCol":41}]},"1856":{"partial":false,"source":"            if (!match('(')) {","missing":[{"startCol":17,"endCol":27}]},"1857":{"partial":false,"source":"                throwUnexpected(lex());","missing":[{"startCol":16,"endCol":38},{"startCol":32,"endCol":37}]},"1860":{"partial":false,"source":"            return {","missing":[{}]},"1861":{"partial":false,"source":"                type: Syntax.Property,","missing":[{}]},"1862":{"partial":false,"source":"                key: id,","missing":[{}]},"1863":{"partial":false,"source":"                value: parsePropertyMethodFunction({ generator: true }),","missing":[{},{"startCol":23,"endCol":71}]},"1864":{"partial":false,"source":"                kind: 'init',","missing":[{}]},"1865":{"partial":false,"source":"                method: true","missing":[{}]},"1866":{"partial":false,"source":"            };","missing":[{}]},"1877":{"partial":false,"source":"            } else if (match('(')) {","missing":[{"startCol":23,"endCol":33}]},"1878":{"partial":false,"source":"                return {","missing":[{}]},"1879":{"partial":false,"source":"                    type: Syntax.Property,","missing":[{}]},"1880":{"partial":false,"source":"                    key: key,","missing":[{}]},"1881":{"partial":false,"source":"                    value: parsePropertyMethodFunction({ generator: false }),","missing":[{"startCol":27,"endCol":76},{}]},"1882":{"partial":false,"source":"                    kind: 'init',","missing":[{}]},"1883":{"partial":false,"source":"                    method: true","missing":[{}]},"1884":{"partial":false,"source":"                };","missing":[{}]},"1886":{"partial":false,"source":"                return {","missing":[{}]},"1887":{"partial":false,"source":"                    type: Syntax.Property,","missing":[{}]},"1888":{"partial":false,"source":"                    key: key,","missing":[{}]},"1889":{"partial":false,"source":"                    value: key,","missing":[{}]},"1890":{"partial":false,"source":"                    kind: 'init',","missing":[{}]},"1891":{"partial":false,"source":"                    shorthand: true","missing":[{}]},"1892":{"partial":false,"source":"                };","missing":[{}]},"1946":{"partial":false,"source":"        var token = scanQuasiElement(option);","missing":[{"startCol":8,"endCol":45},{"startCol":20,"endCol":44}]},"1947":{"partial":false,"source":"        if (strict && token.octal) {","missing":[{"startCol":12,"endCol":33}]},"1948":{"partial":false,"source":"            throwError(token, Messages.StrictOctalLiteral);","missing":[{"startCol":12,"endCol":58}]},"1950":{"partial":false,"source":"        return {","missing":[{}]},"1951":{"partial":false,"source":"            type: Syntax.QuasiElement,","missing":[{}]},"1952":{"partial":false,"source":"            value: {","missing":[{}]},"1953":{"partial":false,"source":"                raw: token.value.raw,","missing":[{}]},"1954":{"partial":false,"source":"                cooked: token.value.cooked","missing":[{}]},"1955":{"partial":false,"source":"            },","missing":[{}]},"1956":{"partial":false,"source":"            tail: token.tail","missing":[{}]},"1957":{"partial":false,"source":"        };","missing":[{}]},"1961":{"partial":false,"source":"        var quasi, quasis, expressions;","missing":[{"startCol":8,"endCol":39}]},"1963":{"partial":false,"source":"        quasi = parseQuasiElement({ head: true });","missing":[{"startCol":8,"endCol":50},{"startCol":16,"endCol":49}]},"1964":{"partial":false,"source":"        quasis = [ quasi ];","missing":[{"startCol":8,"endCol":27}]},"1965":{"partial":false,"source":"        expressions = [];","missing":[{"startCol":8,"endCol":25}]},"1968":{"partial":false,"source":"            expressions.push(parseExpression());","missing":[{"startCol":12,"endCol":47},{"startCol":29,"endCol":46}]},"1969":{"partial":false,"source":"            quasi = parseQuasiElement({ head: false });","missing":[{"startCol":12,"endCol":55},{"startCol":20,"endCol":54}]},"1970":{"partial":false,"source":"            quasis.push(quasi);","missing":[{"startCol":12,"endCol":30}]},"1973":{"partial":false,"source":"        return {","missing":[{}]},"1974":{"partial":false,"source":"            type: Syntax.QuasiLiteral,","missing":[{}]},"1975":{"partial":false,"source":"            quasis: quasis,","missing":[{}]},"1976":{"partial":false,"source":"            expressions: expressions","missing":[{}]},"1977":{"partial":false,"source":"        };","missing":[{}]},"2014":{"partial":false,"source":"                return parseClassExpression();","missing":[{"startCol":16,"endCol":46},{"startCol":23,"endCol":45}]},"2018":{"partial":false,"source":"                lex();","missing":[{"startCol":16,"endCol":21}]},"2019":{"partial":false,"source":"                return {","missing":[{}]},"2020":{"partial":false,"source":"                    type: Syntax.Identifier,","missing":[{}]},"2021":{"partial":false,"source":"                    name: 'super'","missing":[{}]},"2022":{"partial":false,"source":"                };","missing":[{}]},"2059":{"partial":false,"source":"            return parseQuasiLiteral();","missing":[{"startCol":12,"endCol":39},{"startCol":19,"endCol":38}]},"2125":{"partial":false,"source":"        return {","missing":[{}]},"2126":{"partial":false,"source":"            type: Syntax.TaggedQuasiExpression,","missing":[{}]},"2127":{"partial":false,"source":"            tag: tag,","missing":[{}]},"2128":{"partial":false,"source":"            quasi: parseQuasiLiteral()","missing":[{},{"startCol":19,"endCol":38}]},"2129":{"partial":false,"source":"        };","missing":[{}]},"2173":{"partial":false,"source":"                expr = parseTaggedQuasi(expr);","missing":[{"startCol":16,"endCol":46},{"startCol":23,"endCol":45}]},"2195":{"partial":false,"source":"                expr = parseTaggedQuasi(expr);","missing":[{"startCol":16,"endCol":46},{"startCol":23,"endCol":45}]},"2483":{"partial":false,"source":"        var i, len, property, element;","missing":[{"startCol":8,"endCol":38}]},"2485":{"partial":false,"source":"        if (expr.type === Syntax.ObjectExpression) {","missing":[{"startCol":12,"endCol":49}]},"2486":{"partial":false,"source":"            expr.type = Syntax.ObjectPattern;","missing":[{"startCol":12,"endCol":45}]},"2487":{"partial":false,"source":"            for (i = 0, len = expr.properties.length; i < len; i += 1) {","missing":[{"startCol":54,"endCol":61}]},"2488":{"partial":false,"source":"                property = expr.properties[i];","missing":[{"startCol":16,"endCol":46}]},"2489":{"partial":false,"source":"                if (property.kind !== 'init') {","missing":[{"startCol":20,"endCol":44}]},"2490":{"partial":false,"source":"                    throwError({}, Messages.InvalidLHSInAssignment);","missing":[{"startCol":20,"endCol":67}]},"2492":{"partial":false,"source":"                reinterpretAsAssignmentBindingPattern(property.value);","missing":[{"startCol":16,"endCol":69}]},"2494":{"partial":false,"source":"        } else if (expr.type === Syntax.ArrayExpression) {","missing":[{"startCol":19,"endCol":55}]},"2495":{"partial":false,"source":"            expr.type = Syntax.ArrayPattern;","missing":[{"startCol":12,"endCol":44}]},"2496":{"partial":false,"source":"            for (i = 0, len = expr.elements.length; i < len; i += 1) {","missing":[{"startCol":52,"endCol":59}]},"2497":{"partial":false,"source":"                element = expr.elements[i];","missing":[{"startCol":16,"endCol":43}]},"2499":{"partial":false,"source":"                    reinterpretAsAssignmentBindingPattern(element);","missing":[{"startCol":20,"endCol":66}]},"2502":{"partial":false,"source":"        } else if (expr.type === Syntax.Identifier) {","missing":[{"startCol":19,"endCol":50}]},"2503":{"partial":false,"source":"            if (isRestrictedWord(expr.name)) {","missing":[{"startCol":16,"endCol":43}]},"2504":{"partial":false,"source":"                throwError({}, Messages.InvalidLHSInAssignment);","missing":[{"startCol":16,"endCol":63}]},"2507":{"partial":false,"source":"            if (expr.type !== Syntax.MemberExpression && expr.type !== Syntax.CallExpression && expr.type !== Syntax.NewExpression) {","missing":[{"startCol":16,"endCol":53},{"startCol":57,"endCol":92},{"startCol":96,"endCol":130}]},"2508":{"partial":false,"source":"                throwError({}, Messages.InvalidLHSInAssignment);","missing":[{"startCol":16,"endCol":63}]},"2514":{"partial":false,"source":"        var i, len, param, paramSet;","missing":[{"startCol":8,"endCol":36}]},"2515":{"partial":false,"source":"        assert(expr.type === Syntax.SequenceExpression);","missing":[{"startCol":8,"endCol":55},{"startCol":15,"endCol":54}]},"2517":{"partial":false,"source":"        paramSet = {};","missing":[{"startCol":8,"endCol":22}]},"2519":{"partial":false,"source":"        for (i = 0, len = expr.expressions.length; i < len; i += 1) {","missing":[{"startCol":51,"endCol":58}]},"2520":{"partial":false,"source":"            param = expr.expressions[i];","missing":[{"startCol":12,"endCol":40}]},"2521":{"partial":false,"source":"            if (param.type !== Syntax.Identifier) {","missing":[{"startCol":16,"endCol":48}]},"2522":{"partial":false,"source":"                return null;","missing":[{"startCol":16,"endCol":28}]},"2524":{"partial":false,"source":"            if (isRestrictedWord(param.name)) {","missing":[{"startCol":16,"endCol":44}]},"2525":{"partial":false,"source":"                throwError({}, Messages.StrictParamName);","missing":[{"startCol":16,"endCol":56}]},"2527":{"partial":false,"source":"            if (Object.prototype.hasOwnProperty.call(paramSet, param.name)) {","missing":[{"startCol":16,"endCol":74}]},"2528":{"partial":false,"source":"                throwError({}, Messages.StrictParamDupe);","missing":[{"startCol":16,"endCol":56}]},"2530":{"partial":false,"source":"            paramSet[param.name] = true;","missing":[{"startCol":12,"endCol":40}]},"2532":{"partial":false,"source":"        return expr.expressions;","missing":[{"startCol":8,"endCol":32}]},"2536":{"partial":false,"source":"        var previousStrict, previousYieldAllowed, body;","missing":[{"startCol":8,"endCol":55}]},"2538":{"partial":false,"source":"        expect('=>');","missing":[{"startCol":8,"endCol":20}]},"2540":{"partial":false,"source":"        previousStrict = strict;","missing":[{"startCol":8,"endCol":32}]},"2541":{"partial":false,"source":"        previousYieldAllowed = yieldAllowed;","missing":[{"startCol":8,"endCol":44}]},"2542":{"partial":false,"source":"        strict = true;","missing":[{"startCol":8,"endCol":22}]},"2543":{"partial":false,"source":"        yieldAllowed = false;","missing":[{"startCol":8,"endCol":29}]},"2544":{"partial":false,"source":"        body = parseConciseBody();","missing":[{"startCol":8,"endCol":34},{"startCol":15,"endCol":33}]},"2545":{"partial":false,"source":"        strict = previousStrict;","missing":[{"startCol":8,"endCol":32}]},"2546":{"partial":false,"source":"        yieldAllowed = previousYieldAllowed;","missing":[{"startCol":8,"endCol":44}]},"2548":{"partial":false,"source":"        return {","missing":[{}]},"2549":{"partial":false,"source":"            type: Syntax.ArrowFunctionExpression,","missing":[{}]},"2550":{"partial":false,"source":"            id: null,","missing":[{}]},"2551":{"partial":false,"source":"            params: param,","missing":[{}]},"2552":{"partial":false,"source":"            defaults: [],","missing":[{}]},"2553":{"partial":false,"source":"            body: body,","missing":[{}]},"2554":{"partial":false,"source":"            rest: null,","missing":[{}]},"2555":{"partial":false,"source":"            generator: false,","missing":[{}]},"2556":{"partial":false,"source":"            expression: body.type !== Syntax.BlockStatement","missing":[{"startCol":24,"endCol":59},{}]},"2557":{"partial":false,"source":"        };","missing":[{}]},"2564":{"partial":false,"source":"            return parseYieldExpression();","missing":[{"startCol":12,"endCol":42},{"startCol":19,"endCol":41}]},"2572":{"partial":false,"source":"                lex();","missing":[{"startCol":16,"endCol":21}]},"2573":{"partial":false,"source":"                lex();","missing":[{"startCol":16,"endCol":21}]},"2574":{"partial":false,"source":"                if (!match('=>')) {","missing":[{"startCol":21,"endCol":32}]},"2575":{"partial":false,"source":"                    throwUnexpected(lex());","missing":[{"startCol":20,"endCol":42},{"startCol":36,"endCol":41}]},"2577":{"partial":false,"source":"                return parseArrowFunctionExpression([]);","missing":[{"startCol":16,"endCol":56},{"startCol":23,"endCol":55}]},"2585":{"partial":false,"source":"            if (expr.type === Syntax.Identifier) {","missing":[{"startCol":16,"endCol":47}]},"2586":{"partial":false,"source":"                if (state.parenthesizedCount === oldParenthesizedCount || state.parenthesizedCount === (oldParenthesizedCount + 1)) {","missing":[{"startCol":20,"endCol":70},{"startCol":74,"endCol":130},{"startCol":103,"endCol":130}]},"2587":{"partial":false,"source":"                    if (isRestrictedWord(expr.name)) {","missing":[{"startCol":24,"endCol":51}]},"2588":{"partial":false,"source":"                        throwError({}, Messages.StrictParamName);","missing":[{"startCol":24,"endCol":64}]},"2590":{"partial":false,"source":"                    return parseArrowFunctionExpression([ expr ]);","missing":[{"startCol":20,"endCol":66},{"startCol":27,"endCol":65}]},"2592":{"partial":false,"source":"            } else if (expr.type === Syntax.SequenceExpression) {","missing":[{"startCol":23,"endCol":62}]},"2593":{"partial":false,"source":"                if (state.parenthesizedCount === (oldParenthesizedCount + 1)) {","missing":[{"startCol":20,"endCol":76},{"startCol":49,"endCol":76}]},"2594":{"partial":false,"source":"                    coverFormalsList = reinterpretAsCoverFormalsList(expr);","missing":[{"startCol":20,"endCol":75},{"startCol":39,"endCol":74}]},"2596":{"partial":false,"source":"                        return parseArrowFunctionExpression(coverFormalsList);","missing":[{"startCol":24,"endCol":78},{"startCol":31,"endCol":77}]},"2610":{"partial":false,"source":"                reinterpretAsAssignmentBindingPattern(expr);","missing":[{"startCol":16,"endCol":59}]},"2703":{"partial":false,"source":"            id = parseObjectInitialiser();","missing":[{"startCol":12,"endCol":42},{"startCol":17,"endCol":41}]},"2704":{"partial":false,"source":"            reinterpretAsAssignmentBindingPattern(id);","missing":[{"startCol":12,"endCol":53}]},"2784":{"partial":false,"source":"        var result, id;","missing":[{"startCol":8,"endCol":23}]},"2786":{"partial":false,"source":"        result = {","missing":[{}]},"2787":{"partial":false,"source":"            type: Syntax.Path,","missing":[{}]},"2788":{"partial":false,"source":"            body: []","missing":[{}]},"2789":{"partial":false,"source":"        };","missing":[{}]},"2792":{"partial":false,"source":"            id = parseVariableIdentifier();","missing":[{"startCol":12,"endCol":43},{"startCol":17,"endCol":42}]},"2793":{"partial":false,"source":"            result.body.push(id);","missing":[{"startCol":12,"endCol":32}]},"2794":{"partial":false,"source":"            if (!match('.')) {","missing":[{"startCol":17,"endCol":27}]},"2797":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"2800":{"partial":false,"source":"        return result;","missing":[{"startCol":8,"endCol":22}]},"2804":{"partial":false,"source":"        expect('*');","missing":[{"startCol":8,"endCol":19}]},"2805":{"partial":false,"source":"        return {","missing":[{}]},"2806":{"partial":false,"source":"            type: Syntax.Glob","missing":[{}]},"2807":{"partial":false,"source":"        };","missing":[{}]},"2811":{"partial":false,"source":"        var id, token, declaration;","missing":[{"startCol":8,"endCol":35}]},"2813":{"partial":false,"source":"        lex();","missing":[{"startCol":8,"endCol":13}]},"2815":{"partial":false,"source":"        id = parseVariableIdentifier();","missing":[{"startCol":8,"endCol":39},{"startCol":13,"endCol":38}]},"2817":{"partial":false,"source":"        if (match('{')) {","missing":[{"startCol":12,"endCol":22}]},"2818":{"partial":false,"source":"            return {","missing":[{}]},"2819":{"partial":false,"source":"                type: Syntax.ModuleDeclaration,","missing":[{}]},"2820":{"partial":false,"source":"                id: id,","missing":[{}]},"2821":{"partial":false,"source":"                body: parseModuleBlock()","missing":[{"startCol":22,"endCol":40},{}]},"2822":{"partial":false,"source":"            };","missing":[{}]},"2825":{"partial":false,"source":"        expect('=');","missing":[{"startCol":8,"endCol":19}]},"2827":{"partial":false,"source":"        token = lookahead();","missing":[{"startCol":8,"endCol":28},{"startCol":16,"endCol":27}]},"2828":{"partial":false,"source":"        if (token.type === Token.StringLiteral) {","missing":[{"startCol":12,"endCol":46}]},"2829":{"partial":false,"source":"            declaration = {","missing":[{}]},"2830":{"partial":false,"source":"                type: Syntax.ModuleDeclaration,","missing":[{}]},"2831":{"partial":false,"source":"                id: id,","missing":[{}]},"2832":{"partial":false,"source":"                from: parsePrimaryExpression()","missing":[{},{"startCol":22,"endCol":46}]},"2833":{"partial":false,"source":"            };","missing":[{}]},"2835":{"partial":false,"source":"            declaration = {","missing":[{}]},"2836":{"partial":false,"source":"                type: Syntax.ModuleDeclaration,","missing":[{}]},"2837":{"partial":false,"source":"                id: id,","missing":[{}]},"2838":{"partial":false,"source":"                from: parsePath()","missing":[{},{"startCol":22,"endCol":33}]},"2839":{"partial":false,"source":"            };","missing":[{}]},"2842":{"partial":false,"source":"        consumeSemicolon();","missing":[{"startCol":8,"endCol":26}]},"2844":{"partial":false,"source":"        return declaration;","missing":[{"startCol":8,"endCol":27}]},"2848":{"partial":false,"source":"        var specifier;","missing":[{"startCol":8,"endCol":22}]},"2850":{"partial":false,"source":"        specifier = {","missing":[{}]},"2851":{"partial":false,"source":"            type: Syntax.ExportSpecifier,","missing":[{}]},"2852":{"partial":false,"source":"            id: parseVariableIdentifier(),","missing":[{"startCol":16,"endCol":41},{}]},"2853":{"partial":false,"source":"            from: null","missing":[{}]},"2854":{"partial":false,"source":"        };","missing":[{}]},"2856":{"partial":false,"source":"        if (match(':')) {","missing":[{"startCol":12,"endCol":22}]},"2857":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"2858":{"partial":false,"source":"            specifier.from = parsePath();","missing":[{"startCol":12,"endCol":41},{"startCol":29,"endCol":40}]},"2861":{"partial":false,"source":"        return specifier;","missing":[{"startCol":8,"endCol":25}]},"2865":{"partial":false,"source":"        var specifier, specifiers;","missing":[{"startCol":8,"endCol":34}]},"2867":{"partial":false,"source":"        if (match('{')) {","missing":[{"startCol":12,"endCol":22}]},"2868":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"2869":{"partial":false,"source":"            specifiers = [];","missing":[{"startCol":12,"endCol":28}]},"2872":{"partial":false,"source":"                specifiers.push(parseExportSpecifierSetProperty());","missing":[{"startCol":16,"endCol":66},{"startCol":32,"endCol":65}]},"2873":{"partial":false,"source":"            } while (match(',') && lex());","missing":[{"startCol":21,"endCol":31},{"startCol":35,"endCol":40}]},"2875":{"partial":false,"source":"            expect('}');","missing":[{"startCol":12,"endCol":23}]},"2877":{"partial":false,"source":"            return {","missing":[{}]},"2878":{"partial":false,"source":"                type: Syntax.ExportSpecifierSet,","missing":[{}]},"2879":{"partial":false,"source":"                specifiers: specifiers","missing":[{}]},"2880":{"partial":false,"source":"            };","missing":[{}]},"2883":{"partial":false,"source":"        if (match('*')) {","missing":[{"startCol":12,"endCol":22}]},"2884":{"partial":false,"source":"            specifier = {","missing":[{}]},"2885":{"partial":false,"source":"                type: Syntax.ExportSpecifier,","missing":[{}]},"2886":{"partial":false,"source":"                id: parseGlob(),","missing":[{"startCol":20,"endCol":31},{}]},"2887":{"partial":false,"source":"                from: null","missing":[{}]},"2888":{"partial":false,"source":"            };","missing":[{}]},"2890":{"partial":false,"source":"            if (matchContextualKeyword('from')) {","missing":[{"startCol":16,"endCol":46}]},"2891":{"partial":false,"source":"                lex();","missing":[{"startCol":16,"endCol":21}]},"2892":{"partial":false,"source":"                specifier.from = parsePath();","missing":[{"startCol":16,"endCol":45},{"startCol":33,"endCol":44}]},"2895":{"partial":false,"source":"            specifier = {","missing":[{}]},"2896":{"partial":false,"source":"                type: Syntax.ExportSpecifier,","missing":[{}]},"2897":{"partial":false,"source":"                id: parseVariableIdentifier(),","missing":[{"startCol":20,"endCol":45},{}]},"2898":{"partial":false,"source":"                from: null","missing":[{}]},"2899":{"partial":false,"source":"            };","missing":[{}]},"2901":{"partial":false,"source":"        return specifier;","missing":[{"startCol":8,"endCol":25}]},"2905":{"partial":false,"source":"        var token, specifiers;","missing":[{"startCol":8,"endCol":30}]},"2907":{"partial":false,"source":"        expectKeyword('export');","missing":[{"startCol":8,"endCol":31}]},"2909":{"partial":false,"source":"        token = lookahead();","missing":[{"startCol":8,"endCol":28},{"startCol":16,"endCol":27}]},"2911":{"partial":false,"source":"        if (token.type === Token.Keyword || (token.type === Token.Identifier && token.value === 'module')) {","missing":[{"startCol":12,"endCol":40},{"startCol":44,"endCol":105},{"startCol":45,"endCol":76},{"startCol":80,"endCol":104}]},"2914":{"partial":false,"source":"                return {","missing":[{}]},"2915":{"partial":false,"source":"                    type: Syntax.ExportDeclaration,","missing":[{}]},"2916":{"partial":false,"source":"                    declaration: parseFunctionDeclaration()","missing":[{"startCol":33,"endCol":59},{}]},"2917":{"partial":false,"source":"                };","missing":[{}]},"2919":{"partial":false,"source":"                return {","missing":[{}]},"2920":{"partial":false,"source":"                    type: Syntax.ExportDeclaration,","missing":[{}]},"2921":{"partial":false,"source":"                    declaration: parseModuleDeclaration()","missing":[{"startCol":33,"endCol":57},{}]},"2922":{"partial":false,"source":"                };","missing":[{}]},"2925":{"partial":false,"source":"                return {","missing":[{}]},"2926":{"partial":false,"source":"                    type: Syntax.ExportDeclaration,","missing":[{}]},"2927":{"partial":false,"source":"                    declaration: parseConstLetDeclaration(token.value)","missing":[{},{"startCol":33,"endCol":70}]},"2928":{"partial":false,"source":"                };","missing":[{}]},"2930":{"partial":false,"source":"                return {","missing":[{}]},"2931":{"partial":false,"source":"                    type: Syntax.ExportDeclaration,","missing":[{}]},"2932":{"partial":false,"source":"                    declaration: parseStatement()","missing":[{},{"startCol":33,"endCol":49}]},"2933":{"partial":false,"source":"                };","missing":[{}]},"2935":{"partial":false,"source":"            throwUnexpected(lex());","missing":[{"startCol":12,"endCol":34},{"startCol":28,"endCol":33}]},"2938":{"partial":false,"source":"        specifiers = [ parseExportSpecifier() ];","missing":[{"startCol":8,"endCol":48},{"startCol":23,"endCol":45}]},"2939":{"partial":false,"source":"        if (match(',')) {","missing":[{"startCol":12,"endCol":22}]},"2940":{"partial":false,"source":"            while (index < length) {","missing":[{"startCol":19,"endCol":33}]},"2941":{"partial":false,"source":"                if (!match(',')) {","missing":[{"startCol":21,"endCol":31}]},"2944":{"partial":false,"source":"                lex();","missing":[{"startCol":16,"endCol":21}]},"2945":{"partial":false,"source":"                specifiers.push(parseExportSpecifier());","missing":[{"startCol":16,"endCol":55},{"startCol":32,"endCol":54}]},"2949":{"partial":false,"source":"        consumeSemicolon();","missing":[{"startCol":8,"endCol":26}]},"2951":{"partial":false,"source":"        return {","missing":[{}]},"2952":{"partial":false,"source":"            type: Syntax.ExportDeclaration,","missing":[{}]},"2953":{"partial":false,"source":"            specifiers: specifiers","missing":[{}]},"2954":{"partial":false,"source":"        };","missing":[{}]},"2958":{"partial":false,"source":"        var specifiers, from;","missing":[{"startCol":8,"endCol":29}]},"2960":{"partial":false,"source":"        expectKeyword('import');","missing":[{"startCol":8,"endCol":31}]},"2962":{"partial":false,"source":"        if (match('*')) {","missing":[{"startCol":12,"endCol":22}]},"2963":{"partial":false,"source":"            specifiers = [parseGlob()];","missing":[{"startCol":12,"endCol":39},{"startCol":26,"endCol":37}]},"2964":{"partial":false,"source":"        } else if (match('{')) {","missing":[{"startCol":19,"endCol":29}]},"2965":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"2966":{"partial":false,"source":"            specifiers = [];","missing":[{"startCol":12,"endCol":28}]},"2969":{"partial":false,"source":"                specifiers.push(parseImportSpecifier());","missing":[{"startCol":16,"endCol":55},{"startCol":32,"endCol":54}]},"2970":{"partial":false,"source":"            } while (match(',') && lex());","missing":[{"startCol":21,"endCol":31},{"startCol":35,"endCol":40}]},"2972":{"partial":false,"source":"            expect('}');","missing":[{"startCol":12,"endCol":23}]},"2974":{"partial":false,"source":"            specifiers = [parseVariableIdentifier()];","missing":[{"startCol":12,"endCol":53},{"startCol":26,"endCol":51}]},"2977":{"partial":false,"source":"        if (!matchContextualKeyword('from')) {","missing":[{"startCol":13,"endCol":43}]},"2978":{"partial":false,"source":"            throwError({}, Messages.NoFromAfterImport);","missing":[{"startCol":12,"endCol":54}]},"2981":{"partial":false,"source":"        lex();","missing":[{"startCol":8,"endCol":13}]},"2983":{"partial":false,"source":"        if (lookahead().type === Token.StringLiteral) {","missing":[{"startCol":12,"endCol":52},{"startCol":21,"endCol":23}]},"2984":{"partial":false,"source":"            from = parsePrimaryExpression();","missing":[{"startCol":12,"endCol":44},{"startCol":19,"endCol":43}]},"2986":{"partial":false,"source":"            from = parsePath();","missing":[{"startCol":12,"endCol":31},{"startCol":19,"endCol":30}]},"2989":{"partial":false,"source":"        consumeSemicolon();","missing":[{"startCol":8,"endCol":26}]},"2991":{"partial":false,"source":"        return {","missing":[{}]},"2992":{"partial":false,"source":"            type: Syntax.ImportDeclaration,","missing":[{}]},"2993":{"partial":false,"source":"            specifiers: specifiers,","missing":[{}]},"2994":{"partial":false,"source":"            from: from","missing":[{}]},"2995":{"partial":false,"source":"        };","missing":[{}]},"2999":{"partial":false,"source":"        var specifier;","missing":[{"startCol":8,"endCol":22}]},"3001":{"partial":false,"source":"        specifier = {","missing":[{}]},"3002":{"partial":false,"source":"            type: Syntax.ImportSpecifier,","missing":[{}]},"3003":{"partial":false,"source":"            id: parseVariableIdentifier(),","missing":[{},{"startCol":16,"endCol":41}]},"3004":{"partial":false,"source":"            from: null","missing":[{}]},"3005":{"partial":false,"source":"        };","missing":[{}]},"3007":{"partial":false,"source":"        if (match(':')) {","missing":[{"startCol":12,"endCol":22}]},"3008":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"3009":{"partial":false,"source":"            specifier.from = parsePath();","missing":[{"startCol":12,"endCol":41},{"startCol":29,"endCol":40}]},"3012":{"partial":false,"source":"        return specifier;","missing":[{"startCol":8,"endCol":25}]},"3168":{"partial":false,"source":"                    operator = lex();","missing":[{"startCol":20,"endCol":37},{"startCol":31,"endCol":36}]},"3169":{"partial":false,"source":"                    left = init;","missing":[{"startCol":20,"endCol":32}]},"3170":{"partial":false,"source":"                    right = parseExpression();","missing":[{"startCol":20,"endCol":46},{"startCol":28,"endCol":45}]},"3171":{"partial":false,"source":"                    init = null;","missing":[{"startCol":20,"endCol":32}]},"3207":{"partial":false,"source":"            body: null","missing":[{}]},"3208":{"partial":false,"source":"        } else {","missing":[{}]},"3630":{"partial":false,"source":"                return parseClassDeclaration();","missing":[{"startCol":16,"endCol":47},{"startCol":23,"endCol":46}]},"3687":{"partial":false,"source":"            return parseAssignmentExpression();","missing":[{"startCol":12,"endCol":47},{"startCol":19,"endCol":46}]},"3766":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"3767":{"partial":false,"source":"            generator = true;","missing":[{"startCol":12,"endCol":29}]},"3837":{"partial":false,"source":"            throwError({}, Messages.NoYieldInGenerator);","missing":[{"startCol":12,"endCol":55}]},"3862":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"3863":{"partial":false,"source":"            generator = true;","missing":[{"startCol":12,"endCol":29}]},"3934":{"partial":false,"source":"            throwError({}, Messages.NoYieldInGenerator);","missing":[{"startCol":12,"endCol":55}]},"3953":{"partial":false,"source":"        var delegate, expr, previousYieldAllowed;","missing":[{"startCol":8,"endCol":49}]},"3955":{"partial":false,"source":"        expectKeyword('yield');","missing":[{"startCol":8,"endCol":30}]},"3958":{"partial":false,"source":"            throwErrorTolerant({}, Messages.IllegalYield);","missing":[{"startCol":12,"endCol":57}]},"3961":{"partial":false,"source":"        delegate = false;","missing":[{"startCol":8,"endCol":25}]},"3962":{"partial":false,"source":"        if (match('*')) {","missing":[{"startCol":12,"endCol":22}]},"3963":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"3964":{"partial":false,"source":"            delegate = true;","missing":[{"startCol":12,"endCol":28}]},"3968":{"partial":false,"source":"        previousYieldAllowed = yieldAllowed;","missing":[{"startCol":8,"endCol":44}]},"3969":{"partial":false,"source":"        yieldAllowed = false;","missing":[{"startCol":8,"endCol":29}]},"3970":{"partial":false,"source":"        expr = parseAssignmentExpression();","missing":[{"startCol":8,"endCol":43},{"startCol":15,"endCol":42}]},"3971":{"partial":false,"source":"        yieldAllowed = previousYieldAllowed;","missing":[{"startCol":8,"endCol":44}]},"3972":{"partial":false,"source":"        yieldFound = true;","missing":[{"startCol":8,"endCol":26}]},"3974":{"partial":false,"source":"        return {","missing":[{}]},"3975":{"partial":false,"source":"            type: Syntax.YieldExpression,","missing":[{}]},"3976":{"partial":false,"source":"            argument: expr,","missing":[{}]},"3977":{"partial":false,"source":"            delegate: delegate","missing":[{}]},"3978":{"partial":false,"source":"        };","missing":[{}]},"3984":{"partial":false,"source":"        var token, key, param;","missing":[{"startCol":8,"endCol":30}]},"3986":{"partial":false,"source":"        if (match('*')) {","missing":[{"startCol":12,"endCol":22}]},"3987":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"3988":{"partial":false,"source":"            return {","missing":[{}]},"3989":{"partial":false,"source":"                type: Syntax.MethodDefinition,","missing":[{}]},"3990":{"partial":false,"source":"                key: parseObjectPropertyKey(),","missing":[{},{"startCol":21,"endCol":45}]},"3991":{"partial":false,"source":"                value: parsePropertyMethodFunction({ generator: true }),","missing":[{},{"startCol":23,"endCol":71}]},"3992":{"partial":false,"source":"                kind: ''","missing":[{}]},"3993":{"partial":false,"source":"            };","missing":[{}]},"3996":{"partial":false,"source":"        token = lookahead();","missing":[{"startCol":8,"endCol":28},{"startCol":16,"endCol":27}]},"3997":{"partial":false,"source":"        key = parseObjectPropertyKey();","missing":[{"startCol":8,"endCol":39},{"startCol":14,"endCol":38}]},"3999":{"partial":false,"source":"        if (token.value === 'get' && !match('(')) {","missing":[{"startCol":12,"endCol":33},{"startCol":38,"endCol":48}]},"4000":{"partial":false,"source":"            key = parseObjectPropertyKey();","missing":[{"startCol":12,"endCol":43},{"startCol":18,"endCol":42}]},"4001":{"partial":false,"source":"            expect('(');","missing":[{"startCol":12,"endCol":23}]},"4002":{"partial":false,"source":"            expect(')');","missing":[{"startCol":12,"endCol":23}]},"4003":{"partial":false,"source":"            return {","missing":[{}]},"4004":{"partial":false,"source":"                type: Syntax.MethodDefinition,","missing":[{}]},"4005":{"partial":false,"source":"                key: key,","missing":[{}]},"4006":{"partial":false,"source":"                value: parsePropertyFunction([], { generator: false }),","missing":[{},{"startCol":23,"endCol":70}]},"4007":{"partial":false,"source":"                kind: 'get'","missing":[{}]},"4008":{"partial":false,"source":"            };","missing":[{}]},"4009":{"partial":false,"source":"        } else if (token.value === 'set' && !match('(')) {","missing":[{"startCol":19,"endCol":40},{"startCol":45,"endCol":55}]},"4010":{"partial":false,"source":"            key = parseObjectPropertyKey();","missing":[{"startCol":12,"endCol":43},{"startCol":18,"endCol":42}]},"4011":{"partial":false,"source":"            expect('(');","missing":[{"startCol":12,"endCol":23}]},"4012":{"partial":false,"source":"            token = lookahead();","missing":[{"startCol":12,"endCol":32},{"startCol":20,"endCol":31}]},"4013":{"partial":false,"source":"            param = [ parseVariableIdentifier() ];","missing":[{"startCol":12,"endCol":50},{"startCol":22,"endCol":47}]},"4014":{"partial":false,"source":"            expect(')');","missing":[{"startCol":12,"endCol":23}]},"4015":{"partial":false,"source":"            return {","missing":[{}]},"4016":{"partial":false,"source":"                type: Syntax.MethodDefinition,","missing":[{}]},"4017":{"partial":false,"source":"                key: key,","missing":[{}]},"4018":{"partial":false,"source":"                value: parsePropertyFunction(param, { generator: false, name: token }),","missing":[{"startCol":23,"endCol":86},{}]},"4019":{"partial":false,"source":"                kind: 'set'","missing":[{}]},"4020":{"partial":false,"source":"            };","missing":[{}]},"4022":{"partial":false,"source":"            return {","missing":[{}]},"4023":{"partial":false,"source":"                type: Syntax.MethodDefinition,","missing":[{}]},"4024":{"partial":false,"source":"                key: key,","missing":[{}]},"4025":{"partial":false,"source":"                value: parsePropertyMethodFunction({ generator: false }),","missing":[{},{"startCol":23,"endCol":72}]},"4026":{"partial":false,"source":"                kind: ''","missing":[{}]},"4027":{"partial":false,"source":"            };","missing":[{}]},"4032":{"partial":false,"source":"        if (match(';')) {","missing":[{"startCol":12,"endCol":22}]},"4033":{"partial":false,"source":"            lex();","missing":[{"startCol":12,"endCol":17}]},"4034":{"partial":false,"source":"            return;","missing":[{"startCol":12,"endCol":19}]},"4036":{"partial":false,"source":"            return parseMethodDefinition();","missing":[{"startCol":12,"endCol":43},{"startCol":19,"endCol":42}]},"4041":{"partial":false,"source":"        var classElement, classElements = [];","missing":[{"startCol":8,"endCol":45}]},"4043":{"partial":false,"source":"        expect('{');","missing":[{"startCol":8,"endCol":19}]},"4045":{"partial":false,"source":"        while (index < length) {","missing":[{"startCol":15,"endCol":29}]},"4046":{"partial":false,"source":"            if (match('}')) {","missing":[{"startCol":16,"endCol":26}]},"4049":{"partial":false,"source":"            classElement = parseClassElement();","missing":[{"startCol":12,"endCol":47},{"startCol":27,"endCol":46}]},"4050":{"partial":false,"source":"            if (typeof classElement !== 'undefined') {","missing":[{"startCol":16,"endCol":51}]},"4051":{"partial":false,"source":"                classElements.push(classElement);","missing":[{"startCol":16,"endCol":48}]},"4055":{"partial":false,"source":"        expect('}');","missing":[{"startCol":8,"endCol":19}]},"4057":{"partial":false,"source":"        return {","missing":[{}]},"4058":{"partial":false,"source":"            type: Syntax.ClassBody,","missing":[{}]},"4059":{"partial":false,"source":"            body: classElements","missing":[{}]},"4060":{"partial":false,"source":"        };","missing":[{}]},"4064":{"partial":false,"source":"        var id, body, previousYieldAllowed, superClass;","missing":[{"startCol":8,"endCol":55}]},"4066":{"partial":false,"source":"        expectKeyword('class');","missing":[{"startCol":8,"endCol":30}]},"4068":{"partial":false,"source":"        if (!matchKeyword('extends') && !match('{')) {","missing":[{"startCol":12,"endCol":51},{"startCol":13,"endCol":36},{"startCol":41,"endCol":51}]},"4069":{"partial":false,"source":"            id = parseVariableIdentifier();","missing":[{"startCol":12,"endCol":43},{"startCol":17,"endCol":42}]},"4072":{"partial":false,"source":"        if (matchKeyword('extends')) {","missing":[{"startCol":12,"endCol":35}]},"4073":{"partial":false,"source":"            expectKeyword('extends');","missing":[{"startCol":12,"endCol":36}]},"4074":{"partial":false,"source":"            previousYieldAllowed = yieldAllowed;","missing":[{"startCol":12,"endCol":48}]},"4075":{"partial":false,"source":"            yieldAllowed = false;","missing":[{"startCol":12,"endCol":33}]},"4076":{"partial":false,"source":"            superClass = parseAssignmentExpression();","missing":[{"startCol":12,"endCol":53},{"startCol":25,"endCol":52}]},"4077":{"partial":false,"source":"            yieldAllowed = previousYieldAllowed;","missing":[{"startCol":12,"endCol":48}]},"4080":{"partial":false,"source":"        body = parseClassBody();","missing":[{"startCol":8,"endCol":32},{"startCol":15,"endCol":31}]},"4081":{"partial":false,"source":"        return {","missing":[{}]},"4082":{"partial":false,"source":"            id: id,","missing":[{}]},"4083":{"partial":false,"source":"            type: Syntax.ClassExpression,","missing":[{}]},"4084":{"partial":false,"source":"            body: body,","missing":[{}]},"4085":{"partial":false,"source":"            superClass: superClass","missing":[{}]},"4086":{"partial":false,"source":"        };","missing":[{}]},"4090":{"partial":false,"source":"        var token, id, body, previousYieldAllowed, superClass;","missing":[{"startCol":8,"endCol":62}]},"4092":{"partial":false,"source":"        expectKeyword('class');","missing":[{"startCol":8,"endCol":30}]},"4094":{"partial":false,"source":"        token = lookahead();","missing":[{"startCol":8,"endCol":28},{"startCol":16,"endCol":27}]},"4095":{"partial":false,"source":"        id = parseVariableIdentifier();","missing":[{"startCol":8,"endCol":39},{"startCol":13,"endCol":38}]},"4097":{"partial":false,"source":"        if (matchKeyword('extends')) {","missing":[{"startCol":12,"endCol":35}]},"4098":{"partial":false,"source":"            expectKeyword('extends');","missing":[{"startCol":12,"endCol":36}]},"4099":{"partial":false,"source":"            previousYieldAllowed = yieldAllowed;","missing":[{"startCol":12,"endCol":48}]},"4100":{"partial":false,"source":"            yieldAllowed = false;","missing":[{"startCol":12,"endCol":33}]},"4101":{"partial":false,"source":"            superClass = parseAssignmentExpression();","missing":[{"startCol":12,"endCol":53},{"startCol":25,"endCol":52}]},"4102":{"partial":false,"source":"            yieldAllowed = previousYieldAllowed;","missing":[{"startCol":12,"endCol":48}]},"4105":{"partial":false,"source":"        body = parseClassBody();","missing":[{"startCol":8,"endCol":32},{"startCol":15,"endCol":31}]},"4106":{"partial":false,"source":"        return {","missing":[{}]},"4107":{"partial":false,"source":"            id: id,","missing":[{}]},"4108":{"partial":false,"source":"            type: Syntax.ClassDeclaration,","missing":[{}]},"4109":{"partial":false,"source":"            body: body,","missing":[{}]},"4110":{"partial":false,"source":"            superClass: superClass","missing":[{}]},"4111":{"partial":false,"source":"        };","missing":[{}]},"4142":{"partial":false,"source":"                return parseExportDeclaration();","missing":[{"startCol":16,"endCol":48},{"startCol":23,"endCol":47}]},"4144":{"partial":false,"source":"                return parseImportDeclaration();","missing":[{"startCol":16,"endCol":48},{"startCol":23,"endCol":47}]},"4148":{"partial":true,"source":"        if (token.value === 'module' && token.type === Token.Identifier) {","missing":[{"startCol":40,"endCol":71}]},"4149":{"partial":false,"source":"            lineNumber = token.lineNumber;","missing":[{"startCol":12,"endCol":42}]},"4150":{"partial":false,"source":"            token = lookahead2();","missing":[{"startCol":12,"endCol":33},{"startCol":20,"endCol":32}]},"4151":{"partial":false,"source":"            if (token.type === Token.Identifier && token.lineNumber === lineNumber) {","missing":[{"startCol":16,"endCol":47},{"startCol":51,"endCol":82}]},"4152":{"partial":false,"source":"                return parseModuleDeclaration();","missing":[{"startCol":16,"endCol":48},{"startCol":23,"endCol":47}]},"4198":{"partial":false,"source":"        return parseProgramElement();","missing":[{"startCol":8,"endCol":37},{"startCol":15,"endCol":36}]},"4202":{"partial":false,"source":"        var list = [],","missing":[{}]},"4203":{"partial":false,"source":"            statement;","missing":[{}]},"4205":{"partial":false,"source":"        while (index < length) {","missing":[{"startCol":15,"endCol":29}]},"4206":{"partial":false,"source":"            if (match('}')) {","missing":[{"startCol":16,"endCol":26}]},"4209":{"partial":false,"source":"            statement = parseModuleElement();","missing":[{"startCol":12,"endCol":45},{"startCol":24,"endCol":44}]},"4210":{"partial":false,"source":"            if (typeof statement === 'undefined') {","missing":[{"startCol":16,"endCol":48}]},"4213":{"partial":false,"source":"            list.push(statement);","missing":[{"startCol":12,"endCol":32}]},"4216":{"partial":false,"source":"        return list;","missing":[{"startCol":8,"endCol":20}]},"4220":{"partial":false,"source":"        var block;","missing":[{"startCol":8,"endCol":18}]},"4222":{"partial":false,"source":"        expect('{');","missing":[{"startCol":8,"endCol":19}]},"4224":{"partial":false,"source":"        block = parseModuleElements();","missing":[{"startCol":8,"endCol":38},{"startCol":16,"endCol":37}]},"4226":{"partial":false,"source":"        expect('}');","missing":[{"startCol":8,"endCol":19}]},"4228":{"partial":false,"source":"        return {","missing":[{}]},"4229":{"partial":false,"source":"            type: Syntax.BlockStatement,","missing":[{}]},"4230":{"partial":false,"source":"            body: block","missing":[{}]},"4231":{"partial":false,"source":"        };","missing":[{}]},"4809":{"partial":false,"source":"        var length = str.length,","missing":[{}]},"4810":{"partial":false,"source":"            result = [],","missing":[{}]},"4811":{"partial":false,"source":"            i;","missing":[{}]},"4812":{"partial":false,"source":"        for (i = 0; i < length; ++i) {","missing":[{"startCol":20,"endCol":30},{"startCol":32,"endCol":35}]},"4813":{"partial":false,"source":"            result[i] = str.charAt(i);","missing":[{"startCol":12,"endCol":38},{"startCol":24,"endCol":37}]},"4815":{"partial":false,"source":"        return result;","missing":[{"startCol":8,"endCol":22}]},"4863":{"partial":false,"source":"                if (code instanceof String) {","missing":[{"startCol":20,"endCol":42}]},"4864":{"partial":false,"source":"                    source = code.valueOf();","missing":[{"startCol":20,"endCol":44},{"startCol":29,"endCol":43}]},"4868":{"partial":false,"source":"                if (typeof source[0] === 'undefined') {","missing":[{"startCol":20,"endCol":52}]},"4869":{"partial":false,"source":"                    source = stringToArray(code);","missing":[{"startCol":20,"endCol":49},{"startCol":29,"endCol":48}]}},"source":"/*\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*jslint bitwise:true plusplus:true */\n/*global esprima:true, define:true, exports:true, window: true,\nthrowError: true, createLiteral: true, generateStatement: true,\nparseAssignmentExpression: true, parseBlock: true,\nparseClassExpression: true, parseClassDeclaration: true, parseExpression: true,\nparseFunctionDeclaration: true, parseFunctionExpression: true,\nparseFunctionSourceElements: true, parseVariableIdentifier: true,\nparseImportSpecifier: true,\nparseLeftHandSideExpression: true,\nparseStatement: true, parseSourceElement: true, parseModuleBlock: true, parseConciseBody: true,\nparseYieldExpression: true\n*/\n\n(function (factory) {\n    'use strict';\n\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,\n    // and plain browser loading,\n    if (typeof define === 'function' && define.amd) {\n        define(['exports'], factory);\n    } else if (typeof exports !== 'undefined') {\n        factory(exports);\n    } else {\n        factory((window.esprima = {}));\n    }\n}(function (exports) {\n    'use strict';\n\n    var Token,\n        TokenName,\n        Syntax,\n        PropertyKind,\n        Messages,\n        Regex,\n        source,\n        strict,\n        yieldAllowed,\n        yieldFound,\n        index,\n        lineNumber,\n        lineStart,\n        length,\n        buffer,\n        state,\n        extra;\n\n    Token = {\n        BooleanLiteral: 1,\n        EOF: 2,\n        Identifier: 3,\n        Keyword: 4,\n        NullLiteral: 5,\n        NumericLiteral: 6,\n        Punctuator: 7,\n        StringLiteral: 8,\n        Quasi: 9\n    };\n\n    TokenName = {};\n    TokenName[Token.BooleanLiteral] = 'Boolean';\n    TokenName[Token.EOF] = '<end>';\n    TokenName[Token.Identifier] = 'Identifier';\n    TokenName[Token.Keyword] = 'Keyword';\n    TokenName[Token.NullLiteral] = 'Null';\n    TokenName[Token.NumericLiteral] = 'Numeric';\n    TokenName[Token.Punctuator] = 'Punctuator';\n    TokenName[Token.StringLiteral] = 'String';\n\n    Syntax = {\n        ArrayExpression: 'ArrayExpression',\n        ArrayPattern: 'ArrayPattern',\n        ArrowFunctionExpression: 'ArrowFunctionExpression',\n        AssignmentExpression: 'AssignmentExpression',\n        BinaryExpression: 'BinaryExpression',\n        BlockStatement: 'BlockStatement',\n        BreakStatement: 'BreakStatement',\n        CallExpression: 'CallExpression',\n        CatchClause: 'CatchClause',\n        ClassBody: 'ClassBody',\n        ClassDeclaration: 'ClassDeclaration',\n        ClassExpression: 'ClassExpression',\n        MethodDefinition: 'MethodDefinition',\n        ClassHeritage: 'ClassHeritage',\n        ComprehensionBlock: 'ComprehensionBlock',\n        ComprehensionExpression: 'ComprehensionExpression',\n        ConditionalExpression: 'ConditionalExpression',\n        ContinueStatement: 'ContinueStatement',\n        DebuggerStatement: 'DebuggerStatement',\n        DoWhileStatement: 'DoWhileStatement',\n        EmptyStatement: 'EmptyStatement',\n        ExportDeclaration: 'ExportDeclaration',\n        ExportSpecifier: 'ExportSpecifier',\n        ExportSpecifierSet: 'ExportSpecifierSet',\n        ExpressionStatement: 'ExpressionStatement',\n        ForInStatement: 'ForInStatement',\n        ForOfStatement: 'ForOfStatement',\n        ForStatement: 'ForStatement',\n        FunctionDeclaration: 'FunctionDeclaration',\n        FunctionExpression: 'FunctionExpression',\n        Glob: 'Glob',\n        Identifier: 'Identifier',\n        IfStatement: 'IfStatement',\n        ImportDeclaration: 'ImportDeclaration',\n        ImportSpecifier: 'ImportSpecifier',\n        LabeledStatement: 'LabeledStatement',\n        Literal: 'Literal',\n        LogicalExpression: 'LogicalExpression',\n        MemberExpression: 'MemberExpression',\n        ModuleDeclaration: 'ModuleDeclaration',\n        NewExpression: 'NewExpression',\n        ObjectExpression: 'ObjectExpression',\n        ObjectPattern: 'ObjectPattern',\n        Path:  'Path',\n        Program: 'Program',\n        Property: 'Property',\n        QuasiElement: 'QuasiElement',\n        QuasiLiteral: 'QuasiLiteral',\n        ReturnStatement: 'ReturnStatement',\n        SequenceExpression: 'SequenceExpression',\n        SwitchCase: 'SwitchCase',\n        SwitchStatement: 'SwitchStatement',\n        TaggedQuasiExpression: 'TaggedQuasiExpression',\n        ThisExpression: 'ThisExpression',\n        ThrowStatement: 'ThrowStatement',\n        TryStatement: 'TryStatement',\n        UnaryExpression: 'UnaryExpression',\n        UpdateExpression: 'UpdateExpression',\n        VariableDeclaration: 'VariableDeclaration',\n        VariableDeclarator: 'VariableDeclarator',\n        WhileStatement: 'WhileStatement',\n        WithStatement: 'WithStatement',\n        YieldExpression: 'YieldExpression'\n    };\n\n    PropertyKind = {\n        Data: 1,\n        Get: 2,\n        Set: 4\n    };\n\n    // Error messages should be identical to V8.\n    Messages = {\n        UnexpectedToken:  'Unexpected token %0',\n        UnexpectedNumber:  'Unexpected number',\n        UnexpectedString:  'Unexpected string',\n        UnexpectedIdentifier:  'Unexpected identifier',\n        UnexpectedReserved:  'Unexpected reserved word',\n        UnexpectedQuasi:  'Unexpected quasi %0',\n        UnexpectedEOS:  'Unexpected end of input',\n        NewlineAfterThrow:  'Illegal newline after throw',\n        InvalidRegExp: 'Invalid regular expression',\n        UnterminatedRegExp:  'Invalid regular expression: missing /',\n        InvalidLHSInAssignment:  'Invalid left-hand side in assignment',\n        InvalidLHSInForIn:  'Invalid left-hand side in for-in',\n        MultipleDefaultsInSwitch: 'More than one default clause in switch statement',\n        NoCatchOrFinally:  'Missing catch or finally after try',\n        UnknownLabel: 'Undefined label \\'%0\\'',\n        Redeclaration: '%0 \\'%1\\' has already been declared',\n        IllegalContinue: 'Illegal continue statement',\n        IllegalBreak: 'Illegal break statement',\n        IllegalReturn: 'Illegal return statement',\n        IllegalYield: 'Illegal yield expression',\n        StrictModeWith:  'Strict mode code may not include a with statement',\n        StrictCatchVariable:  'Catch variable may not be eval or arguments in strict mode',\n        StrictVarName:  'Variable name may not be eval or arguments in strict mode',\n        StrictParamName:  'Parameter name eval or arguments is not allowed in strict mode',\n        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',\n        StrictFunctionName:  'Function name may not be eval or arguments in strict mode',\n        StrictOctalLiteral:  'Octal literals are not allowed in strict mode.',\n        StrictDelete:  'Delete of an unqualified identifier in strict mode.',\n        StrictDuplicateProperty:  'Duplicate data property in object literal not allowed in strict mode',\n        AccessorDataProperty:  'Object literal may not have data and accessor property with the same name',\n        AccessorGetSet:  'Object literal may not have multiple get/set accessors with the same name',\n        StrictLHSAssignment:  'Assignment to eval or arguments is not allowed in strict mode',\n        StrictLHSPostfix:  'Postfix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictLHSPrefix:  'Prefix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictReservedWord:  'Use of future reserved word in strict mode',\n        NoFromAfterImport: 'Missing from after import',\n        NoYieldInGenerator: 'Missing yield in generator',\n        NoUnintializedConst: 'Const must be initialized',\n        ComprehensionRequiresBlock: 'Comprehension must have at least one block',\n        ComprehensionError:  'Comprehension Error'\n    };\n\n    // See also tools/generate-unicode-regex.py.\n    Regex = {\n        NonAsciiIdentifierStart: new RegExp('[\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]'),\n        NonAsciiIdentifierPart: new RegExp('[\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0300-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u0483-\\u0487\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0610-\\u061a\\u0620-\\u0669\\u066e-\\u06d3\\u06d5-\\u06dc\\u06df-\\u06e8\\u06ea-\\u06fc\\u06ff\\u0710-\\u074a\\u074d-\\u07b1\\u07c0-\\u07f5\\u07fa\\u0800-\\u082d\\u0840-\\u085b\\u08a0\\u08a2-\\u08ac\\u08e4-\\u08fe\\u0900-\\u0963\\u0966-\\u096f\\u0971-\\u0977\\u0979-\\u097f\\u0981-\\u0983\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bc-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09ce\\u09d7\\u09dc\\u09dd\\u09df-\\u09e3\\u09e6-\\u09f1\\u0a01-\\u0a03\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a59-\\u0a5c\\u0a5e\\u0a66-\\u0a75\\u0a81-\\u0a83\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abc-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ad0\\u0ae0-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3c-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5c\\u0b5d\\u0b5f-\\u0b63\\u0b66-\\u0b6f\\u0b71\\u0b82\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd0\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c58\\u0c59\\u0c60-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbc-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0cde\\u0ce0-\\u0ce3\\u0ce6-\\u0cef\\u0cf1\\u0cf2\\u0d02\\u0d03\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4e\\u0d57\\u0d60-\\u0d63\\u0d66-\\u0d6f\\u0d7a-\\u0d7f\\u0d82\\u0d83\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e01-\\u0e3a\\u0e40-\\u0e4e\\u0e50-\\u0e59\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb9\\u0ebb-\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0edc-\\u0edf\\u0f00\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e-\\u0f47\\u0f49-\\u0f6c\\u0f71-\\u0f84\\u0f86-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1049\\u1050-\\u109d\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u135d-\\u135f\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176c\\u176e-\\u1770\\u1772\\u1773\\u1780-\\u17d3\\u17d7\\u17dc\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a1b\\u1a20-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1aa7\\u1b00-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1bf3\\u1c00-\\u1c37\\u1c40-\\u1c49\\u1c4d-\\u1c7d\\u1cd0-\\u1cd2\\u1cd4-\\u1cf6\\u1d00-\\u1de6\\u1dfc-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u200c\\u200d\\u203f\\u2040\\u2054\\u2071\\u207f\\u2090-\\u209c\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d7f-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2de0-\\u2dff\\u2e2f\\u3005-\\u3007\\u3021-\\u302f\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u3099\\u309a\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua62b\\ua640-\\ua66f\\ua674-\\ua67d\\ua67f-\\ua697\\ua69f-\\ua6f1\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua827\\ua840-\\ua873\\ua880-\\ua8c4\\ua8d0-\\ua8d9\\ua8e0-\\ua8f7\\ua8fb\\ua900-\\ua92d\\ua930-\\ua953\\ua960-\\ua97c\\ua980-\\ua9c0\\ua9cf-\\ua9d9\\uaa00-\\uaa36\\uaa40-\\uaa4d\\uaa50-\\uaa59\\uaa60-\\uaa76\\uaa7a\\uaa7b\\uaa80-\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaef\\uaaf2-\\uaaf6\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff10-\\uff19\\uff21-\\uff3a\\uff3f\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]')\n    };\n\n    // Ensure the condition is true, otherwise throw an error.\n    // This is only to have a better contract semantic, i.e. another safety net\n    // to catch a logic error. The condition shall be fulfilled in normal case.\n    // Do NOT use this to enforce a certain condition on any user input.\n\n    function assert(condition, message) {\n        if (!condition) {\n            throw new Error('ASSERT: ' + message);\n        }\n    }\n\n    function sliceSource(from, to) {\n        return source.slice(from, to);\n    }\n\n    if (typeof 'esprima'[0] === 'undefined') {\n        sliceSource = function sliceArraySource(from, to) {\n            return source.slice(from, to).join('');\n        };\n    }\n\n    function isDecimalDigit(ch) {\n        return '0123456789'.indexOf(ch) >= 0;\n    }\n\n    function isHexDigit(ch) {\n        return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;\n    }\n\n    function isOctalDigit(ch) {\n        return '01234567'.indexOf(ch) >= 0;\n    }\n\n\n    // 7.2 White Space\n\n    function isWhiteSpace(ch) {\n        return (ch === ' ') || (ch === '\\u0009') || (ch === '\\u000B') ||\n            (ch === '\\u000C') || (ch === '\\u00A0') ||\n            (ch.charCodeAt(0) >= 0x1680 &&\n             '\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\uFEFF'.indexOf(ch) >= 0);\n    }\n\n    // 7.3 Line Terminators\n\n    function isLineTerminator(ch) {\n        return (ch === '\\n' || ch === '\\r' || ch === '\\u2028' || ch === '\\u2029');\n    }\n\n    // 7.6 Identifier Names and Identifiers\n\n    function isIdentifierStart(ch) {\n        return (ch === '$') || (ch === '_') || (ch === '\\\\') ||\n            (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') ||\n            ((ch.charCodeAt(0) >= 0x80) && Regex.NonAsciiIdentifierStart.test(ch));\n    }\n\n    function isIdentifierPart(ch) {\n        return (ch === '$') || (ch === '_') || (ch === '\\\\') ||\n            (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') ||\n            ((ch >= '0') && (ch <= '9')) ||\n            ((ch.charCodeAt(0) >= 0x80) && Regex.NonAsciiIdentifierPart.test(ch));\n    }\n\n    // 7.6.1.2 Future Reserved Words\n\n    function isFutureReservedWord(id) {\n        switch (id) {\n\n        // Future reserved words.\n        case 'class':\n        case 'enum':\n        case 'export':\n        case 'extends':\n        case 'import':\n        case 'super':\n            return true;\n        }\n\n        return false;\n    }\n\n    function isStrictModeReservedWord(id) {\n        switch (id) {\n\n        // Strict Mode reserved words.\n        case 'implements':\n        case 'interface':\n        case 'package':\n        case 'private':\n        case 'protected':\n        case 'public':\n        case 'static':\n        case 'yield':\n        case 'let':\n            return true;\n        }\n\n        return false;\n    }\n\n    function isRestrictedWord(id) {\n        return id === 'eval' || id === 'arguments';\n    }\n\n    // 7.6.1.1 Keywords\n\n    function isKeyword(id) {\n        var keyword = false;\n        switch (id.length) {\n        case 2:\n            keyword = (id === 'if') || (id === 'in') || (id === 'do');\n            break;\n        case 3:\n            keyword = (id === 'var') || (id === 'for') || (id === 'new') || (id === 'try');\n            break;\n        case 4:\n            keyword = (id === 'this') || (id === 'else') || (id === 'case') || (id === 'void') || (id === 'with');\n            break;\n        case 5:\n            keyword = (id === 'while') || (id === 'break') || (id === 'catch') || (id === 'throw');\n            break;\n        case 6:\n            keyword = (id === 'return') || (id === 'typeof') || (id === 'delete') || (id === 'switch');\n            break;\n        case 7:\n            keyword = (id === 'default') || (id === 'finally');\n            break;\n        case 8:\n            keyword = (id === 'function') || (id === 'continue') || (id === 'debugger');\n            break;\n        case 10:\n            keyword = (id === 'instanceof');\n            break;\n        }\n\n        if (keyword) {\n            return true;\n        }\n\n        switch (id) {\n        // Future reserved words.\n        // 'const' is specialized as Keyword in V8.\n        case 'const':\n            return true;\n\n        // For compatiblity to SpiderMonkey and ES.next\n        case 'yield':\n        case 'let':\n            return true;\n        }\n\n        if (strict && isStrictModeReservedWord(id)) {\n            return true;\n        }\n\n        return isFutureReservedWord(id);\n    }\n\n    // Return the next character and move forward.\n\n    function nextChar() {\n        return source[index++];\n    }\n\n    // 7.4 Comments\n\n    function skipComment() {\n        var ch, blockComment, lineComment;\n\n        blockComment = false;\n        lineComment = false;\n\n        while (index < length) {\n            ch = source[index];\n\n            if (lineComment) {\n                ch = nextChar();\n                if (isLineTerminator(ch)) {\n                    lineComment = false;\n                    if (ch === '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                    ++lineNumber;\n                    lineStart = index;\n                }\n            } else if (blockComment) {\n                if (isLineTerminator(ch)) {\n                    if (ch === '\\r' && source[index + 1] === '\\n') {\n                        ++index;\n                    }\n                    ++lineNumber;\n                    ++index;\n                    lineStart = index;\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    ch = nextChar();\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                    if (ch === '*') {\n                        ch = source[index];\n                        if (ch === '/') {\n                            ++index;\n                            blockComment = false;\n                        }\n                    }\n                }\n            } else if (ch === '/') {\n                ch = source[index + 1];\n                if (ch === '/') {\n                    index += 2;\n                    lineComment = true;\n                } else if (ch === '*') {\n                    index += 2;\n                    blockComment = true;\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    break;\n                }\n            } else if (isWhiteSpace(ch)) {\n                ++index;\n            } else if (isLineTerminator(ch)) {\n                ++index;\n                if (ch ===  '\\r' && source[index] === '\\n') {\n                    ++index;\n                }\n                ++lineNumber;\n                lineStart = index;\n            } else {\n                break;\n            }\n        }\n    }\n\n    function scanHexEscape(prefix) {\n        var i, len, ch, code = 0;\n\n        len = (prefix === 'u') ? 4 : 2;\n        for (i = 0; i < len; ++i) {\n            if (index < length && isHexDigit(source[index])) {\n                ch = nextChar();\n                code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n            } else {\n                return '';\n            }\n        }\n        return String.fromCharCode(code);\n    }\n\n    function scanUnicodeCodePointEscape() {\n        var ch, code, cu1, cu2;\n\n        ch = source[index];\n        code = 0;\n\n        // At least, one hex digit is required.\n        if (ch === '}') {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        while (index < length) {\n            ch = nextChar();\n            if (!isHexDigit(ch)) {\n                break;\n            }\n            code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n        }\n\n        if (code > 0x10FFFF || ch !== '}') {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        // UTF-16 Encoding\n        if (code <= 0xFFFF) {\n            return String.fromCharCode(code);\n        }\n        cu1 = ((code - 0x10000) >> 10) + 0xD800;\n        cu2 = ((code - 0x10000) & 1023) + 0xDC00;\n        return String.fromCharCode(cu1, cu2);\n    }\n\n    function scanIdentifier() {\n        var ch, start, id, restore;\n\n        ch = source[index];\n        if (!isIdentifierStart(ch)) {\n            return;\n        }\n\n        start = index;\n        if (ch === '\\\\') {\n            ++index;\n            if (source[index] !== 'u') {\n                return;\n            }\n            ++index;\n            restore = index;\n            ch = scanHexEscape('u');\n            if (ch) {\n                if (ch === '\\\\' || !isIdentifierStart(ch)) {\n                    return;\n                }\n                id = ch;\n            } else {\n                index = restore;\n                id = 'u';\n            }\n        } else {\n            id = nextChar();\n        }\n\n        while (index < length) {\n            ch = source[index];\n            if (!isIdentifierPart(ch)) {\n                break;\n            }\n            if (ch === '\\\\') {\n                ++index;\n                if (source[index] !== 'u') {\n                    return;\n                }\n                ++index;\n                restore = index;\n                ch = scanHexEscape('u');\n                if (ch) {\n                    if (ch === '\\\\' || !isIdentifierPart(ch)) {\n                        return;\n                    }\n                    id += ch;\n                } else {\n                    index = restore;\n                    id += 'u';\n                }\n            } else {\n                id += nextChar();\n            }\n        }\n\n        // There is no keyword or literal with only one character.\n        // Thus, it must be an identifier.\n        if (id.length === 1) {\n            return {\n                type: Token.Identifier,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (isKeyword(id)) {\n            return {\n                type: Token.Keyword,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // 7.8.1 Null Literals\n\n        if (id === 'null') {\n            return {\n                type: Token.NullLiteral,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // 7.8.2 Boolean Literals\n\n        if (id === 'true' || id === 'false') {\n            return {\n                type: Token.BooleanLiteral,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        return {\n            type: Token.Identifier,\n            value: id,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    // 7.7 Punctuators\n\n    function scanPunctuator() {\n        var start = index,\n            ch1 = source[index],\n            ch2,\n            ch3,\n            ch4;\n\n        // Check for most common single-character punctuators.\n\n        if (ch1 === ';' || ch1 === '{' || ch1 === '}') {\n            ++index;\n            return {\n                type: Token.Punctuator,\n                value: ch1,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === ',' || ch1 === '(' || ch1 === ')') {\n            ++index;\n            return {\n                type: Token.Punctuator,\n                value: ch1,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // Dot (.) can also start a floating-point number, hence the need\n        // to check the next character.\n\n        ch2 = source[index + 1];\n        if (ch1 === '.' && !isDecimalDigit(ch2)) {\n            return {\n                type: Token.Punctuator,\n                value: nextChar(),\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // Peek more characters.\n\n        ch3 = source[index + 2];\n        ch4 = source[index + 3];\n\n        // 4-character punctuator: >>>=\n\n        if (ch1 === '>' && ch2 === '>' && ch3 === '>') {\n            if (ch4 === '=') {\n                index += 4;\n                return {\n                    type: Token.Punctuator,\n                    value: '>>>=',\n                    lineNumber: lineNumber,\n                    lineStart: lineStart,\n                    range: [start, index]\n                };\n            }\n        }\n\n        // 3-character punctuators: === !== >>> <<= >>=\n\n        if (ch1 === '=' && ch2 === '=' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '===',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '!' && ch2 === '=' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '!==',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '>' && ch2 === '>' && ch3 === '>') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '>>>',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '<' && ch2 === '<' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '<<=',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '>' && ch2 === '>' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '>>=',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // 2-character punctuators: <= >= == != ++ -- << >> && ||\n        // += -= *= %= &= |= ^= /=\n\n        if (ch2 === '=') {\n            if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {\n                index += 2;\n                return {\n                    type: Token.Punctuator,\n                    value: ch1 + ch2,\n                    lineNumber: lineNumber,\n                    lineStart: lineStart,\n                    range: [start, index]\n                };\n            }\n        }\n\n        if (ch1 === ch2 && ('+-<>&|'.indexOf(ch1) >= 0)) {\n            if ('+-<>&|'.indexOf(ch2) >= 0) {\n                index += 2;\n                return {\n                    type: Token.Punctuator,\n                    value: ch1 + ch2,\n                    lineNumber: lineNumber,\n                    lineStart: lineStart,\n                    range: [start, index]\n                };\n            }\n        }\n\n        if (ch1 === '=' && ch2 === '>') {\n            index += 2;\n            return {\n                type: Token.Punctuator,\n                value: '=>',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // The remaining 1-character punctuators.\n\n        if ('[]<>+-*%&|^!~?:=/'.indexOf(ch1) >= 0) {\n            return {\n                type: Token.Punctuator,\n                value: nextChar(),\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n    }\n\n    // 7.8.3 Numeric Literals\n\n    function scanNumericLiteral() {\n        var number, start, ch, octal;\n\n        ch = source[index];\n        assert(isDecimalDigit(ch) || (ch === '.'),\n            'Numeric literal must start with a decimal digit or a decimal point');\n\n        start = index;\n        number = '';\n        if (ch !== '.') {\n            number = nextChar();\n            ch = source[index];\n\n            // Hex number starts with '0x'.\n            // Octal number starts with '0'.\n            // Octal number in ES6 starts with '0o'.\n            // Binary number in ES6 starts with '0b'.\n            if (number === '0') {\n                if (ch === 'x' || ch === 'X') {\n                    number += nextChar();\n                    while (index < length) {\n                        ch = source[index];\n                        if (!isHexDigit(ch)) {\n                            break;\n                        }\n                        number += nextChar();\n                    }\n\n                    if (number.length <= 2) {\n                        // only 0x\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n\n                    if (index < length) {\n                        ch = source[index];\n                        if (isIdentifierStart(ch)) {\n                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                        }\n                    }\n                    return {\n                        type: Token.NumericLiteral,\n                        value: parseInt(number, 16),\n                        lineNumber: lineNumber,\n                        lineStart: lineStart,\n                        range: [start, index]\n                    };\n                } else if (ch === 'b' || ch === 'B') {\n                    nextChar();\n                    number = '';\n\n                    while (index < length) {\n                        ch = source[index];\n                        if (ch !== '0' && ch !== '1') {\n                            break;\n                        }\n                        number += nextChar();\n                    }\n\n                    if (number.length === 0) {\n                        // only 0b or 0B\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n\n                    if (index < length) {\n                        ch = source[index];\n                        if (isIdentifierStart(ch) || isDecimalDigit(ch)) {\n                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                        }\n                    }\n                    return {\n                        type: Token.NumericLiteral,\n                        value: parseInt(number, 2),\n                        lineNumber: lineNumber,\n                        lineStart: lineStart,\n                        range: [start, index]\n                    };\n                } else if (ch === 'o' || ch === 'O' || isOctalDigit(ch)) {\n                    if (isOctalDigit(ch)) {\n                        octal = true;\n                        number = nextChar();\n                    } else {\n                        octal = false;\n                        nextChar();\n                        number = '';\n                    }\n\n                    while (index < length) {\n                        ch = source[index];\n                        if (!isOctalDigit(ch)) {\n                            break;\n                        }\n                        number += nextChar();\n                    }\n\n                    if (number.length === 0) {\n                        // only 0o or 0O\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n\n                    if (index < length) {\n                        ch = source[index];\n                        if (isIdentifierStart(ch) || isDecimalDigit(ch)) {\n                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                        }\n                    }\n\n                    return {\n                        type: Token.NumericLiteral,\n                        value: parseInt(number, 8),\n                        octal: octal,\n                        lineNumber: lineNumber,\n                        lineStart: lineStart,\n                        range: [start, index]\n                    };\n                }\n\n                // decimal number starts with '0' such as '09' is illegal.\n                if (isDecimalDigit(ch)) {\n                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                }\n            }\n\n            while (index < length) {\n                ch = source[index];\n                if (!isDecimalDigit(ch)) {\n                    break;\n                }\n                number += nextChar();\n            }\n        }\n\n        if (ch === '.') {\n            number += nextChar();\n            while (index < length) {\n                ch = source[index];\n                if (!isDecimalDigit(ch)) {\n                    break;\n                }\n                number += nextChar();\n            }\n        }\n\n        if (ch === 'e' || ch === 'E') {\n            number += nextChar();\n\n            ch = source[index];\n            if (ch === '+' || ch === '-') {\n                number += nextChar();\n            }\n\n            ch = source[index];\n            if (isDecimalDigit(ch)) {\n                number += nextChar();\n                while (index < length) {\n                    ch = source[index];\n                    if (!isDecimalDigit(ch)) {\n                        break;\n                    }\n                    number += nextChar();\n                }\n            } else {\n                ch = 'character ' + ch;\n                if (index >= length) {\n                    ch = '<end>';\n                }\n                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n            }\n        }\n\n        if (index < length) {\n            ch = source[index];\n            if (isIdentifierStart(ch)) {\n                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n            }\n        }\n\n        return {\n            type: Token.NumericLiteral,\n            value: parseFloat(number),\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    // 7.8.4 String Literals\n\n    function scanStringLiteral() {\n        var str = '', quote, start, ch, code, unescaped, restore, octal = false;\n\n        quote = source[index];\n        assert((quote === '\\'' || quote === '\"'),\n            'String literal must starts with a quote');\n\n        start = index;\n        ++index;\n\n        while (index < length) {\n            ch = nextChar();\n\n            if (ch === quote) {\n                quote = '';\n                break;\n            } else if (ch === '\\\\') {\n                ch = nextChar();\n                if (!isLineTerminator(ch)) {\n                    switch (ch) {\n                    case 'n':\n                        str += '\\n';\n                        break;\n                    case 'r':\n                        str += '\\r';\n                        break;\n                    case 't':\n                        str += '\\t';\n                        break;\n                    case 'u':\n                    case 'x':\n                        if (source[index] === '{') {\n                            ++index;\n                            str += scanUnicodeCodePointEscape();\n                        } else {\n                            restore = index;\n                            unescaped = scanHexEscape(ch);\n                            if (unescaped) {\n                                str += unescaped;\n                            } else {\n                                index = restore;\n                                str += ch;\n                            }\n                        }\n                        break;\n                    case 'b':\n                        str += '\\b';\n                        break;\n                    case 'f':\n                        str += '\\f';\n                        break;\n                    case 'v':\n                        str += '\\v';\n                        break;\n\n                    default:\n                        if (isOctalDigit(ch)) {\n                            code = '01234567'.indexOf(ch);\n\n                            // \\0 is not octal escape sequence\n                            if (code !== 0) {\n                                octal = true;\n                            }\n\n                            if (index < length && isOctalDigit(source[index])) {\n                                octal = true;\n                                code = code * 8 + '01234567'.indexOf(nextChar());\n\n                                // 3 digits are only allowed when string starts\n                                // with 0, 1, 2, 3\n                                if ('0123'.indexOf(ch) >= 0 &&\n                                        index < length &&\n                                        isOctalDigit(source[index])) {\n                                    code = code * 8 + '01234567'.indexOf(nextChar());\n                                }\n                            }\n                            str += String.fromCharCode(code);\n                        } else {\n                            str += ch;\n                        }\n                        break;\n                    }\n                } else {\n                    ++lineNumber;\n                    if (ch ===  '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                }\n            } else if (isLineTerminator(ch)) {\n                break;\n            } else {\n                str += ch;\n            }\n        }\n\n        if (quote !== '') {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        return {\n            type: Token.StringLiteral,\n            value: str,\n            octal: octal,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    function scanQuasi() {\n        var cooked = '', ch, start, terminated, tail, restore, unescaped, code, octal;\n\n        terminated = false;\n        tail = false;\n        start = index;\n\n        ++index;\n\n        while (index < length) {\n            ch = nextChar();\n            if (ch === '`') {\n                tail = true;\n                terminated = true;\n                break;\n            } else if (ch === '$') {\n                if (source[index] === '{') {\n                    ++index;\n                    terminated = true;\n                    break;\n                }\n                cooked += ch;\n            } else if (ch === '\\\\') {\n                ch = nextChar();\n                if (!isLineTerminator(ch)) {\n                    switch (ch) {\n                    case 'n':\n                        cooked += '\\n';\n                        break;\n                    case 'r':\n                        cooked += '\\r';\n                        break;\n                    case 't':\n                        cooked += '\\t';\n                        break;\n                    case 'u':\n                    case 'x':\n                        if (source[index] === '{') {\n                            ++index;\n                            cooked += scanUnicodeCodePointEscape();\n                        } else {\n                            restore = index;\n                            unescaped = scanHexEscape(ch);\n                            if (unescaped) {\n                                cooked += unescaped;\n                            } else {\n                                index = restore;\n                                cooked += ch;\n                            }\n                        }\n                        break;\n                    case 'b':\n                        cooked += '\\b';\n                        break;\n                    case 'f':\n                        cooked += '\\f';\n                        break;\n                    case 'v':\n                        cooked += '\\v';\n                        break;\n\n                    default:\n                        if (isOctalDigit(ch)) {\n                            code = '01234567'.indexOf(ch);\n\n                            // \\0 is not octal escape sequence\n                            if (code !== 0) {\n                                octal = true;\n                            }\n\n                            if (index < length && isOctalDigit(source[index])) {\n                                octal = true;\n                                code = code * 8 + '01234567'.indexOf(nextChar());\n\n                                // 3 digits are only allowed when string starts\n                                // with 0, 1, 2, 3\n                                if ('0123'.indexOf(ch) >= 0 &&\n                                        index < length &&\n                                        isOctalDigit(source[index])) {\n                                    code = code * 8 + '01234567'.indexOf(nextChar());\n                                }\n                            }\n                            cooked += String.fromCharCode(code);\n                        } else {\n                            cooked += ch;\n                        }\n                        break;\n                    }\n                } else {\n                    ++lineNumber;\n                    if (ch ===  '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                }\n            } else if (isLineTerminator(ch)) {\n                ++lineNumber;\n                if (ch ===  '\\r' && source[index] === '\\n') {\n                    ++index;\n                }\n            } else {\n                cooked += ch;\n            }\n        }\n\n        if (!terminated) {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        return {\n            type: Token.Quasi,\n            value: {\n                cooked: cooked,\n                raw: sliceSource(start + 1, index - ((tail) ? 1 : 2))\n            },\n            tail: tail,\n            octal: octal,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    function scanQuasiElement(option) {\n        var startsWith;\n\n        buffer = null;\n        skipComment();\n\n        startsWith = (option.head) ? '`' : '}';\n\n        if (source[index] !== startsWith) {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        return scanQuasi();\n    }\n\n    function scanRegExp() {\n        var str = '', ch, start, pattern, flags, value, classMarker = false, restore, terminated = false;\n\n        buffer = null;\n        skipComment();\n\n        start = index;\n        ch = source[index];\n        assert(ch === '/', 'Regular expression literal must start with a slash');\n        str = nextChar();\n\n        while (index < length) {\n            ch = nextChar();\n            str += ch;\n            if (classMarker) {\n                if (ch === ']') {\n                    classMarker = false;\n                }\n            } else {\n                if (ch === '\\\\') {\n                    ch = nextChar();\n                    // ECMA-262 7.8.5\n                    if (isLineTerminator(ch)) {\n                        throwError({}, Messages.UnterminatedRegExp);\n                    }\n                    str += ch;\n                } else if (ch === '/') {\n                    terminated = true;\n                    break;\n                } else if (ch === '[') {\n                    classMarker = true;\n                } else if (isLineTerminator(ch)) {\n                    throwError({}, Messages.UnterminatedRegExp);\n                }\n            }\n        }\n\n        if (!terminated) {\n            throwError({}, Messages.UnterminatedRegExp);\n        }\n\n        // Exclude leading and trailing slash.\n        pattern = str.substr(1, str.length - 2);\n\n        flags = '';\n        while (index < length) {\n            ch = source[index];\n            if (!isIdentifierPart(ch)) {\n                break;\n            }\n\n            ++index;\n            if (ch === '\\\\' && index < length) {\n                ch = source[index];\n                if (ch === 'u') {\n                    ++index;\n                    restore = index;\n                    ch = scanHexEscape('u');\n                    if (ch) {\n                        flags += ch;\n                        str += '\\\\u';\n                        for (; restore < index; ++restore) {\n                            str += source[restore];\n                        }\n                    } else {\n                        index = restore;\n                        flags += 'u';\n                        str += '\\\\u';\n                    }\n                } else {\n                    str += '\\\\';\n                }\n            } else {\n                flags += ch;\n                str += ch;\n            }\n        }\n\n        try {\n            value = new RegExp(pattern, flags);\n        } catch (e) {\n            throwError({}, Messages.InvalidRegExp);\n        }\n\n        return {\n            literal: str,\n            value: value,\n            range: [start, index]\n        };\n    }\n\n    function isIdentifierName(token) {\n        return token.type === Token.Identifier ||\n            token.type === Token.Keyword ||\n            token.type === Token.BooleanLiteral ||\n            token.type === Token.NullLiteral;\n    }\n\n    function advance() {\n        var ch, token;\n\n        skipComment();\n\n        if (index >= length) {\n            return {\n                type: Token.EOF,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [index, index]\n            };\n        }\n\n        token = scanPunctuator();\n        if (typeof token !== 'undefined') {\n            return token;\n        }\n\n        ch = source[index];\n\n        if (ch === '\\'' || ch === '\"') {\n            return scanStringLiteral();\n        }\n\n        if (ch === '.' || isDecimalDigit(ch)) {\n            return scanNumericLiteral();\n        }\n\n        if (ch === '`') {\n            return scanQuasi();\n        }\n\n        token = scanIdentifier();\n        if (typeof token !== 'undefined') {\n            return token;\n        }\n\n        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n    }\n\n    function lex() {\n        var token;\n\n        if (buffer) {\n            index = buffer.range[1];\n            lineNumber = buffer.lineNumber;\n            lineStart = buffer.lineStart;\n            token = buffer;\n            buffer = null;\n            return token;\n        }\n\n        buffer = null;\n        return advance();\n    }\n\n    function lookahead() {\n        var pos, line, start;\n\n        if (buffer !== null) {\n            return buffer;\n        }\n\n        pos = index;\n        line = lineNumber;\n        start = lineStart;\n        buffer = advance();\n        index = pos;\n        lineNumber = line;\n        lineStart = start;\n\n        return buffer;\n    }\n\n    function lookahead2() {\n        var adv, pos, line, start, result;\n\n        // If we are collecting the tokens, don't grab the next one yet.\n        adv = (typeof extra.advance === 'function') ? extra.advance : advance;\n\n        pos = index;\n        line = lineNumber;\n        start = lineStart;\n\n        // Scan for the next immediate token.\n        if (buffer === null) {\n            buffer = adv();\n        }\n        index = buffer.range[1];\n        lineNumber = buffer.lineNumber;\n        lineStart = buffer.lineStart;\n\n        // Grab the token right after.\n        result = adv();\n        index = pos;\n        lineNumber = line;\n        lineStart = start;\n\n        return result;\n    }\n\n    // Return true if there is a line terminator before the next token.\n\n    function peekLineTerminator() {\n        var pos, line, start, found;\n\n        pos = index;\n        line = lineNumber;\n        start = lineStart;\n        skipComment();\n        found = lineNumber !== line;\n        index = pos;\n        lineNumber = line;\n        lineStart = start;\n\n        return found;\n    }\n\n    // Throw an exception\n\n    function throwError(token, messageFormat) {\n        var error,\n            args = Array.prototype.slice.call(arguments, 2),\n            msg = messageFormat.replace(\n                /%(\\d)/g,\n                function (whole, index) {\n                    return args[index] || '';\n                }\n            );\n\n        if (typeof token.lineNumber === 'number') {\n            error = new Error('Line ' + token.lineNumber + ': ' + msg);\n            error.index = token.range[0];\n            error.lineNumber = token.lineNumber;\n            error.column = token.range[0] - lineStart + 1;\n        } else {\n            error = new Error('Line ' + lineNumber + ': ' + msg);\n            error.index = index;\n            error.lineNumber = lineNumber;\n            error.column = index - lineStart + 1;\n        }\n\n        throw error;\n    }\n\n    function throwErrorTolerant() {\n        try {\n            throwError.apply(null, arguments);\n        } catch (e) {\n            if (extra.errors) {\n                extra.errors.push(e);\n            } else {\n                throw e;\n            }\n        }\n    }\n\n\n    // Throw an exception because of the token.\n\n    function throwUnexpected(token) {\n        if (token.type === Token.EOF) {\n            throwError(token, Messages.UnexpectedEOS);\n        }\n\n        if (token.type === Token.NumericLiteral) {\n            throwError(token, Messages.UnexpectedNumber);\n        }\n\n        if (token.type === Token.StringLiteral) {\n            throwError(token, Messages.UnexpectedString);\n        }\n\n        if (token.type === Token.Identifier) {\n            throwError(token, Messages.UnexpectedIdentifier);\n        }\n\n        if (token.type === Token.Keyword) {\n            if (isFutureReservedWord(token.value)) {\n                throwError(token, Messages.UnexpectedReserved);\n            } else if (strict && isStrictModeReservedWord(token.value)) {\n                throwErrorTolerant(token, Messages.StrictReservedWord);\n                return;\n            }\n            throwError(token, Messages.UnexpectedToken, token.value);\n        }\n\n        if (token.type === Token.Quasi) {\n            throwError(token, Messages.UnexpectedQuasi, token.value.raw);\n        }\n\n        // BooleanLiteral, NullLiteral, or Punctuator.\n        throwError(token, Messages.UnexpectedToken, token.value);\n    }\n\n    // Expect the next token to match the specified punctuator.\n    // If not, an exception will be thrown.\n\n    function expect(value) {\n        var token = lex();\n        if (token.type !== Token.Punctuator || token.value !== value) {\n            throwUnexpected(token);\n        }\n    }\n\n    // Expect the next token to match the specified keyword.\n    // If not, an exception will be thrown.\n\n    function expectKeyword(keyword) {\n        var token = lex();\n        if (token.type !== Token.Keyword || token.value !== keyword) {\n            throwUnexpected(token);\n        }\n    }\n\n    // Return true if the next token matches the specified punctuator.\n\n    function match(value) {\n        var token = lookahead();\n        return token.type === Token.Punctuator && token.value === value;\n    }\n\n    // Return true if the next token matches the specified keyword\n\n    function matchKeyword(keyword) {\n        var token = lookahead();\n        return token.type === Token.Keyword && token.value === keyword;\n    }\n\n\n    // Return true if the next token matches the specified contextual keyword\n\n    function matchContextualKeyword(keyword) {\n        var token = lookahead();\n        return token.type === Token.Identifier && token.value === keyword;\n    }\n\n    // Return true if the next token is an assignment operator\n\n    function matchAssign() {\n        var token = lookahead(),\n            op = token.value;\n\n        if (token.type !== Token.Punctuator) {\n            return false;\n        }\n        return op === '=' ||\n            op === '*=' ||\n            op === '/=' ||\n            op === '%=' ||\n            op === '+=' ||\n            op === '-=' ||\n            op === '<<=' ||\n            op === '>>=' ||\n            op === '>>>=' ||\n            op === '&=' ||\n            op === '^=' ||\n            op === '|=';\n    }\n\n    function consumeSemicolon() {\n        var token, line;\n\n        // Catch the very common case first.\n        if (source[index] === ';') {\n            lex();\n            return;\n        }\n\n        line = lineNumber;\n        skipComment();\n        if (lineNumber !== line) {\n            return;\n        }\n\n        if (match(';')) {\n            lex();\n            return;\n        }\n\n        token = lookahead();\n        if (token.type !== Token.EOF && !match('}')) {\n            throwUnexpected(token);\n        }\n        return;\n    }\n\n    // Return true if provided expression is LeftHandSideExpression\n\n    function isLeftHandSide(expr) {\n        return expr.type === Syntax.Identifier || expr.type === Syntax.MemberExpression;\n    }\n\n    function isAssignableLeftHandSide(expr) {\n        return isLeftHandSide(expr) || expr.type === Syntax.ObjectPattern || expr.type === Syntax.ArrayPattern;\n    }\n\n    // 11.1.4 Array Initialiser\n\n    function parseArrayInitialiser() {\n        var elements = [];\n        var blocks = [];\n        var filter = null;\n        var token;\n        var tmp;\n        var possiblecomprehension = true;\n        var body;\n\n        expect('[');\n        while (!match(']')) {\n            token = lookahead();\n            switch (token.value) {\n                case 'for':\n                    if (! possiblecomprehension ) {\n                        throwError({},Messages.ComprehensionError);\n                    }\n                    matchKeyword('for');\n                    tmp = parseForStatement({ignore_body: true});\n                    tmp.type = Syntax.ComprehensionBlock;\n                    if ( tmp.left.kind ) { // can't be let or const\n                        throwError({},Messages.ComprehensionError);\n                    }\n                    blocks.push(tmp);\n                    break;\n                case 'if':\n                    if (! possiblecomprehension ) {\n                        throwError({},Messages.ComprehensionError);\n                    }\n                    expectKeyword('if');\n                    expect('(');\n                    filter = parseExpression();\n                    expect(')');\n                    break;\n                case ',':\n                    possiblecomprehension = false; // no longer allowed.\n                    lex();\n                    elements.push(null);\n                    break;\n                default:\n                    elements.push(parseAssignmentExpression());\n                    if (!(match(']') || matchKeyword('for') || matchKeyword('if'))) {\n                        expect(','); // this lexes.\n                        possiblecomprehension = false;\n                    }\n            }\n        }\n\n        expect(']');\n\n        if (filter && ! blocks.length){\n            throwError({},Messages.ComprehensionRequiresBlock)\n        }\n\n        if (blocks.length) {\n            if (elements.length != 1) {\n                throwError({},Messages.ComprehensionError)\n            }\n            return {\n                type:  Syntax.ComprehensionExpression,\n                filter: filter,\n                blocks: blocks,\n                body: elements[0]\n            }\n        } else {\n            return {\n                type: Syntax.ArrayExpression,\n                elements: elements\n            };\n        }\n    }\n\n    // 11.1.5 Object Initialiser\n\n    function parsePropertyFunction(param, options) {\n        var previousStrict, previousYieldAllowed, body;\n\n        previousStrict = strict;\n        previousYieldAllowed = yieldAllowed;\n        yieldAllowed = options.generator;\n        body = parseConciseBody();\n        if (options.name && strict && isRestrictedWord(param[0].name)) {\n            throwErrorTolerant(options.name, Messages.StrictParamName);\n        }\n        if (yieldAllowed && !yieldFound) {\n            throwError({}, Messages.NoYieldInGenerator);\n        }\n        strict = previousStrict;\n        yieldAllowed = previousYieldAllowed;\n\n        return {\n            type: Syntax.FunctionExpression,\n            id: null,\n            params: param,\n            defaults: [],\n            body: body,\n            rest: null,\n            generator: options.generator,\n            expression: body.type !== Syntax.BlockStatement\n        };\n    }\n\n    function parsePropertyMethodFunction(options) {\n        var token, previousStrict, param, params, paramSet, method;\n\n        previousStrict = strict;\n        strict = true;\n        params = [];\n\n        expect('(');\n\n        if (!match(')')) {\n            paramSet = {};\n            while (index < length) {\n                token = lookahead();\n                param = parseVariableIdentifier();\n                if (isRestrictedWord(token.value)) {\n                    throwError(token, Messages.StrictParamName);\n                }\n                if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                    throwError(token, Messages.StrictParamDupe);\n                }\n                params.push(param);\n                paramSet[param.name] = true;\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        method = parsePropertyFunction(params, { generator: options.generator });\n\n        strict = previousStrict;\n\n        return method;\n    }\n\n    function parseObjectPropertyKey() {\n        var token = lex();\n\n        // Note: This function is called only from parseObjectProperty(), where\n        // EOF and Punctuator tokens are already filtered out.\n\n        if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {\n            if (strict && token.octal) {\n                throwErrorTolerant(token, Messages.StrictOctalLiteral);\n            }\n            return createLiteral(token);\n        }\n\n        return {\n            type: Syntax.Identifier,\n            name: token.value\n        };\n    }\n\n    function parseObjectProperty() {\n        var token, key, id, param;\n\n        token = lookahead();\n\n        if (token.type === Token.Identifier) {\n\n            id = parseObjectPropertyKey();\n\n            // Property Assignment: Getter and Setter.\n\n            if (token.value === 'get' && !(match(':') || match('('))) {\n                key = parseObjectPropertyKey();\n                expect('(');\n                expect(')');\n                return {\n                    type: Syntax.Property,\n                    key: key,\n                    value: parsePropertyFunction([], { generator: false }),\n                    kind: 'get'\n                };\n            } else if (token.value === 'set' && !(match(':') || match('('))) {\n                key = parseObjectPropertyKey();\n                expect('(');\n                token = lookahead();\n                param = [ parseVariableIdentifier() ];\n                expect(')');\n                return {\n                    type: Syntax.Property,\n                    key: key,\n                    value: parsePropertyFunction(param, { generator: false, name: token }),\n                    kind: 'set'\n                };\n            } else {\n                if (match(':')) {\n                    lex();\n                    return {\n                        type: Syntax.Property,\n                        key: id,\n                        value: parseAssignmentExpression(),\n                        kind: 'init'\n                    };\n                } else if (match('(')) {\n                    return {\n                        type: Syntax.Property,\n                        key: id,\n                        value: parsePropertyMethodFunction({ generator: false }),\n                        kind: 'init',\n                        method: true\n                    };\n                } else {\n                    return {\n                        type: Syntax.Property,\n                        key: id,\n                        value: id,\n                        kind: 'init',\n                        shorthand: true\n                    };\n                }\n            }\n        } else if (token.type === Token.EOF || token.type === Token.Punctuator) {\n            if (!match('*')) {\n                throwUnexpected(token);\n            }\n            lex();\n\n            id = parseObjectPropertyKey();\n\n            if (!match('(')) {\n                throwUnexpected(lex());\n            }\n\n            return {\n                type: Syntax.Property,\n                key: id,\n                value: parsePropertyMethodFunction({ generator: true }),\n                kind: 'init',\n                method: true\n            };\n        } else {\n            key = parseObjectPropertyKey();\n            if (match(':')) {\n                lex();\n                return {\n                    type: Syntax.Property,\n                    key: key,\n                    value: parseAssignmentExpression(),\n                    kind: 'init'\n                };\n            } else if (match('(')) {\n                return {\n                    type: Syntax.Property,\n                    key: key,\n                    value: parsePropertyMethodFunction({ generator: false }),\n                    kind: 'init',\n                    method: true\n                };\n            } else {\n                return {\n                    type: Syntax.Property,\n                    key: key,\n                    value: key,\n                    kind: 'init',\n                    shorthand: true\n                };\n            }\n        }\n    }\n\n    function parseObjectInitialiser() {\n        var properties = [], property, name, kind, map = {}, toString = String;\n\n        expect('{');\n\n        while (!match('}')) {\n            property = parseObjectProperty();\n\n            if (property.key.type === Syntax.Identifier) {\n                name = property.key.name;\n            } else {\n                name = toString(property.key.value);\n            }\n            kind = (property.kind === 'init') ? PropertyKind.Data : (property.kind === 'get') ? PropertyKind.Get : PropertyKind.Set;\n            if (Object.prototype.hasOwnProperty.call(map, name)) {\n                if (map[name] === PropertyKind.Data) {\n                    if (strict && kind === PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.StrictDuplicateProperty);\n                    } else if (kind !== PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.AccessorDataProperty);\n                    }\n                } else {\n                    if (kind === PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.AccessorDataProperty);\n                    } else if (map[name] & kind) {\n                        throwErrorTolerant({}, Messages.AccessorGetSet);\n                    }\n                }\n                map[name] |= kind;\n            } else {\n                map[name] = kind;\n            }\n\n            properties.push(property);\n\n            if (!match('}')) {\n                expect(',');\n            }\n        }\n\n        expect('}');\n\n        return {\n            type: Syntax.ObjectExpression,\n            properties: properties\n        };\n    }\n\n    function parseQuasiElement(option) {\n        var token = scanQuasiElement(option);\n        if (strict && token.octal) {\n            throwError(token, Messages.StrictOctalLiteral);\n        }\n        return {\n            type: Syntax.QuasiElement,\n            value: {\n                raw: token.value.raw,\n                cooked: token.value.cooked\n            },\n            tail: token.tail\n        };\n    }\n\n    function parseQuasiLiteral() {\n        var quasi, quasis, expressions;\n\n        quasi = parseQuasiElement({ head: true });\n        quasis = [ quasi ];\n        expressions = [];\n\n        while (!quasi.tail) {\n            expressions.push(parseExpression());\n            quasi = parseQuasiElement({ head: false });\n            quasis.push(quasi);\n        }\n\n        return {\n            type: Syntax.QuasiLiteral,\n            quasis: quasis,\n            expressions: expressions\n        };\n    }\n\n    // 11.1 Primary Expressions\n\n    function parsePrimaryExpression() {\n        var expr,\n            token = lookahead(),\n            type = token.type;\n\n        if (type === Token.Identifier) {\n            return {\n                type: Syntax.Identifier,\n                name: lex().value\n            };\n        }\n\n        if (type === Token.StringLiteral || type === Token.NumericLiteral) {\n            if (strict && token.octal) {\n                throwErrorTolerant(token, Messages.StrictOctalLiteral);\n            }\n            return createLiteral(lex());\n        }\n\n        if (type === Token.Keyword) {\n            if (matchKeyword('this')) {\n                lex();\n                return {\n                    type: Syntax.ThisExpression\n                };\n            }\n\n            if (matchKeyword('function')) {\n                return parseFunctionExpression();\n            }\n\n            if (matchKeyword('class')) {\n                return parseClassExpression();\n            }\n\n            if (matchKeyword('super')) {\n                lex();\n                return {\n                    type: Syntax.Identifier,\n                    name: 'super'\n                };\n            }\n        }\n\n        if (type === Token.BooleanLiteral) {\n            lex();\n            token.value = (token.value === 'true');\n            return createLiteral(token);\n        }\n\n        if (type === Token.NullLiteral) {\n            lex();\n            token.value = null;\n            return createLiteral(token);\n        }\n\n        if (match('[')) {\n            return parseArrayInitialiser();\n        }\n\n        if (match('{')) {\n            return parseObjectInitialiser();\n        }\n\n        if (match('(')) {\n            lex();\n            state.lastParenthesized = expr = parseExpression();\n            state.parenthesizedCount += 1;\n            expect(')');\n            return expr;\n        }\n\n        if (match('/') || match('/=')) {\n            return createLiteral(scanRegExp());\n        }\n\n        if (type === Token.Quasi) {\n            return parseQuasiLiteral();\n        }\n\n        return throwUnexpected(lex());\n    }\n\n    // 11.2 Left-Hand-Side Expressions\n\n    function parseArguments() {\n        var args = [];\n\n        expect('(');\n\n        if (!match(')')) {\n            while (index < length) {\n                args.push(parseAssignmentExpression());\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        return args;\n    }\n\n    function parseNonComputedProperty() {\n        var token = lex();\n\n        if (!isIdentifierName(token)) {\n            throwUnexpected(token);\n        }\n\n        return {\n            type: Syntax.Identifier,\n            name: token.value\n        };\n    }\n\n    function parseNonComputedMember(object) {\n        return {\n            type: Syntax.MemberExpression,\n            computed: false,\n            object: object,\n            property: parseNonComputedProperty()\n        };\n    }\n\n    function parseComputedMember(object) {\n        var property, expr;\n\n        expect('[');\n        property = parseExpression();\n        expr = {\n            type: Syntax.MemberExpression,\n            computed: true,\n            object: object,\n            property: property\n        };\n        expect(']');\n        return expr;\n    }\n\n    function parseTaggedQuasi(tag) {\n        return {\n            type: Syntax.TaggedQuasiExpression,\n            tag: tag,\n            quasi: parseQuasiLiteral()\n        };\n    }\n\n    function parseCallMember(object) {\n        return {\n            type: Syntax.CallExpression,\n            callee: object,\n            'arguments': parseArguments()\n        };\n    }\n\n    function parseNewExpression() {\n        var expr;\n\n        expectKeyword('new');\n\n        expr = {\n            type: Syntax.NewExpression,\n            callee: parseLeftHandSideExpression(),\n            'arguments': []\n        };\n\n        if (match('(')) {\n            expr['arguments'] = parseArguments();\n        }\n\n        return expr;\n    }\n\n    function parseLeftHandSideExpressionAllowCall() {\n        var useNew, expr;\n\n        useNew = matchKeyword('new');\n        expr = useNew ? parseNewExpression() : parsePrimaryExpression();\n\n        while (index < length) {\n            if (match('.')) {\n                lex();\n                expr = parseNonComputedMember(expr);\n            } else if (match('[')) {\n                expr = parseComputedMember(expr);\n            } else if (match('(')) {\n                expr = parseCallMember(expr);\n            } else if (lookahead().type === Token.Quasi) {\n                expr = parseTaggedQuasi(expr);\n            } else {\n                break;\n            }\n        }\n\n        return expr;\n    }\n\n    function parseLeftHandSideExpression() {\n        var useNew, expr;\n\n        useNew = matchKeyword('new');\n        expr = useNew ? parseNewExpression() : parsePrimaryExpression();\n\n        while (index < length) {\n            if (match('.')) {\n                lex();\n                expr = parseNonComputedMember(expr);\n            } else if (match('[')) {\n                expr = parseComputedMember(expr);\n            } else if (lookahead().type === Token.Quasi) {\n                expr = parseTaggedQuasi(expr);\n            } else {\n                break;\n            }\n        }\n\n        return expr;\n    }\n\n    // 11.3 Postfix Expressions\n\n    function parsePostfixExpression() {\n        var expr = parseLeftHandSideExpressionAllowCall();\n\n        if ((match('++') || match('--')) && !peekLineTerminator()) {\n            // 11.3.1, 11.3.2\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwErrorTolerant({}, Messages.StrictLHSPostfix);\n            }\n\n            if (!isLeftHandSide(expr)) {\n                throwError({}, Messages.InvalidLHSInAssignment);\n            }\n\n            expr = {\n                type: Syntax.UpdateExpression,\n                operator: lex().value,\n                argument: expr,\n                prefix: false\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.4 Unary Operators\n\n    function parseUnaryExpression() {\n        var token, expr;\n\n        if (match('++') || match('--')) {\n            token = lex();\n            expr = parseUnaryExpression();\n            // 11.4.4, 11.4.5\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwErrorTolerant({}, Messages.StrictLHSPrefix);\n            }\n\n            if (!isLeftHandSide(expr)) {\n                throwError({}, Messages.InvalidLHSInAssignment);\n            }\n\n            expr = {\n                type: Syntax.UpdateExpression,\n                operator: token.value,\n                argument: expr,\n                prefix: true\n            };\n            return expr;\n        }\n\n        if (match('+') || match('-') || match('~') || match('!')) {\n            expr = {\n                type: Syntax.UnaryExpression,\n                operator: lex().value,\n                argument: parseUnaryExpression()\n            };\n            return expr;\n        }\n\n        if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {\n            expr = {\n                type: Syntax.UnaryExpression,\n                operator: lex().value,\n                argument: parseUnaryExpression()\n            };\n            if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {\n                throwErrorTolerant({}, Messages.StrictDelete);\n            }\n            return expr;\n        }\n\n        return parsePostfixExpression();\n    }\n\n    // 11.5 Multiplicative Operators\n\n    function parseMultiplicativeExpression() {\n        var expr = parseUnaryExpression();\n\n        while (match('*') || match('/') || match('%')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseUnaryExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.6 Additive Operators\n\n    function parseAdditiveExpression() {\n        var expr = parseMultiplicativeExpression();\n\n        while (match('+') || match('-')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseMultiplicativeExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.7 Bitwise Shift Operators\n\n    function parseShiftExpression() {\n        var expr = parseAdditiveExpression();\n\n        while (match('<<') || match('>>') || match('>>>')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseAdditiveExpression()\n            };\n        }\n\n        return expr;\n    }\n    // 11.8 Relational Operators\n\n    function parseRelationalExpression() {\n        var expr, previousAllowIn;\n\n        previousAllowIn = state.allowIn;\n        state.allowIn = true;\n\n        expr = parseShiftExpression();\n\n        while (match('<') || match('>') || match('<=') || match('>=') || (previousAllowIn && matchKeyword('in')) || matchKeyword('instanceof')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseShiftExpression()\n            };\n        }\n\n        state.allowIn = previousAllowIn;\n        return expr;\n    }\n\n    // 11.9 Equality Operators\n\n    function parseEqualityExpression() {\n        var expr = parseRelationalExpression();\n\n        while ((!peekLineTerminator() && (matchContextualKeyword('is') || matchContextualKeyword('isnt'))) || match('==') || match('!=') || match('===') || match('!==')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseRelationalExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.10 Binary Bitwise Operators\n\n    function parseBitwiseANDExpression() {\n        var expr = parseEqualityExpression();\n\n        while (match('&')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: '&',\n                left: expr,\n                right: parseEqualityExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    function parseBitwiseXORExpression() {\n        var expr = parseBitwiseANDExpression();\n\n        while (match('^')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: '^',\n                left: expr,\n                right: parseBitwiseANDExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    function parseBitwiseORExpression() {\n        var expr = parseBitwiseXORExpression();\n\n        while (match('|')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: '|',\n                left: expr,\n                right: parseBitwiseXORExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.11 Binary Logical Operators\n\n    function parseLogicalANDExpression() {\n        var expr = parseBitwiseORExpression();\n\n        while (match('&&')) {\n            lex();\n            expr = {\n                type: Syntax.LogicalExpression,\n                operator: '&&',\n                left: expr,\n                right: parseBitwiseORExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    function parseLogicalORExpression() {\n        var expr = parseLogicalANDExpression();\n\n        while (match('||')) {\n            lex();\n            expr = {\n                type: Syntax.LogicalExpression,\n                operator: '||',\n                left: expr,\n                right: parseLogicalANDExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.12 Conditional Operator\n\n    function parseConditionalExpression() {\n        var expr, previousAllowIn, consequent;\n\n        expr = parseLogicalORExpression();\n\n        if (match('?')) {\n            lex();\n            previousAllowIn = state.allowIn;\n            state.allowIn = true;\n            consequent = parseAssignmentExpression();\n            state.allowIn = previousAllowIn;\n            expect(':');\n\n            expr = {\n                type: Syntax.ConditionalExpression,\n                test: expr,\n                consequent: consequent,\n                alternate: parseAssignmentExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.13 Assignment Operators\n\n    function reinterpretAsAssignmentBindingPattern(expr) {\n        var i, len, property, element;\n\n        if (expr.type === Syntax.ObjectExpression) {\n            expr.type = Syntax.ObjectPattern;\n            for (i = 0, len = expr.properties.length; i < len; i += 1) {\n                property = expr.properties[i];\n                if (property.kind !== 'init') {\n                    throwError({}, Messages.InvalidLHSInAssignment);\n                }\n                reinterpretAsAssignmentBindingPattern(property.value);\n            }\n        } else if (expr.type === Syntax.ArrayExpression) {\n            expr.type = Syntax.ArrayPattern;\n            for (i = 0, len = expr.elements.length; i < len; i += 1) {\n                element = expr.elements[i];\n                if (element) {\n                    reinterpretAsAssignmentBindingPattern(element);\n                }\n            }\n        } else if (expr.type === Syntax.Identifier) {\n            if (isRestrictedWord(expr.name)) {\n                throwError({}, Messages.InvalidLHSInAssignment);\n            }\n        } else {\n            if (expr.type !== Syntax.MemberExpression && expr.type !== Syntax.CallExpression && expr.type !== Syntax.NewExpression) {\n                throwError({}, Messages.InvalidLHSInAssignment);\n            }\n        }\n    }\n\n    function reinterpretAsCoverFormalsList(expr) {\n        var i, len, param, paramSet;\n        assert(expr.type === Syntax.SequenceExpression);\n\n        paramSet = {};\n\n        for (i = 0, len = expr.expressions.length; i < len; i += 1) {\n            param = expr.expressions[i];\n            if (param.type !== Syntax.Identifier) {\n                return null;\n            }\n            if (isRestrictedWord(param.name)) {\n                throwError({}, Messages.StrictParamName);\n            }\n            if (Object.prototype.hasOwnProperty.call(paramSet, param.name)) {\n                throwError({}, Messages.StrictParamDupe);\n            }\n            paramSet[param.name] = true;\n        }\n        return expr.expressions;\n    }\n\n    function parseArrowFunctionExpression(param) {\n        var previousStrict, previousYieldAllowed, body;\n\n        expect('=>');\n\n        previousStrict = strict;\n        previousYieldAllowed = yieldAllowed;\n        strict = true;\n        yieldAllowed = false;\n        body = parseConciseBody();\n        strict = previousStrict;\n        yieldAllowed = previousYieldAllowed;\n\n        return {\n            type: Syntax.ArrowFunctionExpression,\n            id: null,\n            params: param,\n            defaults: [],\n            body: body,\n            rest: null,\n            generator: false,\n            expression: body.type !== Syntax.BlockStatement\n        };\n    }\n\n    function parseAssignmentExpression() {\n        var expr, token, oldParenthesizedCount, coverFormalsList;\n\n        if (matchKeyword('yield')) {\n            return parseYieldExpression();\n        }\n\n        oldParenthesizedCount = state.parenthesizedCount;\n\n        if (match('(')) {\n            token = lookahead2();\n            if (token.type === Token.Punctuator && token.value === ')') {\n                lex();\n                lex();\n                if (!match('=>')) {\n                    throwUnexpected(lex());\n                }\n                return parseArrowFunctionExpression([]);\n            }\n        }\n\n        token = lookahead();\n        expr = parseConditionalExpression();\n\n        if (match('=>')) {\n            if (expr.type === Syntax.Identifier) {\n                if (state.parenthesizedCount === oldParenthesizedCount || state.parenthesizedCount === (oldParenthesizedCount + 1)) {\n                    if (isRestrictedWord(expr.name)) {\n                        throwError({}, Messages.StrictParamName);\n                    }\n                    return parseArrowFunctionExpression([ expr ]);\n                }\n            } else if (expr.type === Syntax.SequenceExpression) {\n                if (state.parenthesizedCount === (oldParenthesizedCount + 1)) {\n                    coverFormalsList = reinterpretAsCoverFormalsList(expr);\n                    if (coverFormalsList) {\n                        return parseArrowFunctionExpression(coverFormalsList);\n                    }\n                }\n            }\n        }\n\n        if (matchAssign()) {\n            // 11.13.1\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwErrorTolerant(token, Messages.StrictLHSAssignment);\n            }\n\n            // ES.next draf 11.13 Runtime Semantics step 1\n            if (match('=') && (expr.type === Syntax.ObjectExpression || expr.type === Syntax.ArrayExpression)) {\n                reinterpretAsAssignmentBindingPattern(expr);\n            } else if (!isLeftHandSide(expr)) {\n                throwError({}, Messages.InvalidLHSInAssignment);\n            }\n\n            expr = {\n                type: Syntax.AssignmentExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseAssignmentExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.14 Comma Operator\n\n    function parseExpression() {\n        var expr = parseAssignmentExpression();\n\n        if (match(',')) {\n            expr = {\n                type: Syntax.SequenceExpression,\n                expressions: [ expr ]\n            };\n\n            while (index < length) {\n                if (!match(',')) {\n                    break;\n                }\n                lex();\n                expr.expressions.push(parseAssignmentExpression());\n            }\n\n        }\n        return expr;\n    }\n\n    // 12.1 Block\n\n    function parseStatementList() {\n        var list = [],\n            statement;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            statement = parseSourceElement();\n            if (typeof statement === 'undefined') {\n                break;\n            }\n            list.push(statement);\n        }\n\n        return list;\n    }\n\n    function parseBlock() {\n        var block;\n\n        expect('{');\n\n        block = parseStatementList();\n\n        expect('}');\n\n        return {\n            type: Syntax.BlockStatement,\n            body: block\n        };\n    }\n\n    // 12.2 Variable Statement\n\n    function parseVariableIdentifier() {\n        var token = lex();\n\n        if (token.type !== Token.Identifier) {\n            throwUnexpected(token);\n        }\n\n        return {\n            type: Syntax.Identifier,\n            name: token.value\n        };\n    }\n\n    function parseVariableDeclaration(kind) {\n        var id,\n            init = null;\n        if (match('{')) {\n            id = parseObjectInitialiser();\n            reinterpretAsAssignmentBindingPattern(id);\n        } else {\n            id = parseVariableIdentifier();\n            // 12.2.1\n            if (strict && isRestrictedWord(id.name)) {\n                throwErrorTolerant({}, Messages.StrictVarName);\n            }\n        }\n\n        if (kind === 'const') {\n            if (!match('=')) {\n                throwError({}, Messages.NoUnintializedConst);\n            }\n            expect('=');\n            init = parseAssignmentExpression();\n        } else if (match('=')) {\n            lex();\n            init = parseAssignmentExpression();\n        }\n\n        return {\n            type: Syntax.VariableDeclarator,\n            id: id,\n            init: init\n        };\n    }\n\n    function parseVariableDeclarationList(kind) {\n        var list = [];\n\n        while (index < length) {\n            list.push(parseVariableDeclaration(kind));\n            if (!match(',')) {\n                break;\n            }\n            lex();\n        }\n\n        return list;\n    }\n\n    function parseVariableStatement() {\n        var declarations;\n\n        expectKeyword('var');\n\n        declarations = parseVariableDeclarationList();\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.VariableDeclaration,\n            declarations: declarations,\n            kind: 'var'\n        };\n    }\n\n    // kind may be `const` or `let`\n    // Both are experimental and not in the specification yet.\n    // see http://wiki.ecmascript.org/doku.php?id=harmony:const\n    // and http://wiki.ecmascript.org/doku.php?id=harmony:let\n    function parseConstLetDeclaration(kind) {\n        var declarations;\n\n        expectKeyword(kind);\n\n        declarations = parseVariableDeclarationList(kind);\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.VariableDeclaration,\n            declarations: declarations,\n            kind: kind\n        };\n    }\n\n    // http://wiki.ecmascript.org/doku.php?id=harmony:modules\n\n    function parsePath() {\n        var result, id;\n\n        result = {\n            type: Syntax.Path,\n            body: []\n        };\n\n        while (true) {\n            id = parseVariableIdentifier();\n            result.body.push(id);\n            if (!match('.')) {\n                break;\n            }\n            lex();\n        }\n\n        return result;\n    }\n\n    function parseGlob() {\n        expect('*');\n        return {\n            type: Syntax.Glob\n        };\n    }\n\n    function parseModuleDeclaration() {\n        var id, token, declaration;\n\n        lex();\n\n        id = parseVariableIdentifier();\n\n        if (match('{')) {\n            return {\n                type: Syntax.ModuleDeclaration,\n                id: id,\n                body: parseModuleBlock()\n            };\n        }\n\n        expect('=');\n\n        token = lookahead();\n        if (token.type === Token.StringLiteral) {\n            declaration = {\n                type: Syntax.ModuleDeclaration,\n                id: id,\n                from: parsePrimaryExpression()\n            };\n        } else {\n            declaration = {\n                type: Syntax.ModuleDeclaration,\n                id: id,\n                from: parsePath()\n            };\n        }\n\n        consumeSemicolon();\n\n        return declaration;\n    }\n\n    function parseExportSpecifierSetProperty() {\n        var specifier;\n\n        specifier = {\n            type: Syntax.ExportSpecifier,\n            id: parseVariableIdentifier(),\n            from: null\n        };\n\n        if (match(':')) {\n            lex();\n            specifier.from = parsePath();\n        }\n\n        return specifier;\n    }\n\n    function parseExportSpecifier() {\n        var specifier, specifiers;\n\n        if (match('{')) {\n            lex();\n            specifiers = [];\n\n            do {\n                specifiers.push(parseExportSpecifierSetProperty());\n            } while (match(',') && lex());\n\n            expect('}');\n\n            return {\n                type: Syntax.ExportSpecifierSet,\n                specifiers: specifiers\n            };\n        }\n\n        if (match('*')) {\n            specifier = {\n                type: Syntax.ExportSpecifier,\n                id: parseGlob(),\n                from: null\n            };\n\n            if (matchContextualKeyword('from')) {\n                lex();\n                specifier.from = parsePath();\n            }\n        } else {\n            specifier = {\n                type: Syntax.ExportSpecifier,\n                id: parseVariableIdentifier(),\n                from: null\n            };\n        }\n        return specifier;\n    }\n\n    function parseExportDeclaration() {\n        var token, specifiers;\n\n        expectKeyword('export');\n\n        token = lookahead();\n\n        if (token.type === Token.Keyword || (token.type === Token.Identifier && token.value === 'module')) {\n            switch (token.value) {\n            case 'function':\n                return {\n                    type: Syntax.ExportDeclaration,\n                    declaration: parseFunctionDeclaration()\n                };\n            case 'module':\n                return {\n                    type: Syntax.ExportDeclaration,\n                    declaration: parseModuleDeclaration()\n                };\n            case 'let':\n            case 'const':\n                return {\n                    type: Syntax.ExportDeclaration,\n                    declaration: parseConstLetDeclaration(token.value)\n                };\n            case 'var':\n                return {\n                    type: Syntax.ExportDeclaration,\n                    declaration: parseStatement()\n                };\n            }\n            throwUnexpected(lex());\n        }\n\n        specifiers = [ parseExportSpecifier() ];\n        if (match(',')) {\n            while (index < length) {\n                if (!match(',')) {\n                    break;\n                }\n                lex();\n                specifiers.push(parseExportSpecifier());\n            }\n        }\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ExportDeclaration,\n            specifiers: specifiers\n        };\n    }\n\n    function parseImportDeclaration() {\n        var specifiers, from;\n\n        expectKeyword('import');\n\n        if (match('*')) {\n            specifiers = [parseGlob()];\n        } else if (match('{')) {\n            lex();\n            specifiers = [];\n\n            do {\n                specifiers.push(parseImportSpecifier());\n            } while (match(',') && lex());\n\n            expect('}');\n        } else {\n            specifiers = [parseVariableIdentifier()];\n        }\n\n        if (!matchContextualKeyword('from')) {\n            throwError({}, Messages.NoFromAfterImport);\n        }\n\n        lex();\n\n        if (lookahead().type === Token.StringLiteral) {\n            from = parsePrimaryExpression();\n        } else {\n            from = parsePath();\n        }\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ImportDeclaration,\n            specifiers: specifiers,\n            from: from\n        };\n    }\n\n    function parseImportSpecifier() {\n        var specifier;\n\n        specifier = {\n            type: Syntax.ImportSpecifier,\n            id: parseVariableIdentifier(),\n            from: null\n        };\n\n        if (match(':')) {\n            lex();\n            specifier.from = parsePath();\n        }\n\n        return specifier;\n    }\n\n    // 12.3 Empty Statement\n\n    function parseEmptyStatement() {\n        expect(';');\n\n        return {\n            type: Syntax.EmptyStatement\n        };\n    }\n\n    // 12.4 Expression Statement\n\n    function parseExpressionStatement() {\n        var expr = parseExpression();\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ExpressionStatement,\n            expression: expr\n        };\n    }\n\n    // 12.5 If statement\n\n    function parseIfStatement() {\n        var test, consequent, alternate;\n\n        expectKeyword('if');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        consequent = parseStatement();\n\n        if (matchKeyword('else')) {\n            lex();\n            alternate = parseStatement();\n        } else {\n            alternate = null;\n        }\n\n        return {\n            type: Syntax.IfStatement,\n            test: test,\n            consequent: consequent,\n            alternate: alternate\n        };\n    }\n\n    // 12.6 Iteration Statements\n\n    function parseDoWhileStatement() {\n        var body, test, oldInIteration;\n\n        expectKeyword('do');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        expectKeyword('while');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        if (match(';')) {\n            lex();\n        }\n\n        return {\n            type: Syntax.DoWhileStatement,\n            body: body,\n            test: test\n        };\n    }\n\n    function parseWhileStatement() {\n        var test, body, oldInIteration;\n\n        expectKeyword('while');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        return {\n            type: Syntax.WhileStatement,\n            test: test,\n            body: body\n        };\n    }\n\n    function parseForVariableDeclaration() {\n        var token = lex();\n\n        return {\n            type: Syntax.VariableDeclaration,\n            declarations: parseVariableDeclarationList(),\n            kind: token.value\n        };\n    }\n\n    function parseForStatement(opts) {\n        var init, test, update, left, right, body, operator, oldInIteration;\n        init = test = update = null;\n        expectKeyword('for');\n\n        expect('(');\n\n        if (match(';')) {\n            lex();\n        } else {\n            if (matchKeyword('var') || matchKeyword('let') || matchKeyword('const')) {\n                state.allowIn = false;\n                init = parseForVariableDeclaration();\n                state.allowIn = true;\n\n                if (init.declarations.length === 1) {\n                    if (matchKeyword('in') || matchContextualKeyword('of')) {\n                        operator = lookahead();\n                        if (!((operator.value === 'in' || init.kind !== 'var') && init.declarations[0].init)) {\n                            lex();\n                            left = init;\n                            right = parseExpression();\n                            init = null;\n                        }\n                    }\n                }\n            } else {\n                state.allowIn = false;\n                init = parseExpression();\n                state.allowIn = true;\n\n                if (matchContextualKeyword('of')) {\n                    operator = lex();\n                    left = init;\n                    right = parseExpression();\n                    init = null;\n                } else if (matchKeyword('in')) {\n                    // LeftHandSideExpression\n                    if (!isAssignableLeftHandSide(init)) {\n                        throwError({}, Messages.InvalidLHSInForIn);\n                    }\n                    operator = lex();\n                    left = init;\n                    right = parseExpression();\n                    init = null;\n                }\n            }\n\n            if (typeof left === 'undefined') {\n                expect(';');\n            }\n        }\n\n        if (typeof left === 'undefined') {\n\n            if (!match(';')) {\n                test = parseExpression();\n            }\n            expect(';');\n\n            if (!match(')')) {\n                update = parseExpression();\n            }\n        }\n\n        expect(')');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        if (opts !== undefined && opts.ignore_body) {\n            body: null\n        } else {\n            body = parseStatement();\n        }\n\n        state.inIteration = oldInIteration;\n\n        if (typeof left === 'undefined') {\n            return {\n                type: Syntax.ForStatement,\n                init: init,\n                test: test,\n                update: update,\n                body: body\n            };\n        }\n\n        if (operator.value === 'in') {\n            return {\n                type: Syntax.ForInStatement,\n                left: left,\n                right: right,\n                body: body,\n                each: false\n            };\n        } else {\n            return {\n                type: Syntax.ForOfStatement,\n                left: left,\n                right: right,\n                body: body\n            };\n        }\n    }\n\n    // 12.7 The continue statement\n\n    function parseContinueStatement() {\n        var token, label = null;\n\n        expectKeyword('continue');\n\n        // Optimize the most common form: 'continue;'.\n        if (source[index] === ';') {\n            lex();\n\n            if (!state.inIteration) {\n                throwError({}, Messages.IllegalContinue);\n            }\n\n            return {\n                type: Syntax.ContinueStatement,\n                label: null\n            };\n        }\n\n        if (peekLineTerminator()) {\n            if (!state.inIteration) {\n                throwError({}, Messages.IllegalContinue);\n            }\n\n            return {\n                type: Syntax.ContinueStatement,\n                label: null\n            };\n        }\n\n        token = lookahead();\n        if (token.type === Token.Identifier) {\n            label = parseVariableIdentifier();\n\n            if (!Object.prototype.hasOwnProperty.call(state.labelSet, label.name)) {\n                throwError({}, Messages.UnknownLabel, label.name);\n            }\n        }\n\n        consumeSemicolon();\n\n        if (label === null && !state.inIteration) {\n            throwError({}, Messages.IllegalContinue);\n        }\n\n        return {\n            type: Syntax.ContinueStatement,\n            label: label\n        };\n    }\n\n    // 12.8 The break statement\n\n    function parseBreakStatement() {\n        var token, label = null;\n\n        expectKeyword('break');\n\n        // Optimize the most common form: 'break;'.\n        if (source[index] === ';') {\n            lex();\n\n            if (!(state.inIteration || state.inSwitch)) {\n                throwError({}, Messages.IllegalBreak);\n            }\n\n            return {\n                type: Syntax.BreakStatement,\n                label: null\n            };\n        }\n\n        if (peekLineTerminator()) {\n            if (!(state.inIteration || state.inSwitch)) {\n                throwError({}, Messages.IllegalBreak);\n            }\n\n            return {\n                type: Syntax.BreakStatement,\n                label: null\n            };\n        }\n\n        token = lookahead();\n        if (token.type === Token.Identifier) {\n            label = parseVariableIdentifier();\n\n            if (!Object.prototype.hasOwnProperty.call(state.labelSet, label.name)) {\n                throwError({}, Messages.UnknownLabel, label.name);\n            }\n        }\n\n        consumeSemicolon();\n\n        if (label === null && !(state.inIteration || state.inSwitch)) {\n            throwError({}, Messages.IllegalBreak);\n        }\n\n        return {\n            type: Syntax.BreakStatement,\n            label: label\n        };\n    }\n\n    // 12.9 The return statement\n\n    function parseReturnStatement() {\n        var token, argument = null;\n\n        expectKeyword('return');\n\n        if (!state.inFunctionBody) {\n            throwErrorTolerant({}, Messages.IllegalReturn);\n        }\n\n        // 'return' followed by a space and an identifier is very common.\n        if (source[index] === ' ') {\n            if (isIdentifierStart(source[index + 1])) {\n                argument = parseExpression();\n                consumeSemicolon();\n                return {\n                    type: Syntax.ReturnStatement,\n                    argument: argument\n                };\n            }\n        }\n\n        if (peekLineTerminator()) {\n            return {\n                type: Syntax.ReturnStatement,\n                argument: null\n            };\n        }\n\n        if (!match(';')) {\n            token = lookahead();\n            if (!match('}') && token.type !== Token.EOF) {\n                argument = parseExpression();\n            }\n        }\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ReturnStatement,\n            argument: argument\n        };\n    }\n\n    // 12.10 The with statement\n\n    function parseWithStatement() {\n        var object, body;\n\n        if (strict) {\n            throwErrorTolerant({}, Messages.StrictModeWith);\n        }\n\n        expectKeyword('with');\n\n        expect('(');\n\n        object = parseExpression();\n\n        expect(')');\n\n        body = parseStatement();\n\n        return {\n            type: Syntax.WithStatement,\n            object: object,\n            body: body\n        };\n    }\n\n    // 12.10 The swith statement\n\n    function parseSwitchCase() {\n        var test,\n            consequent = [],\n            statement;\n\n        if (matchKeyword('default')) {\n            lex();\n            test = null;\n        } else {\n            expectKeyword('case');\n            test = parseExpression();\n        }\n        expect(':');\n\n        while (index < length) {\n            if (match('}') || matchKeyword('default') || matchKeyword('case')) {\n                break;\n            }\n            statement = parseSourceElement();\n            if (typeof statement === 'undefined') {\n                break;\n            }\n            consequent.push(statement);\n        }\n\n        return {\n            type: Syntax.SwitchCase,\n            test: test,\n            consequent: consequent\n        };\n    }\n\n    function parseSwitchStatement() {\n        var discriminant, cases, clause, oldInSwitch, defaultFound;\n\n        expectKeyword('switch');\n\n        expect('(');\n\n        discriminant = parseExpression();\n\n        expect(')');\n\n        expect('{');\n\n        if (match('}')) {\n            lex();\n            return {\n                type: Syntax.SwitchStatement,\n                discriminant: discriminant\n            };\n        }\n\n        cases = [];\n\n        oldInSwitch = state.inSwitch;\n        state.inSwitch = true;\n        defaultFound = false;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            clause = parseSwitchCase();\n            if (clause.test === null) {\n                if (defaultFound) {\n                    throwError({}, Messages.MultipleDefaultsInSwitch);\n                }\n                defaultFound = true;\n            }\n            cases.push(clause);\n        }\n\n        state.inSwitch = oldInSwitch;\n\n        expect('}');\n\n        return {\n            type: Syntax.SwitchStatement,\n            discriminant: discriminant,\n            cases: cases\n        };\n    }\n\n    // 12.13 The throw statement\n\n    function parseThrowStatement() {\n        var argument;\n\n        expectKeyword('throw');\n\n        if (peekLineTerminator()) {\n            throwError({}, Messages.NewlineAfterThrow);\n        }\n\n        argument = parseExpression();\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ThrowStatement,\n            argument: argument\n        };\n    }\n\n    // 12.14 The try statement\n\n    function parseCatchClause() {\n        var param;\n\n        expectKeyword('catch');\n\n        expect('(');\n        if (!match(')')) {\n            param = parseExpression();\n            // 12.14.1\n            if (strict && param.type === Syntax.Identifier && isRestrictedWord(param.name)) {\n                throwErrorTolerant({}, Messages.StrictCatchVariable);\n            }\n        }\n        expect(')');\n\n        return {\n            type: Syntax.CatchClause,\n            param: param,\n            body: parseBlock()\n        };\n    }\n\n    function parseTryStatement() {\n        var block, handlers = [], finalizer = null;\n\n        expectKeyword('try');\n\n        block = parseBlock();\n\n        if (matchKeyword('catch')) {\n            handlers.push(parseCatchClause());\n        }\n\n        if (matchKeyword('finally')) {\n            lex();\n            finalizer = parseBlock();\n        }\n\n        if (handlers.length === 0 && !finalizer) {\n            throwError({}, Messages.NoCatchOrFinally);\n        }\n\n        return {\n            type: Syntax.TryStatement,\n            block: block,\n            guardedHandlers: [],\n            handlers: handlers,\n            finalizer: finalizer\n        };\n    }\n\n    // 12.15 The debugger statement\n\n    function parseDebuggerStatement() {\n        expectKeyword('debugger');\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.DebuggerStatement\n        };\n    }\n\n    // 12 Statements\n\n    function parseStatement() {\n        var token = lookahead(),\n            expr,\n            labeledBody;\n\n        if (token.type === Token.EOF) {\n            throwUnexpected(token);\n        }\n\n        if (token.type === Token.Punctuator) {\n            switch (token.value) {\n            case ';':\n                return parseEmptyStatement();\n            case '{':\n                return parseBlock();\n            case '(':\n                return parseExpressionStatement();\n            default:\n                break;\n            }\n        }\n\n        if (token.type === Token.Keyword) {\n            switch (token.value) {\n            case 'break':\n                return parseBreakStatement();\n            case 'continue':\n                return parseContinueStatement();\n            case 'debugger':\n                return parseDebuggerStatement();\n            case 'do':\n                return parseDoWhileStatement();\n            case 'for':\n                return parseForStatement();\n            case 'function':\n                return parseFunctionDeclaration();\n            case 'class':\n                return parseClassDeclaration();\n            case 'if':\n                return parseIfStatement();\n            case 'return':\n                return parseReturnStatement();\n            case 'switch':\n                return parseSwitchStatement();\n            case 'throw':\n                return parseThrowStatement();\n            case 'try':\n                return parseTryStatement();\n            case 'var':\n                return parseVariableStatement();\n            case 'while':\n                return parseWhileStatement();\n            case 'with':\n                return parseWithStatement();\n            default:\n                break;\n            }\n        }\n\n        expr = parseExpression();\n\n        // 12.12 Labelled Statements\n        if ((expr.type === Syntax.Identifier) && match(':')) {\n            lex();\n\n            if (Object.prototype.hasOwnProperty.call(state.labelSet, expr.name)) {\n                throwError({}, Messages.Redeclaration, 'Label', expr.name);\n            }\n\n            state.labelSet[expr.name] = true;\n            labeledBody = parseStatement();\n            delete state.labelSet[expr.name];\n\n            return {\n                type: Syntax.LabeledStatement,\n                label: expr,\n                body: labeledBody\n            };\n        }\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ExpressionStatement,\n            expression: expr\n        };\n    }\n\n    // 13 Function Definition\n\n    function parseConciseBody() {\n        if (match('{')) {\n            return parseFunctionSourceElements();\n        } else {\n            return parseAssignmentExpression();\n        }\n    }\n\n    function parseFunctionSourceElements() {\n        var sourceElement, sourceElements = [], token, directive, firstRestricted,\n            oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody, oldParenthesizedCount;\n\n        expect('{');\n\n        while (index < length) {\n            token = lookahead();\n            if (token.type !== Token.StringLiteral) {\n                break;\n            }\n\n            sourceElement = parseSourceElement();\n            sourceElements.push(sourceElement);\n            if (sourceElement.expression.type !== Syntax.Literal) {\n                // this is not directive\n                break;\n            }\n            directive = sliceSource(token.range[0] + 1, token.range[1] - 1);\n            if (directive === 'use strict') {\n                strict = true;\n                if (firstRestricted) {\n                    throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);\n                }\n            } else {\n                if (!firstRestricted && token.octal) {\n                    firstRestricted = token;\n                }\n            }\n        }\n\n        oldLabelSet = state.labelSet;\n        oldInIteration = state.inIteration;\n        oldInSwitch = state.inSwitch;\n        oldInFunctionBody = state.inFunctionBody;\n        oldParenthesizedCount = state.parenthesizedCount;\n\n        state.labelSet = {};\n        state.inIteration = false;\n        state.inSwitch = false;\n        state.inFunctionBody = true;\n        state.parenthesizedCount = 0;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            sourceElement = parseSourceElement();\n            if (typeof sourceElement === 'undefined') {\n                break;\n            }\n            sourceElements.push(sourceElement);\n        }\n\n        expect('}');\n\n        state.labelSet = oldLabelSet;\n        state.inIteration = oldInIteration;\n        state.inSwitch = oldInSwitch;\n        state.inFunctionBody = oldInFunctionBody;\n        state.parenthesizedCount = oldParenthesizedCount;\n\n        return {\n            type: Syntax.BlockStatement,\n            body: sourceElements\n        };\n    }\n\n    function parseFunctionDeclaration() {\n        var id, param, params = [], body, token, stricted, firstRestricted, message, previousStrict, previousYieldAllowed, paramSet, generator;\n\n        expectKeyword('function');\n\n        generator = false;\n        if (match('*')) {\n            lex();\n            generator = true;\n        }\n\n        token = lookahead();\n\n        id = parseVariableIdentifier();\n        if (strict) {\n            if (isRestrictedWord(token.value)) {\n                throwErrorTolerant(token, Messages.StrictFunctionName);\n            }\n        } else {\n            if (isRestrictedWord(token.value)) {\n                firstRestricted = token;\n                message = Messages.StrictFunctionName;\n            } else if (isStrictModeReservedWord(token.value)) {\n                firstRestricted = token;\n                message = Messages.StrictReservedWord;\n            }\n        }\n\n        expect('(');\n\n        if (!match(')')) {\n            paramSet = {};\n            while (index < length) {\n                token = lookahead();\n                param = parseVariableIdentifier();\n                if (strict) {\n                    if (isRestrictedWord(token.value)) {\n                        stricted = token;\n                        message = Messages.StrictParamName;\n                    }\n                    if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        stricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                } else if (!firstRestricted) {\n                    if (isRestrictedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamName;\n                    } else if (isStrictModeReservedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictReservedWord;\n                    } else if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                }\n                params.push(param);\n                paramSet[param.name] = true;\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        previousStrict = strict;\n        previousYieldAllowed = yieldAllowed;\n        yieldAllowed = generator;\n        body = parseFunctionSourceElements();\n        if (strict && firstRestricted) {\n            throwError(firstRestricted, message);\n        }\n        if (strict && stricted) {\n            throwErrorTolerant(stricted, message);\n        }\n        if (yieldAllowed && !yieldFound) {\n            throwError({}, Messages.NoYieldInGenerator);\n        }\n        strict = previousStrict;\n        yieldAllowed = previousYieldAllowed;\n\n        return {\n            type: Syntax.FunctionDeclaration,\n            id: id,\n            params: params,\n            defaults: [],\n            body: body,\n            rest: null,\n            generator: generator,\n            expression: false\n        };\n    }\n\n    function parseFunctionExpression() {\n        var token, id = null, stricted, firstRestricted, message, param, params = [], body, previousStrict, previousYieldAllowed, paramSet, generator;\n\n        expectKeyword('function');\n\n        generator = false;\n\n        if (match('*')) {\n            lex();\n            generator = true;\n        }\n\n        if (!match('(')) {\n            token = lookahead();\n            id = parseVariableIdentifier();\n            if (strict) {\n                if (isRestrictedWord(token.value)) {\n                    throwErrorTolerant(token, Messages.StrictFunctionName);\n                }\n            } else {\n                if (isRestrictedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictFunctionName;\n                } else if (isStrictModeReservedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictReservedWord;\n                }\n            }\n        }\n\n        expect('(');\n\n        if (!match(')')) {\n            paramSet = {};\n            while (index < length) {\n                token = lookahead();\n                param = parseVariableIdentifier();\n                if (strict) {\n                    if (isRestrictedWord(token.value)) {\n                        stricted = token;\n                        message = Messages.StrictParamName;\n                    }\n                    if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        stricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                } else if (!firstRestricted) {\n                    if (isRestrictedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamName;\n                    } else if (isStrictModeReservedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictReservedWord;\n                    } else if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                }\n                params.push(param);\n                paramSet[param.name] = true;\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        previousStrict = strict;\n        previousYieldAllowed = yieldAllowed;\n        yieldAllowed = generator;\n        body = parseFunctionSourceElements();\n        if (strict && firstRestricted) {\n            throwError(firstRestricted, message);\n        }\n        if (strict && stricted) {\n            throwErrorTolerant(stricted, message);\n        }\n        if (yieldAllowed && !yieldFound) {\n            throwError({}, Messages.NoYieldInGenerator);\n        }\n        strict = previousStrict;\n        yieldAllowed = previousYieldAllowed;\n\n\n        return {\n            type: Syntax.FunctionExpression,\n            id: id,\n            params: params,\n            defaults: [],\n            body: body,\n            rest: null,\n            generator: generator,\n            expression: false\n        };\n    }\n\n    function parseYieldExpression() {\n        var delegate, expr, previousYieldAllowed;\n\n        expectKeyword('yield');\n\n        if (!yieldAllowed) {\n            throwErrorTolerant({}, Messages.IllegalYield);\n        }\n\n        delegate = false;\n        if (match('*')) {\n            lex();\n            delegate = true;\n        }\n\n        // It is a Syntax Error if any AssignmentExpression Contains YieldExpression.\n        previousYieldAllowed = yieldAllowed;\n        yieldAllowed = false;\n        expr = parseAssignmentExpression();\n        yieldAllowed = previousYieldAllowed;\n        yieldFound = true;\n\n        return {\n            type: Syntax.YieldExpression,\n            argument: expr,\n            delegate: delegate\n        };\n    }\n\n    // 14 Classes\n\n    function parseMethodDefinition() {\n        var token, key, param;\n\n        if (match('*')) {\n            lex();\n            return {\n                type: Syntax.MethodDefinition,\n                key: parseObjectPropertyKey(),\n                value: parsePropertyMethodFunction({ generator: true }),\n                kind: ''\n            };\n        }\n\n        token = lookahead();\n        key = parseObjectPropertyKey();\n\n        if (token.value === 'get' && !match('(')) {\n            key = parseObjectPropertyKey();\n            expect('(');\n            expect(')');\n            return {\n                type: Syntax.MethodDefinition,\n                key: key,\n                value: parsePropertyFunction([], { generator: false }),\n                kind: 'get'\n            };\n        } else if (token.value === 'set' && !match('(')) {\n            key = parseObjectPropertyKey();\n            expect('(');\n            token = lookahead();\n            param = [ parseVariableIdentifier() ];\n            expect(')');\n            return {\n                type: Syntax.MethodDefinition,\n                key: key,\n                value: parsePropertyFunction(param, { generator: false, name: token }),\n                kind: 'set'\n            };\n        } else {\n            return {\n                type: Syntax.MethodDefinition,\n                key: key,\n                value: parsePropertyMethodFunction({ generator: false }),\n                kind: ''\n            };\n        }\n    }\n\n    function parseClassElement() {\n        if (match(';')) {\n            lex();\n            return;\n        } else {\n            return parseMethodDefinition();\n        }\n    }\n\n    function parseClassBody() {\n        var classElement, classElements = [];\n\n        expect('{');\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            classElement = parseClassElement();\n            if (typeof classElement !== 'undefined') {\n                classElements.push(classElement);\n            }\n        }\n\n        expect('}');\n\n        return {\n            type: Syntax.ClassBody,\n            body: classElements\n        };\n    }\n\n    function parseClassExpression() {\n        var id, body, previousYieldAllowed, superClass;\n\n        expectKeyword('class');\n\n        if (!matchKeyword('extends') && !match('{')) {\n            id = parseVariableIdentifier();\n        }\n\n        if (matchKeyword('extends')) {\n            expectKeyword('extends');\n            previousYieldAllowed = yieldAllowed;\n            yieldAllowed = false;\n            superClass = parseAssignmentExpression();\n            yieldAllowed = previousYieldAllowed;\n        }\n\n        body = parseClassBody();\n        return {\n            id: id,\n            type: Syntax.ClassExpression,\n            body: body,\n            superClass: superClass\n        };\n    }\n\n    function parseClassDeclaration() {\n        var token, id, body, previousYieldAllowed, superClass;\n\n        expectKeyword('class');\n\n        token = lookahead();\n        id = parseVariableIdentifier();\n\n        if (matchKeyword('extends')) {\n            expectKeyword('extends');\n            previousYieldAllowed = yieldAllowed;\n            yieldAllowed = false;\n            superClass = parseAssignmentExpression();\n            yieldAllowed = previousYieldAllowed;\n        }\n\n        body = parseClassBody();\n        return {\n            id: id,\n            type: Syntax.ClassDeclaration,\n            body: body,\n            superClass: superClass\n        };\n    }\n\n    // 15 Program\n\n    function parseSourceElement() {\n        var token = lookahead();\n\n        if (token.type === Token.Keyword) {\n            switch (token.value) {\n            case 'const':\n            case 'let':\n                return parseConstLetDeclaration(token.value);\n            case 'function':\n                return parseFunctionDeclaration();\n            default:\n                return parseStatement();\n            }\n        }\n\n        if (token.type !== Token.EOF) {\n            return parseStatement();\n        }\n    }\n\n    function parseProgramElement() {\n        var token = lookahead(), lineNumber;\n\n        if (token.type === Token.Keyword) {\n            switch (token.value) {\n            case 'export':\n                return parseExportDeclaration();\n            case 'import':\n                return parseImportDeclaration();\n            }\n        }\n\n        if (token.value === 'module' && token.type === Token.Identifier) {\n            lineNumber = token.lineNumber;\n            token = lookahead2();\n            if (token.type === Token.Identifier && token.lineNumber === lineNumber) {\n                return parseModuleDeclaration();\n            }\n        }\n\n        return parseSourceElement();\n    }\n\n    function parseProgramElements() {\n        var sourceElement, sourceElements = [], token, directive, firstRestricted;\n\n        while (index < length) {\n            token = lookahead();\n            if (token.type !== Token.StringLiteral) {\n                break;\n            }\n\n            sourceElement = parseProgramElement();\n            sourceElements.push(sourceElement);\n            if (sourceElement.expression.type !== Syntax.Literal) {\n                // this is not directive\n                break;\n            }\n            directive = sliceSource(token.range[0] + 1, token.range[1] - 1);\n            if (directive === 'use strict') {\n                strict = true;\n                if (firstRestricted) {\n                    throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);\n                }\n            } else {\n                if (!firstRestricted && token.octal) {\n                    firstRestricted = token;\n                }\n            }\n        }\n\n        while (index < length) {\n            sourceElement = parseProgramElement();\n            if (typeof sourceElement === 'undefined') {\n                break;\n            }\n            sourceElements.push(sourceElement);\n        }\n        return sourceElements;\n    }\n\n    function parseModuleElement() {\n        return parseProgramElement();\n    }\n\n    function parseModuleElements() {\n        var list = [],\n            statement;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            statement = parseModuleElement();\n            if (typeof statement === 'undefined') {\n                break;\n            }\n            list.push(statement);\n        }\n\n        return list;\n    }\n\n    function parseModuleBlock() {\n        var block;\n\n        expect('{');\n\n        block = parseModuleElements();\n\n        expect('}');\n\n        return {\n            type: Syntax.BlockStatement,\n            body: block\n        };\n    }\n\n    function parseProgram() {\n        var program;\n        strict = false;\n        yieldAllowed = false;\n        yieldFound = false;\n        program = {\n            type: Syntax.Program,\n            body: parseProgramElements()\n        };\n        return program;\n    }\n\n    // The following functions are needed only when the option to preserve\n    // the comments is active.\n\n    function addComment(type, value, start, end, loc) {\n        assert(typeof start === 'number', 'Comment must have valid position');\n\n        // Because the way the actual token is scanned, often the comments\n        // (if any) are skipped twice during the lexical analysis.\n        // Thus, we need to skip adding a comment if the comment array already\n        // handled it.\n        if (extra.comments.length > 0) {\n            if (extra.comments[extra.comments.length - 1].range[1] > start) {\n                return;\n            }\n        }\n\n        extra.comments.push({\n            type: type,\n            value: value,\n            range: [start, end],\n            loc: loc\n        });\n    }\n\n    function scanComment() {\n        var comment, ch, loc, start, blockComment, lineComment;\n\n        comment = '';\n        blockComment = false;\n        lineComment = false;\n\n        while (index < length) {\n            ch = source[index];\n\n            if (lineComment) {\n                ch = nextChar();\n                if (isLineTerminator(ch)) {\n                    loc.end = {\n                        line: lineNumber,\n                        column: index - lineStart - 1\n                    };\n                    lineComment = false;\n                    addComment('Line', comment, start, index - 1, loc);\n                    if (ch === '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                    ++lineNumber;\n                    lineStart = index;\n                    comment = '';\n                } else if (index >= length) {\n                    lineComment = false;\n                    comment += ch;\n                    loc.end = {\n                        line: lineNumber,\n                        column: length - lineStart\n                    };\n                    addComment('Line', comment, start, length, loc);\n                } else {\n                    comment += ch;\n                }\n            } else if (blockComment) {\n                if (isLineTerminator(ch)) {\n                    if (ch === '\\r' && source[index + 1] === '\\n') {\n                        ++index;\n                        comment += '\\r\\n';\n                    } else {\n                        comment += ch;\n                    }\n                    ++lineNumber;\n                    ++index;\n                    lineStart = index;\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    ch = nextChar();\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                    comment += ch;\n                    if (ch === '*') {\n                        ch = source[index];\n                        if (ch === '/') {\n                            comment = comment.substr(0, comment.length - 1);\n                            blockComment = false;\n                            ++index;\n                            loc.end = {\n                                line: lineNumber,\n                                column: index - lineStart\n                            };\n                            addComment('Block', comment, start, index, loc);\n                            comment = '';\n                        }\n                    }\n                }\n            } else if (ch === '/') {\n                ch = source[index + 1];\n                if (ch === '/') {\n                    loc = {\n                        start: {\n                            line: lineNumber,\n                            column: index - lineStart\n                        }\n                    };\n                    start = index;\n                    index += 2;\n                    lineComment = true;\n                    if (index >= length) {\n                        loc.end = {\n                            line: lineNumber,\n                            column: index - lineStart\n                        };\n                        lineComment = false;\n                        addComment('Line', comment, start, index, loc);\n                    }\n                } else if (ch === '*') {\n                    start = index;\n                    index += 2;\n                    blockComment = true;\n                    loc = {\n                        start: {\n                            line: lineNumber,\n                            column: index - lineStart - 2\n                        }\n                    };\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    break;\n                }\n            } else if (isWhiteSpace(ch)) {\n                ++index;\n            } else if (isLineTerminator(ch)) {\n                ++index;\n                if (ch ===  '\\r' && source[index] === '\\n') {\n                    ++index;\n                }\n                ++lineNumber;\n                lineStart = index;\n            } else {\n                break;\n            }\n        }\n    }\n\n    function filterCommentLocation() {\n        var i, entry, comment, comments = [];\n\n        for (i = 0; i < extra.comments.length; ++i) {\n            entry = extra.comments[i];\n            comment = {\n                type: entry.type,\n                value: entry.value\n            };\n            if (extra.range) {\n                comment.range = entry.range;\n            }\n            if (extra.loc) {\n                comment.loc = entry.loc;\n            }\n            comments.push(comment);\n        }\n\n        extra.comments = comments;\n    }\n\n    function collectToken() {\n        var start, loc, token, range, value;\n\n        skipComment();\n        start = index;\n        loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart\n            }\n        };\n\n        token = extra.advance();\n        loc.end = {\n            line: lineNumber,\n            column: index - lineStart\n        };\n\n        if (token.type !== Token.EOF) {\n            range = [token.range[0], token.range[1]];\n            value = sliceSource(token.range[0], token.range[1]);\n            extra.tokens.push({\n                type: TokenName[token.type],\n                value: value,\n                range: range,\n                loc: loc\n            });\n        }\n\n        return token;\n    }\n\n    function collectRegex() {\n        var pos, loc, regex, token;\n\n        skipComment();\n\n        pos = index;\n        loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart\n            }\n        };\n\n        regex = extra.scanRegExp();\n        loc.end = {\n            line: lineNumber,\n            column: index - lineStart\n        };\n\n        // Pop the previous token, which is likely '/' or '/='\n        if (extra.tokens.length > 0) {\n            token = extra.tokens[extra.tokens.length - 1];\n            if (token.range[0] === pos && token.type === 'Punctuator') {\n                if (token.value === '/' || token.value === '/=') {\n                    extra.tokens.pop();\n                }\n            }\n        }\n\n        extra.tokens.push({\n            type: 'RegularExpression',\n            value: regex.literal,\n            range: [pos, index],\n            loc: loc\n        });\n\n        return regex;\n    }\n\n    function filterTokenLocation() {\n        var i, entry, token, tokens = [];\n\n        for (i = 0; i < extra.tokens.length; ++i) {\n            entry = extra.tokens[i];\n            token = {\n                type: entry.type,\n                value: entry.value\n            };\n            if (extra.range) {\n                token.range = entry.range;\n            }\n            if (extra.loc) {\n                token.loc = entry.loc;\n            }\n            tokens.push(token);\n        }\n\n        extra.tokens = tokens;\n    }\n\n    function createLiteral(token) {\n        return {\n            type: Syntax.Literal,\n            value: token.value\n        };\n    }\n\n    function createRawLiteral(token) {\n        return {\n            type: Syntax.Literal,\n            value: token.value,\n            raw: sliceSource(token.range[0], token.range[1])\n        };\n    }\n\n    function wrapTrackingFunction(range, loc) {\n\n        return function (parseFunction) {\n\n            function isBinary(node) {\n                return node.type === Syntax.LogicalExpression ||\n                    node.type === Syntax.BinaryExpression;\n            }\n\n            function visit(node) {\n                if (isBinary(node.left)) {\n                    visit(node.left);\n                }\n                if (isBinary(node.right)) {\n                    visit(node.right);\n                }\n\n                if (range && typeof node.range === 'undefined') {\n                    node.range = [node.left.range[0], node.right.range[1]];\n                }\n                if (loc && typeof node.loc === 'undefined') {\n                    node.loc = {\n                        start: node.left.loc.start,\n                        end: node.right.loc.end\n                    };\n                }\n            }\n\n            return function () {\n                var node, rangeInfo, locInfo;\n\n                skipComment();\n                rangeInfo = [index, 0];\n                locInfo = {\n                    start: {\n                        line: lineNumber,\n                        column: index - lineStart\n                    }\n                };\n\n                node = parseFunction.apply(null, arguments);\n                if (typeof node !== 'undefined') {\n\n                    if (range && typeof node.range === 'undefined') {\n                        rangeInfo[1] = index;\n                        node.range = rangeInfo;\n                    }\n\n                    if (loc && typeof node.loc === 'undefined') {\n                        locInfo.end = {\n                            line: lineNumber,\n                            column: index - lineStart\n                        };\n                        node.loc = locInfo;\n                    }\n\n                    if (isBinary(node)) {\n                        visit(node);\n                    }\n\n                    if (node.type === Syntax.MemberExpression) {\n                        if (typeof node.object.range !== 'undefined') {\n                            node.range[0] = node.object.range[0];\n                        }\n                        if (typeof node.object.loc !== 'undefined') {\n                            node.loc.start = node.object.loc.start;\n                        }\n                    }\n\n                    if (node.type === Syntax.CallExpression) {\n                        if (typeof node.callee.range !== 'undefined') {\n                            node.range[0] = node.callee.range[0];\n                        }\n                        if (typeof node.callee.loc !== 'undefined') {\n                            node.loc.start = node.callee.loc.start;\n                        }\n                    }\n                    return node;\n                }\n            };\n\n        };\n    }\n\n    function patch() {\n\n        var wrapTracking;\n\n        if (extra.comments) {\n            extra.skipComment = skipComment;\n            skipComment = scanComment;\n        }\n\n        if (extra.raw) {\n            extra.createLiteral = createLiteral;\n            createLiteral = createRawLiteral;\n        }\n\n        if (extra.range || extra.loc) {\n\n            wrapTracking = wrapTrackingFunction(extra.range, extra.loc);\n\n            extra.parseAdditiveExpression = parseAdditiveExpression;\n            extra.parseAssignmentExpression = parseAssignmentExpression;\n            extra.parseBitwiseANDExpression = parseBitwiseANDExpression;\n            extra.parseBitwiseORExpression = parseBitwiseORExpression;\n            extra.parseBitwiseXORExpression = parseBitwiseXORExpression;\n            extra.parseBlock = parseBlock;\n            extra.parseFunctionSourceElements = parseFunctionSourceElements;\n            extra.parseCallMember = parseCallMember;\n            extra.parseCatchClause = parseCatchClause;\n            extra.parseComputedMember = parseComputedMember;\n            extra.parseConditionalExpression = parseConditionalExpression;\n            extra.parseConstLetDeclaration = parseConstLetDeclaration;\n            extra.parseEqualityExpression = parseEqualityExpression;\n            extra.parseExportDeclaration = parseExportDeclaration;\n            extra.parseExportSpecifier = parseExportSpecifier;\n            extra.parseExportSpecifierSetProperty = parseExportSpecifierSetProperty;\n            extra.parseExpression = parseExpression;\n            extra.parseForVariableDeclaration = parseForVariableDeclaration;\n            extra.parseFunctionDeclaration = parseFunctionDeclaration;\n            extra.parseFunctionExpression = parseFunctionExpression;\n            extra.parseGlob = parseGlob;\n            extra.parseImportDeclaration = parseImportDeclaration;\n            extra.parseImportSpecifier = parseImportSpecifier;\n            extra.parseLogicalANDExpression = parseLogicalANDExpression;\n            extra.parseLogicalORExpression = parseLogicalORExpression;\n            extra.parseMultiplicativeExpression = parseMultiplicativeExpression;\n            extra.parseModuleDeclaration = parseModuleDeclaration;\n            extra.parseModuleBlock = parseModuleBlock;\n            extra.parseNewExpression = parseNewExpression;\n            extra.parseNonComputedMember = parseNonComputedMember;\n            extra.parseNonComputedProperty = parseNonComputedProperty;\n            extra.parseObjectProperty = parseObjectProperty;\n            extra.parseObjectPropertyKey = parseObjectPropertyKey;\n            extra.parsePath = parsePath;\n            extra.parsePostfixExpression = parsePostfixExpression;\n            extra.parsePrimaryExpression = parsePrimaryExpression;\n            extra.parseProgram = parseProgram;\n            extra.parsePropertyFunction = parsePropertyFunction;\n            extra.parseRelationalExpression = parseRelationalExpression;\n            extra.parseQuasiElement = parseQuasiElement;\n            extra.parseQuasiLiteral = parseQuasiLiteral;\n            extra.parseStatement = parseStatement;\n            extra.parseShiftExpression = parseShiftExpression;\n            extra.parseSwitchCase = parseSwitchCase;\n            extra.parseTaggedQuasi = parseTaggedQuasi;\n            extra.parseUnaryExpression = parseUnaryExpression;\n            extra.parseVariableDeclaration = parseVariableDeclaration;\n            extra.parseVariableIdentifier = parseVariableIdentifier;\n            extra.parseMethodDefinition = parseMethodDefinition;\n            extra.parseClassDeclaration = parseClassDeclaration;\n            extra.parseClassExpression = parseClassExpression;\n            extra.parseClassBody = parseClassBody;\n\n            parseAdditiveExpression = wrapTracking(extra.parseAdditiveExpression);\n            parseAssignmentExpression = wrapTracking(extra.parseAssignmentExpression);\n            parseBitwiseANDExpression = wrapTracking(extra.parseBitwiseANDExpression);\n            parseBitwiseORExpression = wrapTracking(extra.parseBitwiseORExpression);\n            parseBitwiseXORExpression = wrapTracking(extra.parseBitwiseXORExpression);\n            parseBlock = wrapTracking(extra.parseBlock);\n            parseFunctionSourceElements = wrapTracking(extra.parseFunctionSourceElements);\n            parseCallMember = wrapTracking(extra.parseCallMember);\n            parseCatchClause = wrapTracking(extra.parseCatchClause);\n            parseComputedMember = wrapTracking(extra.parseComputedMember);\n            parseConditionalExpression = wrapTracking(extra.parseConditionalExpression);\n            parseConstLetDeclaration = wrapTracking(extra.parseConstLetDeclaration);\n            parseExportDeclaration = wrapTracking(parseExportDeclaration);\n            parseExportSpecifier = wrapTracking(parseExportSpecifier);\n            parseExportSpecifierSetProperty = wrapTracking(parseExportSpecifierSetProperty);\n            parseEqualityExpression = wrapTracking(extra.parseEqualityExpression);\n            parseExpression = wrapTracking(extra.parseExpression);\n            parseForVariableDeclaration = wrapTracking(extra.parseForVariableDeclaration);\n            parseFunctionDeclaration = wrapTracking(extra.parseFunctionDeclaration);\n            parseFunctionExpression = wrapTracking(extra.parseFunctionExpression);\n            parseGlob = wrapTracking(extra.parseGlob);\n            parseImportDeclaration = wrapTracking(extra.parseImportDeclaration);\n            parseImportSpecifier = wrapTracking(extra.parseImportSpecifier);\n            parseLogicalANDExpression = wrapTracking(extra.parseLogicalANDExpression);\n            parseLogicalORExpression = wrapTracking(extra.parseLogicalORExpression);\n            parseMultiplicativeExpression = wrapTracking(extra.parseMultiplicativeExpression);\n            parseModuleDeclaration = wrapTracking(extra.parseModuleDeclaration);\n            parseModuleBlock = wrapTracking(extra.parseModuleBlock);\n            parseNewExpression = wrapTracking(extra.parseNewExpression);\n            parseNonComputedMember = wrapTracking(extra.parseNonComputedMember);\n            parseNonComputedProperty = wrapTracking(extra.parseNonComputedProperty);\n            parseObjectProperty = wrapTracking(extra.parseObjectProperty);\n            parseObjectPropertyKey = wrapTracking(extra.parseObjectPropertyKey);\n            parsePath = wrapTracking(extra.parsePath);\n            parsePostfixExpression = wrapTracking(extra.parsePostfixExpression);\n            parsePrimaryExpression = wrapTracking(extra.parsePrimaryExpression);\n            parseProgram = wrapTracking(extra.parseProgram);\n            parsePropertyFunction = wrapTracking(extra.parsePropertyFunction);\n            parseQuasiElement = wrapTracking(extra.parseQuasiElement);\n            parseQuasiLiteral = wrapTracking(extra.parseQuasiLiteral);\n            parseRelationalExpression = wrapTracking(extra.parseRelationalExpression);\n            parseStatement = wrapTracking(extra.parseStatement);\n            parseShiftExpression = wrapTracking(extra.parseShiftExpression);\n            parseSwitchCase = wrapTracking(extra.parseSwitchCase);\n            parseTaggedQuasi = wrapTracking(extra.parseTaggedQuasi);\n            parseUnaryExpression = wrapTracking(extra.parseUnaryExpression);\n            parseVariableDeclaration = wrapTracking(extra.parseVariableDeclaration);\n            parseVariableIdentifier = wrapTracking(extra.parseVariableIdentifier);\n            parseMethodDefinition = wrapTracking(extra.parseMethodDefinition);\n            parseClassDeclaration = wrapTracking(extra.parseClassDeclaration);\n            parseClassExpression = wrapTracking(extra.parseClassExpression);\n            parseClassBody = wrapTracking(extra.parseClassBody);\n        }\n\n        if (typeof extra.tokens !== 'undefined') {\n            extra.advance = advance;\n            extra.scanRegExp = scanRegExp;\n\n            advance = collectToken;\n            scanRegExp = collectRegex;\n        }\n    }\n\n    function unpatch() {\n        if (typeof extra.skipComment === 'function') {\n            skipComment = extra.skipComment;\n        }\n\n        if (extra.raw) {\n            createLiteral = extra.createLiteral;\n        }\n\n        if (extra.range || extra.loc) {\n            parseAdditiveExpression = extra.parseAdditiveExpression;\n            parseAssignmentExpression = extra.parseAssignmentExpression;\n            parseBitwiseANDExpression = extra.parseBitwiseANDExpression;\n            parseBitwiseORExpression = extra.parseBitwiseORExpression;\n            parseBitwiseXORExpression = extra.parseBitwiseXORExpression;\n            parseBlock = extra.parseBlock;\n            parseFunctionSourceElements = extra.parseFunctionSourceElements;\n            parseCallMember = extra.parseCallMember;\n            parseCatchClause = extra.parseCatchClause;\n            parseComputedMember = extra.parseComputedMember;\n            parseConditionalExpression = extra.parseConditionalExpression;\n            parseConstLetDeclaration = extra.parseConstLetDeclaration;\n            parseEqualityExpression = extra.parseEqualityExpression;\n            parseExportDeclaration = extra.parseExportDeclaration;\n            parseExportSpecifier = extra.parseExportSpecifier;\n            parseExportSpecifierSetProperty = extra.parseExportSpecifierSetProperty;\n            parseExpression = extra.parseExpression;\n            parseForVariableDeclaration = extra.parseForVariableDeclaration;\n            parseFunctionDeclaration = extra.parseFunctionDeclaration;\n            parseFunctionExpression = extra.parseFunctionExpression;\n            parseGlob = extra.parseGlob;\n            parseImportDeclaration = extra.parseImportDeclaration;\n            parseImportSpecifier = extra.parseImportSpecifier;\n            parseLogicalANDExpression = extra.parseLogicalANDExpression;\n            parseLogicalORExpression = extra.parseLogicalORExpression;\n            parseMultiplicativeExpression = extra.parseMultiplicativeExpression;\n            parseModuleDeclaration = extra.parseModuleDeclaration;\n            parseModuleBlock = extra.parseModuleBlock;\n            parseNewExpression = extra.parseNewExpression;\n            parseNonComputedMember = extra.parseNonComputedMember;\n            parseNonComputedProperty = extra.parseNonComputedProperty;\n            parseObjectProperty = extra.parseObjectProperty;\n            parseObjectPropertyKey = extra.parseObjectPropertyKey;\n            parsePath = extra.parsePath;\n            parsePostfixExpression = extra.parsePostfixExpression;\n            parsePrimaryExpression = extra.parsePrimaryExpression;\n            parseProgram = extra.parseProgram;\n            parsePropertyFunction = extra.parsePropertyFunction;\n            parseQuasiElement = extra.parseQuasiElement;\n            parseQuasiLiteral = extra.parseQuasiLiteral;\n            parseRelationalExpression = extra.parseRelationalExpression;\n            parseStatement = extra.parseStatement;\n            parseShiftExpression = extra.parseShiftExpression;\n            parseSwitchCase = extra.parseSwitchCase;\n            parseTaggedQuasi = extra.parseTaggedQuasi;\n            parseUnaryExpression = extra.parseUnaryExpression;\n            parseVariableDeclaration = extra.parseVariableDeclaration;\n            parseVariableIdentifier = extra.parseVariableIdentifier;\n            parseMethodDefinition = extra.parseMethodDefinition;\n            parseClassDeclaration = extra.parseClassDeclaration;\n            parseClassExpression = extra.parseClassExpression;\n            parseClassBody = extra.parseClassBody;\n        }\n\n        if (typeof extra.scanRegExp === 'function') {\n            advance = extra.advance;\n            scanRegExp = extra.scanRegExp;\n        }\n    }\n\n    function stringToArray(str) {\n        var length = str.length,\n            result = [],\n            i;\n        for (i = 0; i < length; ++i) {\n            result[i] = str.charAt(i);\n        }\n        return result;\n    }\n\n    function parse(code, options) {\n        var program, toString;\n\n        toString = String;\n        if (typeof code !== 'string' && !(code instanceof String)) {\n            code = toString(code);\n        }\n\n        source = code;\n        index = 0;\n        lineNumber = (source.length > 0) ? 1 : 0;\n        lineStart = 0;\n        length = source.length;\n        buffer = null;\n        state = {\n            allowIn: true,\n            labelSet: {},\n            parenthesizedCount: 0,\n            lastParenthesized: null,\n            inFunctionBody: false,\n            inIteration: false,\n            inSwitch: false\n        };\n\n        extra = {};\n        if (typeof options !== 'undefined') {\n            extra.range = (typeof options.range === 'boolean') && options.range;\n            extra.loc = (typeof options.loc === 'boolean') && options.loc;\n            extra.raw = (typeof options.raw === 'boolean') && options.raw;\n            if (typeof options.tokens === 'boolean' && options.tokens) {\n                extra.tokens = [];\n            }\n            if (typeof options.comment === 'boolean' && options.comment) {\n                extra.comments = [];\n            }\n            if (typeof options.tolerant === 'boolean' && options.tolerant) {\n                extra.errors = [];\n            }\n        }\n\n        if (length > 0) {\n            if (typeof source[0] === 'undefined') {\n                // Try first to convert to a string. This is good as fast path\n                // for old IE which understands string indexing for string\n                // literals only and not for string object.\n                if (code instanceof String) {\n                    source = code.valueOf();\n                }\n\n                // Force accessing the characters via an array.\n                if (typeof source[0] === 'undefined') {\n                    source = stringToArray(code);\n                }\n            }\n        }\n\n        patch();\n        try {\n            program = parseProgram();\n            if (typeof extra.comments !== 'undefined') {\n                filterCommentLocation();\n                program.comments = extra.comments;\n            }\n            if (typeof extra.tokens !== 'undefined') {\n                filterTokenLocation();\n                program.tokens = extra.tokens;\n            }\n            if (typeof extra.errors !== 'undefined') {\n                program.errors = extra.errors;\n            }\n        } catch (e) {\n            throw e;\n        } finally {\n            unpatch();\n            extra = {};\n        }\n\n        return program;\n    }\n\n    // Sync with package.json.\n    exports.version = '1.0.0-dev-harmony';\n\n    exports.parse = parse;\n\n    // Deep copy.\n    exports.Syntax = (function () {\n        var name, types = {};\n\n        if (typeof Object.create === 'function') {\n            types = Object.create(null);\n        }\n\n        for (name in Syntax) {\n            if (Syntax.hasOwnProperty(name)) {\n                types[name] = Syntax[name];\n            }\n        }\n\n        if (typeof Object.freeze === 'function') {\n            Object.freeze(types);\n        }\n\n        return types;\n    }());\n\n}));\n/* vim: set sw=4 ts=4 et tw=80 : */","blocks":{"total":800,"seen":598,"missing":202,"percentage":0.7475}},"hash":"81b76368e35ffae8b12e5c927be2e520"}}}